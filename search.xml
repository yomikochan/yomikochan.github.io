<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>哈希树</title>
      <link href="/2018/09/28/hash-tree/"/>
      <url>/2018/09/28/hash-tree/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>哈希树又叫做<a href="https://en.wikipedia.org/wiki/Merkle_tree" target="_blank" rel="noopener">Merkle tree</a>。广泛应用于密码学领域进行数据加密。个人也很喜欢这个算法。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>一张十分易懂的图(来源：<a href="https://blog.csdn.net/yang_yulei/article/details/46337405" target="_blank" rel="noopener">https://blog.csdn.net/yang_yulei/article/details/46337405</a>) ：</p><p><img src="http://img.it610.com/image/info5/41313cddbbed46e8aee99b9ffd72654e.jpg" alt="hash_tree.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T1, class T2&gt; struct BaseNode &#123;</span><br><span class="line">    T1 key; T2 val;</span><br><span class="line">    BaseNode*next[N];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加权函数"><a href="#加权函数" class="headerlink" title="加权函数"></a>加权函数</h3><p>由于key数据主要使用字符串类型，所以我们先考虑将字符串进行加权。沿用了我做<code>Json解析器</code>时用到的加权函数。稍有不同的是，这里直接使用每一个字符的<code>ascii</code>码乘以字符的位置，最后再加上字符串长度。因为考虑到数字类的字符的<code>ascii</code>码比字符<code>A</code>小，会出现负数。设字符串长度为 $ n $，则加权函数为</p><script type="math/tex; mode=display">weight(s) = n + \sum_{i = 0}^{n} s_{i} \cdot (i + 1)</script><p>即</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">weight</span><span class="params">(<span class="built_in">string</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x = <span class="number">0</span>; <span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; key.size(); i++) x += key[i]*(i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> x + i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h3><p>显然，树由上而下变得越来越茂密，因为，根据质数的性质，如果质数越小，则能被其整除的数越多，所以，发生碰撞的概率越大，于是这样就导致了树的形状。<br>关于为什么质数只使用到 $ 29 $，每一层的子节点数最大为 $ 32 $ 的问题，我认为看严谨的数学证明会更好：<a href="https://wenku.baidu.com/view/16b2c7abd1f34693daef3e58.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/16b2c7abd1f34693daef3e58.html</a></p><p>ps 还是想说说算法的空间复杂度：第0层1个根节点，第1层为2进制，第0层最多2个子节点，第2层为3进制，每个节点最多3个子节点，第3层为5进制，每个节点最多5个子节点。。。以此类推，注意到每一层的总结点个数为以该层的进制数为底，前一层的进制数为幂，因此最坏情况下，10层的时候，哈希树的总空间大小为：$ 2^1 + 3^2 + 5^3 + 7^5 + 11^7 + 13^{11} + 17^{13} + 19^{17} + 23^{19} + 29^{23} $ 这是一个非常大的数字，所以空间是完全足够的。至于32，每层每个节点都有32个子节点的空间，最大可以 $ mod \ 29 $，所以，下标也不会越界。想要突破第十层，需要比较特殊的一组数，可以连续映射前 10 个质数。其实也很容易突破，只要这组数满足第 $ i $ 个数能被前 $ i $ 个质数整除，就可以了（我之前的加权算法会导致这样的情况，比如，这样一组字符串 “a”,”b”,”c”,”d”，虽然字符串不同，但却都被加权为1，结果 $ 1 \ mod $ 任何数都为1，嘛…后来改为下标从 1 开始就不存在单个字符组成的字符串被加权为 1 的情况了）。但工程中也尽量避免这样的情况，会做一些处理，所以基本上属于概率问题了。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_OVERFLOW 0x16</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> prime[] = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span> &#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">ll</span> <span class="title">weight</span>(<span class="title">T</span> <span class="title">key</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll x = <span class="number">0</span>; <span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; key[i]; i++) x += key[i]*(i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> x + i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt; <span class="title">struct</span> <span class="title">BaseNode</span> &#123;</span></span><br><span class="line">    T1 key; T2 val;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="built_in">floor</span>;</span><br><span class="line">    BaseNode*next[N];</span><br><span class="line">    BaseNode() &#123; <span class="built_in">floor</span> = <span class="number">0</span>; REP(i, N) next[i] = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">    BaseNode(T1 k, T2 v) : key(k), val(v) &#123; <span class="built_in">floor</span> = <span class="number">0</span>; REP(i, N) next[i] = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">HashTree</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T2 return_type_value;</span><br><span class="line">    BaseNode&lt;T1, T2&gt;*root;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destory</span><span class="params">(BaseNode&lt;T1, T2&gt;*&amp;r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r)</span><br><span class="line">        &#123;</span><br><span class="line">            REP(i, prime[r-&gt;<span class="built_in">floor</span>]) destory(r-&gt;next[i]);</span><br><span class="line">            <span class="keyword">delete</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(BaseNode&lt;T1, T2&gt;*&amp;r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r)</span><br><span class="line">        &#123;</span><br><span class="line">            REP(i, prime[r-&gt;<span class="built_in">floor</span>]) print(r-&gt;next[i]);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; r-&gt;key &lt;&lt; <span class="string">":"</span> &lt;&lt; r-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BaseNode&lt;T1, T2&gt;* findkey(T1 key)</span><br><span class="line">    &#123;</span><br><span class="line">        BaseNode&lt;T1, T2&gt;*p = root;</span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (p &amp;&amp; p-&gt;key != key)</span><br><span class="line">                p = p-&gt;next[weight(key)%prime[i++]];</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HashTree()</span><br><span class="line">    &#123;</span><br><span class="line">        root = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeid</span>(T2) == <span class="keyword">typeid</span>(<span class="built_in">string</span>))</span><br><span class="line">            return_type_value = <span class="built_in">string</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeid</span>(T2) == <span class="keyword">typeid</span>(<span class="keyword">const</span> <span class="keyword">char</span>*))</span><br><span class="line">            return_type_value = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeid</span>(T2) == <span class="keyword">typeid</span>(<span class="keyword">char</span>*))</span><br><span class="line">            return_type_value = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeid</span>(T2) == <span class="keyword">typeid</span>(<span class="keyword">long</span> <span class="keyword">long</span>))</span><br><span class="line">            return_type_value = MAX_OVERFLOW;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeid</span>(T2) == <span class="keyword">typeid</span>(<span class="keyword">int</span>))</span><br><span class="line">            return_type_value = ~MAX_OVERFLOW | <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeid</span>(T2) == <span class="keyword">typeid</span>(<span class="keyword">unsigned</span>))</span><br><span class="line">            return_type_value = MAX_OVERFLOW &gt;&gt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeid</span>(T2) == <span class="keyword">typeid</span>(<span class="keyword">short</span>))</span><br><span class="line">            return_type_value = ~MAX_OVERFLOW &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeid</span>(T2) == <span class="keyword">typeid</span>(<span class="keyword">double</span>))</span><br><span class="line">            return_type_value = MAX_OVERFLOW | <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeid</span>(T2) == <span class="keyword">typeid</span>(<span class="keyword">float</span>))</span><br><span class="line">            return_type_value = MAX_OVERFLOW &gt;&gt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeid</span>(T2) == <span class="keyword">typeid</span>(<span class="keyword">bool</span>))</span><br><span class="line">            return_type_value = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            return_type_value = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HashTree(T1 k, T2 v) &#123; root = <span class="literal">nullptr</span>; insert(k, v); &#125;</span><br><span class="line">    ~HashTree() &#123; destory(root); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(T1 key, T2 val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BaseNode&lt;T1, T2&gt;*n = <span class="keyword">new</span> BaseNode&lt;T1, T2&gt;(key, val);</span><br><span class="line">        <span class="keyword">if</span> (!root)</span><br><span class="line">            root = n;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!findkey(key))</span><br><span class="line">            &#123;</span><br><span class="line">                BaseNode&lt;T1, T2&gt;*p = root; <span class="keyword">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (p-&gt;next[weight(key)%prime[i]])</span><br><span class="line">                    p = p-&gt;next[weight(key)%prime[i++]];</span><br><span class="line">                n-&gt;<span class="built_in">floor</span> = i + <span class="number">1</span>;</span><br><span class="line">                p-&gt;next[weight(key)%prime[i]] = n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(T1 key, T2 val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BaseNode&lt;T1, T2&gt;*p = findkey(key);</span><br><span class="line">        <span class="keyword">if</span> (p) p-&gt;val = val;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Not found the key!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(T1 key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BaseNode&lt;T1, T2&gt;*p = findkey(key);</span><br><span class="line">        <span class="keyword">if</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">size_t</span> i = <span class="number">0</span>, pos;</span><br><span class="line">            <span class="keyword">while</span> (!p-&gt;next[i++]) <span class="comment">/* pass */</span>;</span><br><span class="line">            pos = i - <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">queue</span>&lt;BaseNode&lt;T1, T2&gt;*&gt; children;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; prime[p-&gt;next[pos]-&gt;<span class="built_in">floor</span> - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;next[i]) children.push(p-&gt;next[i]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next[pos];</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">            <span class="keyword">while</span> (!children.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                BaseNode&lt;T1, T2&gt;*siling = children.front(); children.pop();</span><br><span class="line">                BaseNode&lt;T1, T2&gt;*n = p; <span class="keyword">size_t</span> j = siling-&gt;<span class="built_in">floor</span>;</span><br><span class="line">                <span class="keyword">while</span> (p-&gt;next[weight(siling-&gt;key)%prime[j]])</span><br><span class="line">                    p = p-&gt;next[weight(siling-&gt;key)%prime[j++]];</span><br><span class="line">                p-&gt;next[weight(siling-&gt;key)%prime[j]] = siling;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Not found the key!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visual</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        print(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T2&amp; <span class="title">GetValue</span><span class="params">(T1 key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BaseNode&lt;T1, T2&gt;*n = findkey(key);</span><br><span class="line">        <span class="keyword">if</span> (n)</span><br><span class="line">            <span class="keyword">return</span> n-&gt;val;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Not found the key!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> return_type_value;</span><br><span class="line">    &#125;</span><br><span class="line">    T2&amp; <span class="keyword">operator</span>[](T1 key)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetValue(key);</span><br><span class="line">    &#125;</span><br><span class="line">    T2&amp; <span class="keyword">operator</span>=(T2 val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HashTree&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; n;</span><br><span class="line">    n.insert(<span class="string">"one"</span>, <span class="string">"first"</span>);</span><br><span class="line">    n.insert(<span class="string">"two"</span>, <span class="string">"second"</span>);</span><br><span class="line">    n.insert(<span class="string">"three"</span>, <span class="string">"third"</span>);</span><br><span class="line">    n.insert(<span class="string">"four"</span>, <span class="string">"fourth"</span>);</span><br><span class="line">    n.insert(<span class="string">"five"</span>, <span class="string">"fifth"</span>);</span><br><span class="line">    n.insert(<span class="string">"six"</span>, <span class="string">"sixth"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n[<span class="string">"two"</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n[<span class="string">"three"</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n[<span class="string">"one"</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    n[<span class="string">"one"</span>] = <span class="string">"error"</span>; <span class="comment">// 还可以通过这样的方式进行赋值</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n[<span class="string">"one"</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    n.visual();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">second</span><br><span class="line">third</span><br><span class="line">first</span><br><span class="line">error</span><br><span class="line">six:sixth</span><br><span class="line">five:fifth</span><br><span class="line">three:third</span><br><span class="line">two:second</span><br><span class="line">four:fourth</span><br><span class="line">one:error</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>后缀树</title>
      <link href="/2018/09/25/suffix-tree/"/>
      <url>/2018/09/25/suffix-tree/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>详见我的这篇blog:<a href="https://www.cnblogs.com/darkchii/p/9116558.html" target="_blank" rel="noopener">Suffix tree</a></p><h3 id="路径压缩版后缀树"><a href="#路径压缩版后缀树" class="headerlink" title="路径压缩版后缀树"></a>路径压缩版后缀树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(int i = a; i &lt; b; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> trans(c) (c - <span class="meta-string">'a'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 26</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX (100010 &lt;&lt; 2)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BaseNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>*s;</span><br><span class="line"><span class="keyword">int</span> pos[MAX];</span><br><span class="line">BaseNode*next[SIZE];</span><br><span class="line">BaseNode()</span><br><span class="line">&#123;</span><br><span class="line">len = <span class="number">0</span>;</span><br><span class="line">rep(i, <span class="number">0</span>, MAX) pos[i] = <span class="number">0</span>;</span><br><span class="line">rep(i, <span class="number">0</span>, SIZE) next[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">BaseNode(<span class="keyword">const</span> <span class="keyword">char</span>*s, <span class="keyword">int</span> p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;s = s, <span class="keyword">this</span>-&gt;len = p;</span><br><span class="line">rep(i, <span class="number">0</span>, MAX) pos[i] = <span class="number">0</span>;</span><br><span class="line">rep(i, <span class="number">0</span>, SIZE) next[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuffixTree</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">BaseNode*root;</span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s, <span class="keyword">int</span> p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(BaseNode*r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory</span><span class="params">(BaseNode*&amp;r)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">SuffixTree()</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">insert(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visual</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">print(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">match(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line">~SuffixTree()</span><br><span class="line">&#123;</span><br><span class="line">destory(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> SuffixTree::add(<span class="keyword">const</span> <span class="keyword">char</span>*s, <span class="keyword">int</span> p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; <span class="keyword">while</span> (s[i]) i++;</span><br><span class="line"><span class="keyword">if</span> (!root-&gt;next[p]) root-&gt;next[p] = <span class="keyword">new</span> BaseNode(s, i);</span><br><span class="line">root-&gt;next[p]-&gt;pos[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> SuffixTree::insert(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="keyword">new</span> BaseNode();</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line">add(s, trans(*s));</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> SuffixTree::match(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ps = root-&gt;next[trans(*s)]-&gt;s;</span><br><span class="line"><span class="keyword">while</span> (*s) <span class="keyword">if</span> (*ps++ != *s++) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> SuffixTree::print(BaseNode*r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line">rep(i, <span class="number">0</span>, SIZE)</span><br><span class="line"><span class="keyword">if</span> (r-&gt;next[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">':'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">rep(j, <span class="number">0</span>, r-&gt;next[i]-&gt;len + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (r-&gt;next[i]-&gt;pos[j])</span><br><span class="line">&#123;</span><br><span class="line">rep(k, <span class="number">0</span>, r-&gt;next[i]-&gt;pos[j])</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; r-&gt;next[i]-&gt;s[k];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'$'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> SuffixTree::destory(BaseNode*&amp;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line">rep(i, <span class="number">0</span>, SIZE) destory(r-&gt;next[i]);</span><br><span class="line"><span class="keyword">delete</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SuffixTree st;</span><br><span class="line">st.insert(<span class="string">"banana"</span>);</span><br><span class="line">st.visual();</span><br><span class="line"><span class="keyword">if</span> (st.match(<span class="string">"na"</span>)) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0:</span><br><span class="line">a$</span><br><span class="line">ana$</span><br><span class="line">anana$</span><br><span class="line">1:</span><br><span class="line">banana$</span><br><span class="line">13:</span><br><span class="line">na$</span><br><span class="line">nana$</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浮点型转字符串</title>
      <link href="/2018/09/25/float-to-string/"/>
      <url>/2018/09/25/float-to-string/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>写 Json 解析器的时候临时写了一个字符串转浮点型的算法（详见<a href="https://darkchii.github.io/2018/07/21/json-parser/">Json 解析器</a>中的代码<code>str2float()</code>函数），写的时候一边又想了浮点型转字符串的算法。但还有一些 bug 和没注意到的地方，比如，小数点后全是 0，正确的做法是要把所有 0 都表示出来，小数点后的某两个数不为 0 的数之间出现 0，会在末尾多出一个‘(’符。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bits</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> &amp;i, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> ;</span><br><span class="line">    bits(str, i, x/<span class="number">10</span>);</span><br><span class="line">    str[i++] = x%<span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">dou2str</span><span class="params">(<span class="keyword">double</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span>) s[i++] = <span class="string">'-'</span>, num *= <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> x = num;</span><br><span class="line">    <span class="keyword">double</span> y = num - x;</span><br><span class="line">    bits(s, i, x);</span><br><span class="line">    s[i++] = <span class="string">'.'</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        y *= <span class="number">10</span>;</span><br><span class="line">        s[i++] = <span class="keyword">int</span>(y + <span class="number">0.1</span>)%<span class="number">10</span> + <span class="string">'0'</span>; <span class="comment">// </span></span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="keyword">int</span>(<span class="built_in">ceil</span>(y)) != <span class="keyword">int</span>(y + <span class="number">0.1</span>));</span><br><span class="line">    s[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num = <span class="number">123204.00657</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dou2str(num) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法释义"><a href="#算法释义" class="headerlink" title="算法释义"></a>算法释义</h3><p>对于小数点左边的部分处理，显然，使用递归是最方便的。</p><p>重点部分是处理小数部分的精度，计算机会将比如浮点数 0.54 = 0.53999999999，于是当小数点移到 54 时，就会变为 53.99999999，这时 int 会得到 53，然后就不能得到精确结果了。所以对每个移动小数点后的数都 +0.1来判断可以避免这个问题。我的出口判断条件是当小数点移动到某个位置时，如果向上取整的数等于向下取整的数，就说明这个数以后都是 0 了，那么循环就到此结束。</p>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P3372（模板）线段树1</title>
      <link href="/2018/09/24/p3372/"/>
      <url>/2018/09/24/p3372/</url>
      <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> st first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nd second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rd third</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for(int i =(a); i &lt;=(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RE(i, n) FOR(i, 1, n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 0;i &lt;(n); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VAR(v, i) __typeof(i) v=(i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALL(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(i) ((i) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(i) ((i) &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">int</span> l, r, val, tag; &#125; segment[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c; <span class="keyword">int</span> ret = <span class="number">0</span>, sgn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;c = getchar();&#125;<span class="keyword">while</span>((c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; c != <span class="string">'-'</span>);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">'-'</span>) sgn = <span class="number">-1</span>; <span class="keyword">else</span> ret = c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span>((c = getchar()) &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>) ret = ret * <span class="number">10</span> + (c - <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">return</span> sgn * ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> num[], <span class="keyword">int</span> s, <span class="keyword">int</span> e, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == e) segment[p].val = num[s];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        segment[p].tag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = (s + e) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(num, s, m, l(p));</span><br><span class="line">        build(num, m + <span class="number">1</span>, e, r(p));</span><br><span class="line">        segment[p].val = segment[l(p)].val + segment[r(p)].val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e, <span class="keyword">int</span> b, <span class="keyword">int</span> f, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b &lt;= s &amp;&amp; e &lt;= f)</span><br><span class="line">    &#123;</span><br><span class="line">        segment[p].val += v*(e - s + <span class="number">1</span>);</span><br><span class="line">        segment[p].tag += v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (s + e) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    segment[l(p)].tag += segment[p].tag;</span><br><span class="line">    segment[l(p)].val += segment[p].tag*(m - s + <span class="number">1</span>);</span><br><span class="line">    segment[r(p)].tag += segment[p].tag;</span><br><span class="line">    segment[r(p)].val += segment[p].tag*(e - m);</span><br><span class="line">    segment[p].tag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (b &lt;= m) update(s, m, b, f, l(p), v);</span><br><span class="line">    <span class="keyword">if</span> (f &gt; m) update(m + <span class="number">1</span>, e, b, f, r(p), v);</span><br><span class="line">    segment[p].val = segment[l(p)].val + segment[r(p)].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e, <span class="keyword">int</span> b, <span class="keyword">int</span> f, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b &lt;= s &amp;&amp; e &lt;= f) <span class="keyword">return</span> segment[p].val;</span><br><span class="line">    <span class="keyword">int</span> m = (s + e) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    segment[l(p)].tag += segment[p].tag;</span><br><span class="line">    segment[l(p)].val += segment[p].tag*(m - s + <span class="number">1</span>);</span><br><span class="line">    segment[r(p)].tag += segment[p].tag;</span><br><span class="line">    segment[r(p)].val += segment[p].tag*(e - m);</span><br><span class="line">    segment[p].tag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (b &lt;= m) ans += query(s, m, b, f, l(p));</span><br><span class="line">    <span class="keyword">if</span> (f &gt; m) ans += query(m + <span class="number">1</span>, e, b, f, r(p));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, num[N], x, y, v, opera;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">    build(num, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; opera;</span><br><span class="line">        <span class="keyword">switch</span>(opera)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; v; update(<span class="number">1</span>, n, x, y, <span class="number">1</span>, v); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y; <span class="built_in">cout</span> &lt;&lt; query(<span class="number">1</span>, n, x, y, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Lougu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P3368（模板）树状数组</title>
      <link href="/2018/09/19/p3368/"/>
      <url>/2018/09/19/p3368/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>借这个题学新姿势，这个题需要利用差分才能AC，普通树状树有3个点过不了。</p><h5 id="差分原理（参考题解区大佬）："><a href="#差分原理（参考题解区大佬）：" class="headerlink" title="差分原理（参考题解区大佬）："></a>差分原理（参考题解区大佬）：</h5><p>一个例子，一组数据 $ a[] = { 1, 5, 4, 2, 3 } $，差分后得到 $ b[] = { 1, 4, -1, -2, 1 } $，其中 $ a_0 = 0, b_i = a_i - a_{i - 1} $，求原数组 $ a_n $ 某个位置 $ i $ 上的值。</p><p>由 $ b_i = a_i - a_{i - 1} \Rightarrow a_i = b_i + a_{i - 1} $，于是</p><script type="math/tex; mode=display">\left.\begin{aligned}a_i &= b_i + a_{i - 1} \\a_{i - 1} &= b_{i - 1} + a_{i - 2} \\\vdots \\a_1 &= b_1 + a_0\end{aligned} \right\} +</script><script type="math/tex; mode=display">\Rightarrow  a_i = b_i + b_{i - 1} + \cdots + b_1 + a_0</script><p>注意到 $ a_0 = 0 $，于是 $ a_i = \sum_{i = 1}^{n} b_i $ 。这样就求出了原数组位置上的值了。</p><p>然后再看看如何更新区间的值呢。</p><p>我们对 a 数组区间 2 ~ 4 每个值进行 +2 操作，得到 $ 1, 7, 6, 4, 3 $，我们对这个数组进行新的差分得到 $ b_n’ = { 1 6 -1 -2 -1 } $ ，我们比较新的差分数组 $ b_n’ $ 与 $ b_n $，发现只有 $ b_2’, b_5’ $ 上的值变了，$ b_2’ = b_2 + 2, b_5’ = b_5 - 2 $，可以验证，在任何区间 $ a[l,…,r] $ 做出 $ +x $ 更新，都有 $ b_l’ = b_l + x , b_{r + 1}’ = b_{r + 1} - x $ 。并且不论任何数组经过这样操作都有这样的特点，于是就有了代码中的 <code>dif()</code> 函数对区间进行更新。这样每次更新只用更新位置 $ b_l, b_{r + 1} $ 上的值，效率提高了许多。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> st first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> nd second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rd third</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for(int i =(a); i &lt;=(b); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RE(i, n) FOR(i, 1, n)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, n) for(int i = 0;i &lt;(n); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VAR(v, i) __typeof(i) v=(i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORE(i, c) for(VAR(i, (c).begin()); i != (c).end(); ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALL(x) (x).begin(), (x).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; (-x))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</span><br><span class="line"><span class="keyword">int</span> id[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &lt;= n) id[k] += x, k += lowbit(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dif</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    upd(n, l, x);</span><br><span class="line">    upd(n, r + <span class="number">1</span>, -x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) ans += id[k], k -= lowbit(k);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">org</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(k) - sum(k - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum(r) - sum(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, x, opera, l, r, pre;</span><br><span class="line">    pre = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    FOR (i, <span class="number">1</span>, n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        upd(n, i, x - pre); <span class="comment">// 差分后更新到树状数组</span></span><br><span class="line">        pre = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; opera;</span><br><span class="line">        <span class="keyword">switch</span>(opera)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x; dif(n, l, r, x); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">cin</span> &gt;&gt; k; <span class="built_in">cout</span> &lt;&lt; sum(k) &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Lougu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>筛法</title>
      <link href="/2018/09/13/sieve/"/>
      <url>/2018/09/13/sieve/</url>
      <content type="html"><![CDATA[<h3 id="Sieve-of-Eratosthenes-埃氏筛"><a href="#Sieve-of-Eratosthenes-埃氏筛" class="headerlink" title="Sieve of Eratosthenes (埃氏筛)"></a>Sieve of Eratosthenes (埃氏筛)</h3><p>时间复杂度：$ O(nlglgn) $</p><p><a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" target="_blank" rel="noopener">埃氏筛 - 维基百科</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2000010</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span>**v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> prime[N];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++)</span><br><span class="line">        prime[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(N); i++)</span><br><span class="line">        <span class="keyword">if</span> (prime[i])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i*i; j &lt; N; j += i)</span><br><span class="line">                prime[j] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">if</span> (prime[i])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sieve-of-Atkin"><a href="#Sieve-of-Atkin" class="headerlink" title="Sieve of Atkin"></a>Sieve of Atkin</h3><p><a href="https://en.wikipedia.org/wiki/Sieve_of_Atkin" target="_blank" rel="noopener">Sieve of Atkin - wikipedia</a></p><h3 id="Sieve-of-prime-素数筛"><a href="#Sieve-of-prime-素数筛" class="headerlink" title="Sieve of prime (素数筛)"></a>Sieve of prime (素数筛)</h3><p>学会这个筛法就可以A掉这个题了：P3383 【模板】线性筛</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000010</span>;</span><br><span class="line"><span class="keyword">int</span> prime[N], notprime[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SievePrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">    notprime[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notprime[i]) prime[++step] = i;</span><br><span class="line">        <span class="keyword">for</span> (rg <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= step &amp;&amp; prime[j] * i &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            notprime[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SievePrime();</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">if</span> (prime[i])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; prime[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sieve-of-Euler-欧拉筛"><a href="#Sieve-of-Euler-欧拉筛" class="headerlink" title="Sieve of Euler (欧拉筛)"></a>Sieve of Euler (欧拉筛)</h3><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p><strong>欧拉函数</strong></p><script type="math/tex; mode=display">\phi(n) = n \prod_{p|n} (1 - \frac{1}{p}) = \prod(p - 1)p^{k_r - 1}</script><p>其中 $ p $ 为 $ n $ 的所有质因子。<strong>它表示在不超过 $ n $ 的正整数中与 $ n $ 互质的数的个数。</strong></p><p>如果 $ p $ 是素数，$ k \geq 1 $，那么有</p><script type="math/tex; mode=display">\phi(p^k) = p^{k - 1}(p - 1) = p^k(1 - \frac{1}{p})</script><p>利用这个公式便可以证明欧拉函数。</p><p>首先 $ n = p_1^{k_1} \cdots p_r^{k_r} $，则</p><script type="math/tex; mode=display">\begin{aligned}\phi(n)&= \phi(p_1^{k_1})\phi(p_2^{k_2}) \cdots \phi(p_r^{k_r}) \\&= p_1^{k_1}(1 - \frac{1}{p_1})p_2^{k_2}(1 - \frac{1}{p_2}) \cdots p_r^{k_r}(1 - \frac{1}{p_r}) \\&= p_1^{k_1}p_2^{k_2} \cdots p_r^{k_r}(1 - \frac{1}{p_1})(1 - \frac{1}{p_2}) \cdots (1 - \frac{1}{p_r}) \\&= n(1 - \frac{1}{p_1})(1 - \frac{1}{p_2}) \cdots (1 - \frac{1}{p_r})\end{aligned}</script><p>欧拉函数是积性函数。</p><ul><li>与欧拉定理、费马小定理的关系</li></ul><p>对任何两个互质的正整数 $ a, m (m &gt;= 2) $，有欧拉定理 $ a^{\phi(m)} = 1(mod \ m) $ (其中 $ \phi(m) $ 是欧拉函数) ，当 $ m $ 是质数 $ p $ 时，式子变为</p><script type="math/tex; mode=display">x^{p - 1} = 1(mod \ p)</script><p>即费马小定理。</p><p>更多关于欧拉函数，另请参见：</p><ol><li><a href="https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/1944850?fr=aladdin" target="_blank" rel="noopener">欧拉函数 - 百度百科</a></li><li><a href="https://en.wikipedia.org/wiki/Euler%27s_totient_function" target="_blank" rel="noopener">Euler function - wikipedia</a></li></ol><p><strong>求欧拉函数的算法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eular</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i*i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n /= i,ret *= i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(n%i == <span class="number">0</span>) n /= i, ret *= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) ret *= n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    s = eular(n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>欧拉筛法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000010</span>;</span><br><span class="line"><span class="keyword">int</span> prime[N], notprime[N], phi[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SieveEuler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notprime[i]) prime[++step] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (rg <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= step &amp;&amp; prime[j] * i &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            notprime[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> phi[i * prime[j]] = phi[i]*(prime[j] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SieveEuler();</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">if</span> (prime[i])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; prime[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sieve-of-Mobius-莫比乌斯筛"><a href="#Sieve-of-Mobius-莫比乌斯筛" class="headerlink" title="Sieve of Mobius (莫比乌斯筛)"></a>Sieve of Mobius (莫比乌斯筛)</h3><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p><strong>莫比乌斯函数</strong></p><script type="math/tex; mode=display">\mu(n) = \eta_{\omega(n)\Omega(n)}\lambda(n)</script><p>这里 $ \lambda(n) $ 是刘维尔函数。</p><p>莫比乌斯函数也是一个积性函数（$ \mu(ab) = \mu(a)\mu(b) $，$ a $ 和 $ b $ 互质 ）</p><p>当 $ n = 1 $ 时，$ n $ 的所有因子的莫比乌斯函数值和为 1;<br>当 $ n \neq 1 $ 时，$ n $ 的所有因子的莫比乌斯函数值和为 0.</p><p>即</p><script type="math/tex; mode=display">\sum_{d|n}\mu(d) =\left\{\begin{aligned}     1 \quad n = 1; \\    0 \quad n > 1.\end{aligned}\right.</script><p>莫比乌斯函数完整定义的通俗表达：</p><ol><li>莫比乌斯函数 $ \mu(n) $ 的定义域是 $ N $;</li><li>$ \mu(1) = 1 $;</li><li>当n存在平方因子时，$ \mu(n) =0 $;</li><li>当n是素数或奇数个不同素数之积时，$ \mu(n) = -1 $;</li><li>当n是偶数个不同素数之积时，$ \mu(n) = 1 $.</li></ol><script type="math/tex; mode=display">\mu(n) =\left\{\begin{aligned}     1 \quad n = 1; \\    (-1)^k \quad n = p_1 p_2 \ cdots p_k    0 \quad other.\end{aligned}\right.</script><p>参考：</p><p><a href="https://baike.baidu.com/item/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0/2567473" target="_blank" rel="noopener">莫比乌斯函数 - 百度百科</a><br><a href="https://en.wikipedia.org/wiki/M%C3%B6bius_function" target="_blank" rel="noopener">Mobius function - wikipedia</a></p><p><strong>莫比乌斯筛法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rg register</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> prime[N], notprime[N], mobius[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SieveMobius</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">    mobius[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (rg <span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!notprime[i]) prime[++step] = i, mobius[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (rg <span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= step &amp;&amp; prime[j] * i &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            notprime[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mobius[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> mobius[i * prime[j]] = -mobius[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SieveMobius();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">if</span> (prime[i])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; prime[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h3><p><a href="https://www.cnblogs.com/Paul-Guderian/p/7723031.html" target="_blank" rel="noopener">线性筛</a><br><a href="https://blog.csdn.net/qq_40515553/article/details/79365871" target="_blank" rel="noopener">几种线性筛</a></p>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Prime </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计数排序</title>
      <link href="/2018/09/09/counting-sort/"/>
      <url>/2018/09/09/counting-sort/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>计数排序是一种空间换时间的排序算法。通常用作<a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">基数排序</a>的子过程。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li><a href="http://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">Counting sort - wikipeida</a></li><li><a href="https://baike.baidu.com/item/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">计数排序 - 百度百科</a></li><li><a href="https://www.cdn.geeksforgeeks.org/counting-sort/" target="_blank" rel="noopener">Counting sort - geeksforgeeks</a></li></ol><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> k = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAXN], c[MAXN], ranked[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        ++c[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; ++i)</span><br><span class="line">        c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        ranked[--c[a[i]]] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ranked[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><ul><li><p>时间复杂度 O(n + k)</p></li><li><p>空间复杂度 O(n + k)</p></li></ul>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Sorting </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>矩阵运算</title>
      <link href="/2018/09/08/matrix-operations/"/>
      <url>/2018/09/08/matrix-operations/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这篇主要介绍一些矩阵运算相关算法。</p><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>矩阵相乘：$ C = AB $</p><h5 id="普通算法"><a href="#普通算法" class="headerlink" title="普通算法"></a>普通算法</h5><ul><li>时间复杂度 $ O(N^3) $</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++)</span><br><span class="line">            c[i][j] += a[i][k] * b[k][j];</span><br></pre></td></tr></table></figure><h5 id="Strassen算法"><a href="#Strassen算法" class="headerlink" title="Strassen算法"></a>Strassen算法</h5><ul><li>时间复杂度 $ O(N^{lg7}) $</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Strassen_algo</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt; &amp; c, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;  a, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;  b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h3><p>$ n $ 个未知数 $ m $ 个方程的线性方程组</p><script type="math/tex; mode=display">\left\{\begin{matrix}a_{00}x_0 & a_{01}x_1 & \cdots & a_{0n}x_n &= b_0 \\a_{10}x_0 & a_{11}x_1 & \cdots & a_{1n}x_n &= b_1 \\\vdots \\a_{m0}x_0 & a_{m1}x_1 & \cdots & a_{mn}x_n &= b_m \end{matrix}\right.</script><p>将上式写为以向量 $ x $ 为未知元的向量方程</p><script type="math/tex; mode=display">Ax = b \quad (1)</script><h5 id="方程是否有解"><a href="#方程是否有解" class="headerlink" title="方程是否有解"></a>方程是否有解</h5><p>设 $ B = (A, b) $ 为增广矩阵，$ R(A) $ 是矩阵 $ A $ 的秩，$ R(A, b) $ 是增广矩阵 $ B $ 的秩。</p><ul><li>无解的充分必要条件是 $ R(A) &lt; R(A, b) $;</li><li>$ n $ 元线性方程组 $ Ax = b \quad $ 有唯一解的充分必要条件是 $ R(A) = R(A, b) = n $;</li><li>有无限多解的充分必要条件是 $ R(A) = R(A, b) \leq n $.</li></ul><h5 id="LUP分解原理"><a href="#LUP分解原理" class="headerlink" title="LUP分解原理"></a>LUP分解原理</h5><p>$ LUP $ 分解的基本思想就是找出三个 $ n \times n $ 矩阵 $ L $、$ U $、$ P $，满足</p><script type="math/tex; mode=display">PA = LU \quad (2)</script><p>其中，$ L $ 是一个单位下三角矩阵，$ U $ 是一个上三角矩阵，$ P $ 是一个置换矩阵。我们称满足式 (2) 的矩阵 $ L $、$ U $、$ P $ 为矩阵 $ A $ 的 <strong>LUP 分解</strong>。</p><p>可以证明，如果矩阵 $ A $ 是一个非奇异矩阵，那么我们一定能找到 $ L $、$ U $、$ P $ 分解满足上式。</p><p>这有什么用呢？</p><p>我们先对 (1) 进行置换，在等式 $ Ax = b $ 两边同时乘以 $ P $ 置换，得到：$ PAx = Pb $，利用 (2) 式有</p><script type="math/tex; mode=display">LUx = Pb</script><p>设 $ y = Ux $，其中 x 就是要求解的向量解。首先，通过一种称为“正向替换”的方法求解单位下三角系统</p><script type="math/tex; mode=display">Ly = Pb \quad (3)</script><p>得到未知向量 $ y $。然后，通过一种称为“反向替换”的方法求解上三角系统</p><script type="math/tex; mode=display">Ux = y \quad (4)</script><p>得到向量解 $ x $。由于置换矩阵 $ P $ 是可逆的，在等式 (2) 两边同时乘以 $ P^{-1} $，于是</p><script type="math/tex; mode=display">A = P^{-1}LU</script><p>因此，向量 $ x $ 就是 $ Ax = b $ 的解</p><script type="math/tex; mode=display">\begin{aligned}Ax&= P^{-1}LUx \\&= P^{-1}Ly \\&= P^{-1}Pb \\&= b\end{aligned}</script><h5 id="正向替换与反向替换"><a href="#正向替换与反向替换" class="headerlink" title="正向替换与反向替换"></a>正向替换与反向替换</h5><p>进一步看看正向替换与反向替换是如何进行的。</p><ul><li>正向替换</li></ul><p>已知 $ L $、$ P $ 和 $ b $，正向替换可在 $ O(n^2) $ 的时间内求解单位下三角系统 (3)。</p><script type="math/tex; mode=display">Pb = \begin{bmatrix}p_{0,0} & p_{0,1} & \cdots & p_{0,n} \\p_{1,0} & p_{1,1} & \cdots & p_{1,n} \\\vdots & \vdots & \cdots & \vdots \\p_{n,0} & p_{n,1} & \cdots & p_{n,n}\end{bmatrix}\begin{bmatrix}b_0 \\b_1 \\\vdots \\b_n\end{bmatrix}=\begin{bmatrix}\sum_{j = 0}^{n}p_{0,j} \cdot b_j \\\sum_{j = 0}^{n}p_{1,j} \cdot b_j \\\vdots \\\sum_{j = 0}^{n}p_{n,j} \cdot b_j\end{bmatrix}</script><p>为了方便起见，这里用一个数组 $ \pi[0…n] $ 简洁地表示置换 $ P $。对 $ i = 0, 1, 2, \cdots, n $，元素 $ \pi[i] $ 表示 $ P_{i, \pi[i]} = 1 $，并且对 $ j \neq \pi[i] $ 有 $ P_{ij} = 0 $。因此，$ PA $ 第 $ i $ 行第 $ j $ 列的元素为 $ a_{\pi[i],j} $，$ Pb $ 的第 $ i $ 个元素为 $ b_{\pi[i]} $。因为 $ L $ 是单位下三角矩阵，我们可以重写等式 (3) 为：</p><script type="math/tex; mode=display">\begin{bmatrix}y_0 & & & & & & & & &= b_{\pi[0]} \\l_{10}y_0 & + & y_1 & & & & & & &= b_{\pi[1]} \\l_{20}y_0 & + & l_{21}y_1 & + & y_2 & & & & &= b_{\pi[2]} \\\vdots \\l_{n0}y_0 & + & l_{n1}y_1 & + & l_{n2}y_2 & + & \cdots & + & y_n &= b_{\pi[n]}\end{bmatrix}</script><p>第一个等式可以求出 $ y_0 $，我们把它代入第二个等式，求出 </p><script type="math/tex; mode=display">y_1 = b_{\pi[1]} - l_{10}y_0</script><p>在将 $ y_1, y_2 $ 代入第三个等式，得到</p><script type="math/tex; mode=display">y_2 = b_{\pi[2]} - (l_{20}y_0 + l{21}y_1)</script><p>一般的，我们把 $ y_0, y_1, \cdots, y_{i - 1} $ “正向替换”到第 $ i $ 个等式中，就可以求解 $ y_i $：</p><script type="math/tex; mode=display">y_i = b_{\pi[i]} - \sum_{j = 0}^{i - 1} l_{ij}y_{j}</script><ul><li>反向替换</li></ul><p>与正向替换类似，求解上三角系统等式 (4)。</p><script type="math/tex; mode=display">\begin{bmatrix}u_{0,0}x_0 & + & u_{0,1}x_1 & + & \cdots & + & u_{0,n-2}x_{n-2} & + & u_{0,n-1}x_{n-1} & + & u_{0,n}x_n &= y_{0} \\& & u_{1,1}x_1 & + &  \cdots & + & u_{1,n-2}x_{n-2} & + & u_{1,n-1}x_{n-1} & + & u_{1,n}x_n &= y_{1} \\& & & & & & & & & & \vdots \\& & & & & & u_{n-2,n-2}x_{n-2} & + & u_{n-2,n-1}x_{n-1} & + & u_{n-2,n}x_n &= y_{n - 2} \\& & & & & & & & u_{n-1,n-1}x_{n-1} & + & u_{n-1,n}x_n &= y_{n - 1} \\& & & & & & & & & & u_{n,n}x_n &= y_{n}\end{bmatrix}</script><p>这里我们先求解第 $ n $ 个等式，然后往前一个等式代，因此可以如下相继求出 $ x_n, x_{n - 1}, \cdots, x_1 $ 的解：</p><script type="math/tex; mode=display">\begin{aligned}x_n &= \frac{y_{n}}{u_{n,n}} \\x_{n - 1} &= \frac{y_{n - 1} - u_{n - 1, n}x_n}{u_{n - 1,n - 1}} \\\vdots\end{aligned}</script><p>一般的，有</p><script type="math/tex; mode=display">x_i = \frac{y_i - \sum_{j = i + 1}^{n} u_{ij}x_{j}}{u_{ij}}</script><h5 id="计算LUP分解"><a href="#计算LUP分解" class="headerlink" title="计算LUP分解"></a>计算LUP分解</h5><p>我们该如何找到这样的 $ L $、 $ U $、 $ P $ 矩阵呢？</p><p>通常在 $ LUP $ 分解中包含一个置换矩阵 $ P $ 的原因是为了避免矩阵 $ A $ 中的主元 $ a_{i,i} = 0 $ ，即矩阵对角线上的数。</p><p>但如果矩阵 $ A $ 的对角线上的数都不为 0，我们有一个 $ LU $ 分解算法就可以计算出矩阵 $ L $ 、 $ U $。</p><p>下面先给出LU分解算法的实现，之后再分析算法原理。</p><h5 id="LU分解算法实现"><a href="#LU分解算法实现" class="headerlink" title="LU分解算法实现"></a>LU分解算法实现</h5><p>示例(Example):</p><script type="math/tex; mode=display">\begin{bmatrix}2 & 3 & 1 & 5 \\6 & 13 & 5 & 19 \\2 & 19 & 10 & 23 \\4 & 10 & 11 & 31 \\\end{bmatrix}</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lu</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt; &amp;l, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt; &amp;u, <span class="keyword">float</span> a[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">l[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">l[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">u[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">u[i][i] = a[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line">l[j][i] = a[j][i] / u[i][i];</span><br><span class="line">u[i][j] = a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> k = i + <span class="number">1</span>; k &lt; N; k++)</span><br><span class="line">a[j][k] -= l[j][i] * u[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;  l(N, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;(N));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;  u(N, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;(N));</span><br><span class="line"><span class="keyword">float</span> a[N][N] = &#123;</span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"><span class="number">6</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">19</span>,</span><br><span class="line"><span class="number">2</span>, <span class="number">19</span>, <span class="number">10</span>, <span class="number">23</span>,</span><br><span class="line"><span class="number">4</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">31</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">lu(l, u, a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"L 矩阵:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; l[i][j] &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"U 矩阵:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; u[i][j] &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++)</span><br><span class="line">a[i][j] += l[i][k] * u[k][j];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"A 矩阵:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LU分解算法分析"><a href="#LU分解算法分析" class="headerlink" title="LU分解算法分析"></a>LU分解算法分析</h5><p>前面说到对于一个非奇异矩阵 $ A $，即 $ \det{A} \neq 0 $，就能找到其 $ LU $ 分解，那么运用正向替换与反向替换就可以求出线性方程组 $ Ax = b $ 的解。</p><blockquote><p>原理：算法利用高斯消元法来创建 $ LU $ 分解。首先从其他方程中减去第一个方程的倍数，以把那些方程中的第一个变量消去。然后，从第三个及以后的方程中减去第二个方程的倍数，把这些方程的第一个和第二个变量消去。继续上述过程，直到系统变为一个上三角矩阵形式，实际上此矩阵就是 $ U $。矩阵 $ L $ 是由消去变量所用的行的乘数组成。</p></blockquote><p>采用递归算法实现这个策略。我们希望构造出一个 $ n \times n $ 的非奇异矩阵 $ A $ 的一个 $ LU $ 分解。<br>如果 $ n = 1 $，则构造完成，因为可以算则 $ L = I_1 $ (注：$ I_n $ 是单位阵)， $ U = A $。对于 $ n &gt; 1 $，我们把 $ A $ 拆成 4 部分</p><script type="math/tex; mode=display">\begin{bmatrix}a_{11} & | & a_{12} & \cdots & a_{1n} \\-&-&-&-&- \\a_{21} & | & a_{22} & \cdots & a_{2n} \\\vdots & | \\a_{n1} & | & a_{n2} & \cdots & a_{nn}\end{bmatrix}=\begin{bmatrix}a_{11} & \omega^T \\\upsilon & A'\end{bmatrix}</script><p>其中 $ \upsilon $ 是一个 $ n - 1 $ 维列向量，$ \omega^T $ 是一个 $ n - 1 $ 维行向量，$ A’ $ 是一个 $ (n - 1) \times (n - 1) $ 矩阵。然后，利用矩阵代数 (通过简单地从头到尾使用乘法来验证方程式)，可以把 $ A $ 分解为</p><script type="math/tex; mode=display">\begin{bmatrix}1 & 0 \\\frac{\upsilon}{a_{11}} & I_{n - 1}\end{bmatrix}\begin{bmatrix}a_{11} & \omega^T \\0 & A' - \frac{\upsilon\omega^T}{a_{11}}\end{bmatrix}</script><p>项 $ \frac{\upsilon\omega^T}{a_{11}} $ 是一个 $ (n - 1) \times (n - 1) $ 矩阵，它与矩阵 $ A’ $ 大小一致。所得矩阵</p><script type="math/tex; mode=display">A' - \frac{\upsilon\omega^T}{a_{11}}</script><p>称为矩阵 $ A $ 对于 $ a_{11} $ 的<a href="https://en.wikipedia.org/wiki/Schur_complement" target="_blank" rel="noopener">舒尔补</a>。</p><p>如果矩阵 $ A $ 是非奇异的，那么舒尔补矩阵也是非奇异的。</p><p>因为舒尔补是非奇异的，现在我们可以递归地找出它的一个 $ LU $ 分解。我们说</p><script type="math/tex; mode=display">A' - \frac{\upsilon\omega^T}{a_{11}} = L'U'</script><p>其中 $ L’ $ 是单位下三角矩阵，$ U’ $ 是上三角矩阵。然后，利用矩阵代数可得</p><script type="math/tex; mode=display">\begin{aligned}A &= \begin{bmatrix}1 & 0 \\\frac{\upsilon}{a_{00}} & I_{n - 1}\end{bmatrix}\begin{bmatrix}a_{00} & \omega^T \\0 & A' - \frac{\upsilon\omega^T}{a_{00}}\end{bmatrix}= \begin{bmatrix}1 & 0 \\\frac{\upsilon}{a_{00}} & I_{n - 1}\end{bmatrix}\begin{bmatrix}a_{k0} & \omega^T \\0 & L'U'\end{bmatrix} \\&=\begin{bmatrix}1 & 0 \\\frac{\upsilon}{a_{00}} & L'\end{bmatrix}\begin{bmatrix}a_{00} & \omega^T \\0 & U'\end{bmatrix}=LU\end{aligned}</script><ul><li>时间复杂度 $ O(N^3) $</li></ul><h5 id="LUP分解算法实现"><a href="#LUP分解算法实现" class="headerlink" title="LUP分解算法实现"></a>LUP分解算法实现</h5><p>示例(Example):</p><script type="math/tex; mode=display">\begin{bmatrix}2 & 0 & 2 & 0.6 \\3 & 3 & 4 & -2 \\5 & 5 & 4 & 2 \\-1 & -2 & 3.4 & -1\end{bmatrix}</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lup</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; &amp;P, <span class="keyword">float</span> a[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> p = <span class="number">0</span>; <span class="keyword">size_t</span> i_;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = i; j &lt; N; j++)</span><br><span class="line"><span class="keyword">if</span> (fabsf(a[j][i]) &gt; p)</span><br><span class="line">p = fabsf(a[j][i]), i_ = j;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">swap(P[i], P[i_]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">swap(a[i][j], a[i_][j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line">a[j][i] /= a[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> k = i + <span class="number">1</span>; k &lt; N; k++)</span><br><span class="line">a[j][k] -= a[j][i] * a[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; P(N);</span><br><span class="line"><span class="keyword">float</span> b[][N] = &#123;</span><br><span class="line"><span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0.6</span>,</span><br><span class="line"><span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">-2</span>,</span><br><span class="line"><span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>,</span><br><span class="line"><span class="number">-1</span>, <span class="number">-2</span>, <span class="number">3.4</span>, <span class="number">-1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    lup(P, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"B 矩阵:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[i][j] &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"P 矩阵:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; P.size(); i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; P[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>version 2.<code>lup()</code></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lup2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;&amp;l, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;&amp;u, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; &amp;P, <span class="keyword">float</span> a[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">l[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">l[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">u[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> p = <span class="number">0</span>; <span class="keyword">int</span> i_;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; N; j++)</span><br><span class="line"><span class="keyword">if</span> (fabsf(a[j][i]) &gt; p)</span><br><span class="line">p = fabsf(a[j][i]), i_ = j;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">swap(P[i], P[i_]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">swap(a[i][j], a[i_][j]);</span><br><span class="line">u[i][i] = a[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line">l[j][i] = a[j][i] / u[i][i];</span><br><span class="line">u[i][j] = a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; N; k++)</span><br><span class="line">a[j][k] -= l[j][i] * u[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LUP分解算法分析"><a href="#LUP分解算法分析" class="headerlink" title="LUP分解算法分析"></a>LUP分解算法分析</h5><blockquote><p>原理：算法考虑每次计算过程，若主元为 $ 0 $ 或主元的值大于除数时，我们将找到合适的行与当前主元所在的行进行交换。比如，第 $ 1 $ 行，第 $ 1 $ 列为 $ 0 $，我们把第 $ 1 $ 行与第 $ k $ 行互换，这等价于用一个置换矩阵 $ Q $ 左乘矩阵 $ A $。因此可以把 $ QA $ 写成</p></blockquote><script type="math/tex; mode=display">QA =\begin{bmatrix}a_{k1} & \omega^T \\\upsilon & A'\end{bmatrix}</script><p>其中</p><script type="math/tex; mode=display">\begin{aligned}\upsilon &= (a_{21}, a_{31}, \cdots, a_{n1})^T \\\omega^T &= (a_{k2}, a_{k3}, \cdots, a_{kn})\end{aligned}</script><p>$ A’ $ 是一个 $ (n - 1) \times (n - 1) $ 矩阵。因为 $ a_{k1} \neq 0 $，现在可以执行与 $ LU $ 分解基本相同的线性代数运算，但现在能保证不会除以 0</p><script type="math/tex; mode=display">QA =\begin{bmatrix}a_{k1} & \omega^T \\\upsilon & A'\end{bmatrix}=\begin{bmatrix}1 & 0 \\\frac{\upsilon}{a_{k1}} & I_{n - 1}\end{bmatrix}\begin{bmatrix}a_{k1} & \omega^T \\0 & A' - \frac{\upsilon\omega^T}{a_{k1}}\end{bmatrix}</script><p>如果 $ A $ 是非奇异的，那么舒尔补 $ A’ - \frac{\upsilon\omega^T}{a_{k1}} $ 也是非奇异的。因此，可以递归地找出它的一个 $ LUP $ 分解，包括单位下三角矩阵 $ L’ $、上三角矩阵 $ U’ $ 和 置换矩阵 $ P’ $，满足</p><script type="math/tex; mode=display">P'(A' - \frac{\upsilon\omega^T}{a_{k1}}) = L'U'</script><p>定义</p><script type="math/tex; mode=display">P = \begin{bmatrix}1 & 0 \\0 & P'\end{bmatrix}Q</script><p>它是一个置换矩阵，因为它是两个置换矩阵的乘积。有</p><script type="math/tex; mode=display">\begin{aligned}PA &= \begin{bmatrix}1 & 0 \\0 & P'\end{bmatrix}QA = \begin{bmatrix}1 & 0 \\0 & P'\end{bmatrix}\begin{bmatrix}1 & 0 \\\frac{\upsilon}{a_{k1}} & I_{n - 1}\end{bmatrix}\begin{bmatrix}a_{k1} & \omega^T \\0 & A' - \frac{\upsilon\omega^T}{a_{k1}}\end{bmatrix} \\&= \begin{bmatrix}1 & 0 \\P'\frac{\upsilon}{a_{k1}} & P'\end{bmatrix}\begin{bmatrix}a_{k1} & \omega^T \\0 & A' - \frac{\upsilon\omega^T}{a_{k1}}\end{bmatrix}=\begin{bmatrix}1 & 0 \\P'\frac{\upsilon}{a_{k1}} & I_{n - 1}\end{bmatrix}\begin{bmatrix}a_{k1} & \omega^T \\0 & P'(A' - \frac{\upsilon\omega^T}{a_{k1}})\end{bmatrix} \\&= \begin{bmatrix}1 & 0 \\P'\frac{\upsilon}{a_{k1}} & I_{n - 1}\end{bmatrix}\begin{bmatrix}a_{k1} & \omega^T \\0 & L'U'\end{bmatrix}=\begin{bmatrix}1 & 0 \\P'\frac{\upsilon}{a_{k1}} & L'\end{bmatrix}\begin{bmatrix}a_{k1} & \omega^T \\0 & U'\end{bmatrix}=LU\end{aligned}</script><p>这样就推出了 $ LUP $ 分解。因为 $ L’ $ 是单位下三角矩阵，所以 $ L $ 也是单位下三角矩阵；又因为 $ U’ $ 是上三角矩阵，于是 $ U $ 也是上三角矩阵。</p><ul><li>时间复杂度 $ O(N^3) $</li></ul><h5 id="求解线性方程组算法"><a href="#求解线性方程组算法" class="headerlink" title="求解线性方程组算法"></a>求解线性方程组算法</h5><p>有了以上基础知识以后，我们才能拿到 $ L $、$ U $、$ P $ ，步入最后一步求解出线性方程组 $ Ax = b $ 的向量解。</p><h5 id="完整的算法实现"><a href="#完整的算法实现" class="headerlink" title="完整的算法实现"></a>完整的算法实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lu</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt; &amp;l, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt; &amp;u, <span class="keyword">float</span> a[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">l[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">l[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">u[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">u[i][i] = a[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line">l[j][i] = a[j][i] / u[i][i];</span><br><span class="line">u[i][j] = a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; N; k++)</span><br><span class="line">a[j][k] -= l[j][i] * u[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lup</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; &amp;P, <span class="keyword">float</span> a[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> p = <span class="number">0</span>; <span class="keyword">int</span> i_;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; N; j++)</span><br><span class="line"><span class="keyword">if</span> (fabsf(a[j][i]) &gt; p)</span><br><span class="line">p = fabsf(a[j][i]), i_ = j;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">swap(P[i], P[i_]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">swap(a[i][j], a[i_][j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line">a[j][i] /= a[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; N; k++)</span><br><span class="line">a[j][k] -= a[j][i] * a[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lup2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;&amp;l, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;&amp;u, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; &amp;P, <span class="keyword">float</span> a[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">l[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">l[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">u[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> p = <span class="number">0</span>; <span class="keyword">int</span> i_;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; N; j++)</span><br><span class="line"><span class="keyword">if</span> (fabsf(a[j][i]) &gt; p)</span><br><span class="line">p = fabsf(a[j][i]), i_ = j;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">swap(P[i], P[i_]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">swap(a[i][j], a[i_][j]);</span><br><span class="line">u[i][i] = a[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">&#123;</span><br><span class="line">l[j][i] = a[j][i] / u[i][i];</span><br><span class="line">u[i][j] = a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; N; k++)</span><br><span class="line">a[j][k] -= l[j][i] * u[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lup_solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;&amp;l, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;&amp;u, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&amp;x, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&amp;y, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; b, <span class="keyword">float</span> a[][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">sum += l[i][j] * y[j];</span><br><span class="line">y[i] = b[i] - sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">sum += u[i][j] * x[j];</span><br><span class="line">x[i] = (y[i] - sum) / u[i][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;  l(N, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;(N));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;  u(N, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;(N));</span><br><span class="line"><span class="comment">/*float a[][N] = &#123;</span></span><br><span class="line"><span class="comment">2, 3, 1, 5,</span></span><br><span class="line"><span class="comment">6, 13, 5, 19,</span></span><br><span class="line"><span class="comment">2, 19, 10, 23,</span></span><br><span class="line"><span class="comment">4, 10, 11, 31</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">float b[][N] = &#123;</span></span><br><span class="line"><span class="comment">2, 0, 2, 0.6,</span></span><br><span class="line"><span class="comment">3, 3, 4, -2,</span></span><br><span class="line"><span class="comment">5, 5, 4, 2,</span></span><br><span class="line"><span class="comment">-1, -2, 3.4, -1</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="keyword">float</span> c[][N] = &#123;</span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line"><span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; P(N);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; x(N);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; y(N);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; b &#123; <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">P[i] = (<span class="keyword">float</span>)i;</span><br><span class="line"></span><br><span class="line">lup2(l, u, P, c);</span><br><span class="line"></span><br><span class="line">lup_solve(l, u, x, y, b, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"解向量 x:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><script type="math/tex; mode=display">\begin{bmatrix}1 & 2 & 0 \\3 & 4 & 4 \\5 & 6 & 3\end{bmatrix}</script><p><strong>output:</strong></p><p>使用 <code>lu()</code> 函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解向量 x:</span><br><span class="line">-1.4</span><br><span class="line">2.2</span><br><span class="line">0.6</span><br></pre></td></tr></table></figure><p>使用 <code>lup2()</code> 函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解向量 x:</span><br><span class="line">-10.08</span><br><span class="line">7.94</span><br><span class="line">1.92</span><br></pre></td></tr></table></figure><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>显然，代码很直观的实现了对算法的描述过程，即利用正向替换，代换出 $ Ly = Pb $ 的 $ y $，然后再利用反向替换计算出 $ Ux = y $ 中的解向量 $ x $。</p><ul><li><code>lup_solve()</code>的时间复杂度为 $ O(N^2) $</li></ul><h3 id="矩阵求逆"><a href="#矩阵求逆" class="headerlink" title="矩阵求逆"></a>矩阵求逆</h3><p>$ A’ $ 是 $ A $ 的逆矩阵，则有</p><script type="math/tex; mode=display">AA' = E</script><p>其中 $ E $ 是单位阵。</p><p>设 $ X = A’ $， $ X_i $ 表示 $ X $ 的第 $ i $ 列， $ e_i $ 是 $ E $ 的第 $ i $ 列。于是可以利用 $ A $ 的 $ LUP $ 分解求解方程中的 $ X $，需分别求解每一个方程</p><script type="math/tex; mode=display">AX_i = e_i</script><p>中的 $ X_i $。一旦得到 $ LUP $ 分解，就可以在 $ O(N^2) $ 时间内计算 $ n $ 个 $ X_i $ 列中的每一个，因此可以在 $ O(N^3) $ 时间内从 $ A $ 的 $ LUP $ 分解计算 $ X $。既然可以在 $ O(N^3) $ 内确定出 $ A $ 的 $ LUP $ 分解，我们就可以在 $ O(N^3) $ 的时间内求矩阵 $ A $ 的逆矩阵 $ A’ $。</p><h5 id="算法演示"><a href="#算法演示" class="headerlink" title="算法演示"></a>算法演示</h5><p><strong>示例：</strong></p><script type="math/tex; mode=display">\begin{bmatrix}1 & 2 & 0 \\3 & 4 & 4 \\5 & 6 & 3\end{bmatrix}</script><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;  l(N, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;(N));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt;  u(N, <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;(N));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; x(N);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; y(N);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&gt; E &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;,</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt;&#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="keyword">float</span> a[][N] = &#123;</span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line"><span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">lu(l, u, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; E.size(); j++)</span><br><span class="line">&#123;</span><br><span class="line">lup_solve(l, u, x, y, E[j], a);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"解向量 X["</span> &lt;&lt; j &lt;&lt; <span class="string">"]:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">解向量 X[0]:</span><br><span class="line">-1.2</span><br><span class="line">1.1</span><br><span class="line">-0.2</span><br><span class="line">解向量 X[1]:</span><br><span class="line">-0.6</span><br><span class="line">0.3</span><br><span class="line">0.4</span><br><span class="line">解向量 X[2]:</span><br><span class="line">0.8</span><br><span class="line">-0.4</span><br><span class="line">-0.2</span><br></pre></td></tr></table></figure><p><strong>即</strong></p><script type="math/tex; mode=display">A'=\begin{bmatrix}-1.2 & -0.6 & 0.8 \\1.1 & 0.3 & -0.4 \\-0.2 & 0.4 & -0.2\end{bmatrix}</script><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li>[1] 《算法导论 第三版》</li><li>[2] 《线性代数 第五版》· 同济大学数学系</li><li>[3] <a href="https://en.wikipedia.org/wiki/Matrix_multiplication" target="_blank" rel="noopener">matrix multiplicaton - wikipedia</a></li></ul>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
          <category> mathematical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数学-导数篇（持续更新）</title>
      <link href="/2018/09/05/math-derivative/"/>
      <url>/2018/09/05/math-derivative/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这里主要存放一些导数题</p><h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><p>1.已知向量 $ a = (sin(x), \frac{3}{4}), b = (cos(x), -1) $.</p><p>(1) 当 $ a // b $ 时，求 $ cos^2(x) - sin(2x) $;</p><p>(2) 设函数 $ f(x) = 2(\vec{a} + \vec{b}) \cdot \vec{b} $, 已知在△ABC中，内角A、B、C的对边分别为 $ a, b, c $,若 $ a = \sqrt{3}, b = 2, sin(B) = \frac{\sqrt{6}}{3} $,求 $ f(x) + 4 cos(2A + \frac{\pi}{6})(x \in [0, \frac{\pi}{3}]) $ 的取值范围。</p><p>题解：</p><p>这题虽然是一张向量试卷上的，但第二问基本上用导数就可以了，而且，我不知道题目给的几个边的条件有什么用…</p><p>(1) 求 $ cos^2(x) - sin(2x) $</p><p>由 $ a // b $，有： $ tan(x) = -\frac{3}{4} $.</p><p>对 $ cos^2(x) - sin(2x) $ 做一些变形：</p><script type="math/tex; mode=display">\begin{aligned}cos^2(x) - sin(2x)&= cos^2(x)(1 - \frac{sin(2x)}{cos^2(x)}) \\&= cos^2(x)(1 - \frac{2sin(x)cos(x)}{cos^2(x)}) \\&= cos^2(x)(1 - 2tan(x))\end{aligned}</script><p>然后考虑 $  tan(x) = -\frac{3}{4} = \frac{sin(x)}{cos(x)} $</p><p>有以下情况：</p><ol><li><p>$ \sqrt{(-3)^2 + 4^2} = 5 $ 或 $ \sqrt{3^2 + (-4)^2} = 5 $</p></li><li><p>$ sin(x) $ 为负或者 $ cos(x) $ 为负</p></li></ol><p>既有 $ cos(x) = -\frac{4}{5} $ 或者 $ cos(x) = \frac{4}{5} $</p><p>这并不影响到 $ cos^2(x) $ 的值，所以有：</p><script type="math/tex; mode=display">\begin{aligned}cos^2(x) - sin(2x)&= cos^2(x)(1 - 2tan(x)) \\&= \frac{16}{25} \cdot [1 - 2 \cdot (-\frac{3}{4})] \\&= \frac{8}{5}\end{aligned}</script><p>(2) 求 $ f(x) + 4cos(2A + \frac{\pi}{6}) (x \in [0, \frac{\pi}{3}]) 的取值范围 $</p><p>令 $ \varphi (x) = f(x) + 4cos(2A + \frac{\pi}{6}) (x \in [0, \frac{\pi}{3}]) $</p><p>由题目条件知： $ f(x) = 2cos^2(x) + sin(2x) + \frac{1}{2} $</p><script type="math/tex; mode=display">\begin{aligned}f'(x)&= -4cos(x)sin(x) + 2cos(2x) \\&= 2(cos(2x) - sin(2x)) \\&= 2\sqrt{2}sin(\frac{\pi}{4} - 2x)\end{aligned}</script><p>令 $ f’(x) = 0 $, 则可得到 $ x = \frac{\pi}{8} + 2k\pi (k = 0,1,2…) $</p><p>$ \because x \in [0, \frac{\pi}{3}], \therefore x = \frac{\pi}{8} $</p><p>又</p><p>① $ f’(0) &gt; 0; $<br>② $ f’(\frac{\pi}{3}) &lt; 0. $</p><p>考虑到 $ f’(x) $ 是一个最小周期为 $ \pi $ 的函数，所以 $ f’(x) $ 在 $ x \in [0, \frac{\pi}{3}] $ 内要么单调递增，要么单调递减，所以有如下分析：</p><p>① $ f’(x) $ 在 $ x \in [0, \frac{\pi}{3}) $ 恒大于 0，则原函数 $ f(x) $ 在 $ x \in [0, \frac{\pi}{3}) $ 内单调递增;<br>② $ f’(x) $ 在 $ x \in (\frac{\pi}{8}, \frac{\pi}{3}] $ 恒小于 0，则原函数 $ f(x) $ 在 $ x \in (\frac{\pi}{8}, \frac{\pi}{3}] $ 内单调递减.</p><p>所以 $ x = \frac{\pi}{8} $ 为 $ f(x) $ 在 $ x \in [0, \frac{\pi}{3}) $ 内的唯一一个最大值.</p><p>又 $ f(0) &gt; f(\frac{\pi}{3}) $ ，所以，$ f(\frac{\pi}{3}) $ 是 $ f(x) $ 在 $ x \in [0, \frac{\pi}{3}) $ 内的唯一一个最小值.</p><p>可以借助工具来画出函数图看一看是否正确：</p><p><img src="/img/2cos^2x+sin2x+1_2.png" alt="图1"></p><p>$ f(\frac{\pi}{8}) = \frac{3}{2} + \sqrt{2}, f(\frac{\pi}{3}) = 1 + \frac{\sqrt{3}}{2} $</p><p>于是</p><script type="math/tex; mode=display">\begin{aligned}max \ \varphi(x) &= f(\frac{\pi}{8}) + 4 = \frac{11}{2} + \sqrt{2} \\min \ \varphi(x) &= f(\frac{\pi}{3}) - 4 = \frac{\sqrt{3}}{2} - 3\end{aligned}</script><p>2.</p>]]></content>
      
      <categories>
          
          <category> mathematical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高等数学-积分方程篇（持续更新）</title>
      <link href="/2018/09/03/integral-equation/"/>
      <url>/2018/09/03/integral-equation/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这里存放一些积分方程题的题解。</p><h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><p>1.求 $ \int_{0}^{\frac{\pi}{4}} x \ \prod cos(\frac{x}{2^k}) dx $ (from MIT 2015 Integration Bee) (这个题是在youtube上看到的，解法也是看了大神的，然后就记住了)</p><p>题解：</p><p>注意到 $ \prod cos(\frac{x}{2^k}) = cos(\frac{x}{2}) \cdot cos(\frac{x}{2^2}) \cdot \cdot \cdot $</p><p>利用 $ sin(2x) = 2sin(x)cos(x) \Rightarrow cos(x) = \frac{sin(2x)}{2sin(x)} $</p><p>将上面第一个等式最右边按照上式规则写出来，有：</p><p>$ cos(\frac{x}{2}) \cdot cos(\frac{x}{2^2}) \cdot cos(\frac{x}{2^2}) \cdots = \frac{sin(x)}{2sin(\frac{x}{2})} \cdot \frac{sin(\frac{x}{2})}{2sin(\frac{x}{2^2})} \cdot \frac{sin(\frac{x}{2^2})}{2sin(\frac{x}{2^3})} \cdots  $</p><p>观察等式右边发现，除第一项分子以外，后一项的分子总是能和前一项的分母约掉，于是我们可以得到这样的形式：</p><p>$ \frac{sin(x)}{2^k sin(\frac{x}{2^k})}, k \rightarrow \infty $</p><p>于是，我们来愉快的求极限：</p><script type="math/tex; mode=display">\begin{aligned} \lim_{k \rightarrow \infty} \frac{sin(x)}{2^k sin(\frac{x}{2^k})} &= sin(x) \lim_{k \rightarrow \infty} \frac{1}{2^k sin(\frac{x}{2^k})} \\&= sin(x) \lim_{k \rightarrow \infty} \frac{1}{x\frac{sin(\frac{x}{2^k})}{\frac{x}{2^k}}} \\&= sin(x) \lim_{k \rightarrow \infty} \frac{1}{x \cdot 1} \\&= \frac{sin(x)}{x}\end{aligned}</script><p>所以，积分方程中的那一坨 $ \prod cos(\frac{x}{2^k}) = \frac{sin(x)}{x} $</p><p>带入积分方程并计算：</p><script type="math/tex; mode=display">\begin{aligned}\int_{0}^{\frac{\pi}{4}} x \ \prod cos(\frac{x}{2^k}) dx&= \int_{0}^{\frac{\pi}{4}} x \ \frac{sin(x)}{x} dx \\&= \int_{0}^{\frac{\pi}{4}} sin(x) dx \\&= -cos(x)|_{0}^{\frac{\pi}{4}} \\&= -cos(\frac{\pi}{4}) - (-cos(0)) \\&= 1 - \frac{\sqrt{2}}{2}\end{aligned}</script><p>2.求　$　\int_{0}^{\infty} x \ e^{1-x} + \left \lfloor x \right \rfloor e^{1-\left \lfloor x \right \rfloor} dx　$ 的值(这个题也前面说的哪个大神做的)</p><p>题解：</p><script type="math/tex; mode=display">\int_{0}^{\infty} x \ e^{1-x} + \left \lfloor x \right \rfloor e^{1-\left \lfloor x \right \rfloor} dx = \int_{0}^{\infty} x \ e^{1-x} dx + \int_{0}^{\infty} \left \lfloor x \right \rfloor e^{1-\left \lfloor x \right \rfloor} dx</script><p>等式右边第一项积分很好算：</p><script type="math/tex; mode=display">\begin{aligned}\int_{0}^{\infty} x \ e^{1-x} dx&= e\int_{0}^{\infty} x \ e^{-x} \\&= e(-x \ e^{-x}|_{0}^{\infty} - e^{-x}|_{0}^{\infty}) \\&= e[-e^{-x}(1+x)|_{0}^{\infty}] \\&= e\end{aligned}</script><p>现在来计算一下等式右边第二项积分：</p><p>令 $ S = \int_{0}^{\infty} \left \lfloor x \right \rfloor e^{1-\left \lfloor x \right \rfloor} dx $</p><p>我们来看一下 $ f(x) = \left \lfloor x \right \rfloor e^{1-\left \lfloor x \right \rfloor} $ 的函数图：</p><p><img src="/img/floorxe^1-floorx.png" alt="图1"></p><p>然后写几项看看，我们会发现可以用简单的级数形式来表示：</p><script type="math/tex; mode=display">\begin{aligned} S &= 0 \cdot 1 + 1 \cdot 1 + 2 \cdot \frac{1}{e} + 3 \cdot \frac{1}{e^2} + \cdots \\   &= 1 + \frac{2}{e} + \frac{3}{e^2} + \cdots \\   &= \sum_{x=0}^{\infty} \frac{x}{e^{x-1}}\end{aligned}</script><p>现在来求这个级数的和：</p><script type="math/tex; mode=display">\begin{aligned}S &= 1 + \frac{2}{e} + \frac{3}{e^2} + \cdots \quad (1) \\\frac{1}{e} \cdot S &= \frac{1}{e} + \frac{2}{e^2} + \frac{3}{e^3} + \cdots \quad (2)\end{aligned}</script><p>利用 (1)式 - (2)式 有：</p><script type="math/tex; mode=display">\begin{aligned}S - \frac{1}{e} \cdot S &= 1 + \frac{1}{e} + \frac{1}{e^2} + \frac{1}{e^3} + \cdots \\&= \sum_{n=0}^{\infty} (\frac{1}{e})^n \\(1-\frac{1}{e})S &= \frac{1}{1-\frac{1}{e}} \\\Rightarrow S &= \frac{1}{(1-\frac{1}{e})^2}\end{aligned}</script><p>回到原题 $ \int_{0}^{\infty} x \ e^{1-x} + \left \lfloor x \right \rfloor e^{1-\left \lfloor x \right \rfloor} dx = e + \frac{1}{(1-\frac{1}{e})^2} $</p><p>3.</p>]]></content>
      
      <categories>
          
          <category> mathematical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高中数学-向量篇（持续更新）</title>
      <link href="/2018/09/02/math-vector/"/>
      <url>/2018/09/02/math-vector/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这里是关于向量运算的题目题解，题目质量大概参差不齐。</p><p>向量在现代数学和物理中有着很重要的作用，指的是一种具有大小和方向的量。又叫做矢量(vector)。</p><p><a href="https://en.wikipedia.org/wiki/Vector_(mathematics_and_physics" target="_blank" rel="noopener">Vector - wikipedia</a></p><h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><p>1.已知向量 $ \vec{OA}, \vec{OB} $ 满足 $ |OA| = |OB| = 1, \vec{OA} \cdot \vec{OB} = 0, \vec{OC} = \lambda \ \vec{OA} + \mu \ \vec{OB} (\lambda ,\mu \in \mathbb{R}) $. 若 $ M $ 为 $ AB $ 的中点，并且 $ |\vec{MC}| = 1 $, 则点 $ (\lambda , \mu) $ 在 ( B )</p><p>A.以 $ (-\frac{1}{2}, \frac{1}{2}) $ 为圆心，半径为1的圆上.<br>B.以 $ (\frac{1}{2}, -\frac{1}{2}) $ 为圆心，半径为1的圆上.<br>C.以 $ (-\frac{1}{2}, -\frac{1}{2}) $ 为圆心，半径为1的圆上.<br>D.以 $ (\frac{1}{2}, \frac{1}{2}) $ 为圆心，半径为1的圆上.</p><p>题解：</p><p>假设 $ A $ 点的坐标为 $ (x_0, y_0) $, $ B $ 点的坐标为 $ (x_1, y_1) $.</p><p>由题目前2个条件知：</p><p>$ x_0 ^2 + y_0 ^2 = 1, x_1 ^2 + y_1 ^2 = 1, x_0 \ x_1 + y_0 \ y_1 = 0 $</p><p>将 $ A,B $ 点坐标带入第3个条件：$ \vec{OC} = \lambda \ \vec{OA} + \mu \ \vec{OB} (\lambda ,\mu \in \mathbb{R}) $</p><p>于是求出 $ C $ 的坐标：$ (\lambda \ x_0 + \mu \ x_1, \lambda \ y_0 + \mu \ y_1) $</p><p>$ M $ 是 $ AB $ 的中点，所以得到 $ M $ 的坐标为：$ (\frac{x_1 - x_0}{2}, \frac{y_1 - y_0}{2}) $</p><p>又因为 $ |\vec{MC}| = 1 $, 把上面 $ M, C $ 的坐标代入进行计算并化简，最终可得：</p><p>$ (\lambda + \frac{1}{2})^2 + (\mu - \frac{1}{2})^2 = 1 $</p><p>所以，选 B.</p><p>2.</p>]]></content>
      
      <categories>
          
          <category> mathematical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kruskal&#39;s algorithm</title>
      <link href="/2018/08/29/kruskal-s-algorithm/"/>
      <url>/2018/08/29/kruskal-s-algorithm/</url>
      <content type="html"><![CDATA[<h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><p>Kruskal算法可用来求解最小生成树(minimum-spanning-tree, MST)问题，还可以用来生成迷宫。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>其实算法不难理解，算法先要将 $ G(V, E) $ 的集合 $ E $ 按权重 $ \Omega $ 由小到大排序，然后还利用了不相交集中的<code>find()</code>(这里使用的是带路径压缩功能的) 和<code>union()</code>(这里函数名使用<code>marge()</code>) 函数，<code>find()</code>用于判断是否连通，如果连通则不能构成MST，反之则加入到MST的集合中，并调用<code>union()</code>函数将顶点连通。</p><h5 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h5><p>$ O(E lg V) $</p><h5 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h5><p>$ O(V + E) $</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; graph;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> V, <span class="keyword">int</span> E)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= V; i++)</span><br><span class="line">p[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> w, s, e;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; s &gt;&gt; e;</span><br><span class="line">graph.push_back(pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span> ,<span class="keyword">int</span>&gt;&gt;(w, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(s, e)));</span><br><span class="line">&#125;</span><br><span class="line">sort(graph.begin(), graph.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : graph)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.first &lt;&lt; e.second.first &lt;&lt; e.second.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x != p[x])p[x] = find(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">marge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = find(x), t = find(y);</span><br><span class="line"><span class="keyword">if</span> (r != t)p[r] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; kruskal(<span class="keyword">int</span> V, <span class="keyword">int</span> E)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; msts;</span><br><span class="line">init(V, E);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt;::iterator i = graph.begin(); i != graph.end(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (find(i-&gt;second.first) != find(i-&gt;second.second))</span><br><span class="line">&#123;</span><br><span class="line">msts.push_back(i-&gt;second);</span><br><span class="line">marge(i-&gt;second.first, i-&gt;second.second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msts;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> V, E;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; V &gt;&gt; E;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; es = kruskal(V, E);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : es)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e.first &lt;&lt; <span class="string">"  "</span> &lt;&lt; e.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1.<a href="https://en.wikipedia.org/wiki/Kruskal%27s_algorithm" target="_blank" rel="noopener">Kruskal’s algorithm - wikipedia</a><br>2.<a href="https://en.wikipedia.org/wiki/Maze_generation_algorithm" target="_blank" rel="noopener">Maze generation algorithm - wikipedia</a><br>3.CLRS $ P_{366} $ 伪代码</p>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tarjan&#39;s algorithm</title>
      <link href="/2018/08/27/tarjan-s-algorithm/"/>
      <url>/2018/08/27/tarjan-s-algorithm/</url>
      <content type="html"><![CDATA[<h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><p>Tarjan算法可以用来求有向图的强连通分量个数。算法由Robert Tarjan于1972年发明的。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>Tarjan算法的主要算法部分也是dfs（深度优先搜索），但利用了重要的额外信息。下面详细分析一下算法执行过程。</p><p>再强调一下强连通子图的重要特点：<strong>对于强连通子图，有一个特定的事实就是，该子图一定形成环，那么从该子图中任意点出发，总能回到出发点。</strong></p><p>基于上面这一点，Tarjan算法通过维护两个存放顶点访问顺序（时间）的数组。如果子图形成环，则将处于环中的每一个顶点的访问顺序置为该环的出发点的访问时间，以表明他们是一个强连通子图。可能你会怀疑进入环后，不会只在环中遍历，可能会跳到其他顶点上。实际上这担心是多余，因为图结构使用邻接链表表示，强连通子图使用dfs进行遍历时，只会寻找与当前顶点连接的出度顶点，而形成环的子图中，会很合理的按顺序遍历完。对于孤立点，则自身就是一个环，即强连通分量。</p><p>这就是Tarjan算法的思想，主要的就是 <strong>维护两个存储访问顺序的数组，然后，将形成环的节点的访问时间都置为该强连通子图的出发点的访问时间。</strong></p><p>通过下图可以更直观的理解Tarjan算法的执行过程（图来自维基）：</p><p><img src="/img/tarjan&#39;s_algorithm.gif" alt="图1"></p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>最坏情况是图G的强连通子图就是其本身（这样的图称为强连通图），这时dfs的消费为 $ O(|V| + |E|) $，最后一次dfs的while循环再消费掉 $ O(V) $，所以dfs()最坏情况为 $ O(|V| + |E|) $。最后tarjan()的总消耗为 $ O (V^2) $。</p><h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>显然为 $ O(V) $。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;minmax.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; *adj;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> vis[N], low[N];</span><br><span class="line"><span class="keyword">bool</span> onstack[N];</span><br><span class="line"><span class="keyword">int</span> times = <span class="number">0</span>, scc = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u] = low[u] = times++;</span><br><span class="line">s.push(u);</span><br><span class="line">onstack[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator i = adj[u].begin(); i != adj[u].end(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = *i;</span><br><span class="line"><span class="keyword">if</span> (vis[v] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">dfs(v);</span><br><span class="line">low[u] = min(low[u], low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (onstack[v] == <span class="literal">true</span>)</span><br><span class="line">low[u] = min(low[u], vis[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (low[u] == vis[u])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (s.top() != u)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> w = s.top();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">onstack[w] = <span class="literal">false</span>;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> w = s.top();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">onstack[w] = <span class="literal">false</span>;</span><br><span class="line">s.pop();</span><br><span class="line">scc++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> V, <span class="keyword">int</span> E)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">adj = <span class="keyword">new</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;[V + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= V; i++)</span><br><span class="line">&#123;</span><br><span class="line">vis[i] = low[i] = <span class="number">-1</span>;</span><br><span class="line">onstack[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= E; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; w;</span><br><span class="line">adj[u].push_back(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= V; i++)</span><br><span class="line"><span class="keyword">if</span> (vis[i] == <span class="number">-1</span>)</span><br><span class="line">dfs(i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"该图的强连通分量个数为："</span> &lt;&lt; scc &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> V, E;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; V &gt;&gt; E;</span><br><span class="line">tarjan(V, E);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中dfs()函数的for循环后面的部分用来输出所有强连通子图中的顶点，并求出scc（Strongly Connected Components）个数。</p><p>下面以前面wiki图为例测试一下算法。</p><p>算法测试结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3 2 1</span><br><span class="line">7 6</span><br><span class="line">5 4</span><br><span class="line">8</span><br><span class="line">该图的强连通分量个数为：4</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1.<a href="https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm" target="_blank" rel="noopener">Strongly connected components algorithm - wikipedia</a><br>2.<a href="https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/" target="_blank" rel="noopener">Strongly connected components algorithm</a></p>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>贪吃蛇</title>
      <link href="/2018/08/24/esurient-snake/"/>
      <url>/2018/08/24/esurient-snake/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>贪吃蛇是我小时候很喜欢玩的一个小游戏，最近比较闲，忽然想起曾经在网上看过一段很不错的贪吃蛇的源码，当时很想能自己写一个，随着时间推移，却越来越不想做这类小游戏了。不过，前几天提起了一点兴趣，做了一下，发现还是很有趣，也很有意义的。</p><h3 id="关于游戏历史"><a href="#关于游戏历史" class="headerlink" title="关于游戏历史"></a>关于游戏历史</h3><p><a href="https://en.wikipedia.org/wiki/Snake_(video_game_genre" target="_blank" rel="noopener">Snake - wikipedia</a></p><h3 id="设计花絮"><a href="#设计花絮" class="headerlink" title="设计花絮"></a>设计花絮</h3><p>我一开始做的时候，没有注意到一个重要的事实，那就是对于蛇头方向的选择，后来发现，确定一个节点为蛇头，然后只控制蛇头会使得事情简单很多。<br>下面具体说一说，一开始使用的数据结构是头插法创建的单链表，但对于蛇头在哪边以及该怎么移动，却没考虑清楚（想到这里就扶额 = =），比如，一开始的蛇是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">o --- 蛇头</span><br><span class="line">o</span><br><span class="line">o</span><br><span class="line">o</span><br><span class="line">o --- 蛇尾</span><br></pre></td></tr></table></figure><p>但我设定的最开始的移动却是向下移动的。。。准确的说我对蛇头的选择是随时在改变的，我考虑如果往上就用头节点，如果往下就用尾节点，但其实根本没必要，而且这样会更麻烦，甚至在蛇会变长的情况下效率是有问题的（后来才发现自己多蠢）。</p><p>如果是在指定蛇头的方向移动，实际上最有效率的做法是申请一个新节点，并把位置设置在节点头节点的前面，然后节点接在头节点前，并将尾节点的位置设置为尾节点前一个，最后移除尾节点即可。数据结构使用双向链表的话，时间复杂度 $ O(1) $。</p><p>总之呢，不管数据结构是单链表还是双向链表还是队列，指定蛇头在哪个方向，就往哪个方向移动就好了，不管是指定头节点为蛇头还是尾节点为蛇头，总之指定其中一个为蛇头即可。</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><blockquote><p>note: <strong> 仅支持windows下的Visual Studio自带的编译器和g++编译器 </strong></p></blockquote><h4 id="代码更新日志（历史按最新代码时间排序）"><a href="#代码更新日志（历史按最新代码时间排序）" class="headerlink" title="代码更新日志（历史按最新代码时间排序）"></a>代码更新日志（历史按最新代码时间排序）</h4><h5 id="2018-08-29-am-7点左右"><a href="#2018-08-29-am-7点左右" class="headerlink" title="2018-08-29 am.7点左右"></a>2018-08-29 am.7点左右</h5><p>使用 STL deque 代替双向链表重新实现了一下。并把 x、y 的值范围分别改为 1~70、1~30。也把判断穿墙的 <code>==</code> 改为了 <code>&lt;=</code> 或者 <code>&gt;=</code> ，这样可以修复掉当 x 为奇数时出现的 bug。</p><p>由于实际效果与之前的差不多就不再贴游戏截图了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; U, D, L, R &#125; Status;</span><br><span class="line">Status status = U;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetPosition</span><span class="params">(<span class="keyword">short</span> x, <span class="keyword">short</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE winHandle;</span><br><span class="line">COORD pos = &#123; x, y &#125;;</span><br><span class="line">winHandle = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">SetConsoleCursorPosition(winHandle, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsCollised</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; h, <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> h.front().first == f.first &amp;&amp; h.front().second == f.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsCollisSelf</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; self = h;</span><br><span class="line">self.pop_front();</span><br><span class="line"><span class="keyword">while</span> (!self.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (IsCollised(h, self.front()))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">self.pop_front();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenerateFood</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; h, <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp; f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">int</span> x = rand() % <span class="number">68</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> y = rand() % <span class="number">28</span> + <span class="number">1</span>;</span><br><span class="line">f.first = x &amp; <span class="number">1</span> ? x + <span class="number">1</span> : x;</span><br><span class="line">f.second = y;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;::iterator self = h.begin(); self != h.end(); ++self)</span><br><span class="line"><span class="keyword">if</span> (self-&gt;first == f.first &amp;&amp; self-&gt;second == f.second)</span><br><span class="line">GenerateFood(h, f);</span><br><span class="line">SetPosition(f.first, f.second);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"■"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;h, <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">SetPosition(<span class="number">24</span>, <span class="number">8</span> + i);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"■"</span>;</span><br><span class="line">h.push_back(<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">24</span>, <span class="number">8</span> + i));</span><br><span class="line">&#125;</span><br><span class="line">GenerateFood(h, f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveUp</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp;h, <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">h.push_front(<span class="built_in">std</span>::pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(h.front().first, h.front().second - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (h.front().second &lt;= <span class="number">0</span>) h.front().second = <span class="number">30</span>;</span><br><span class="line">SetPosition(h.front().first, h.front().second);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"■"</span>;</span><br><span class="line"><span class="keyword">if</span> (!IsCollised(h, f))</span><br><span class="line">&#123;</span><br><span class="line">SetPosition(h.back().first, h.back().second);</span><br><span class="line">h.pop_back();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> GenerateFood(h, f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveDown</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp;h, <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">h.push_front(<span class="built_in">std</span>::pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(h.front().first, h.front().second + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (h.front().second &gt;= <span class="number">30</span>) h.front().second = <span class="number">0</span>;</span><br><span class="line">SetPosition(h.front().first, h.front().second);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"■"</span>;</span><br><span class="line"><span class="keyword">if</span> (!IsCollised(h, f))</span><br><span class="line">&#123;</span><br><span class="line">SetPosition(h.back().first, h.back().second);</span><br><span class="line">h.pop_back();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> GenerateFood(h, f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveLeft</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp;h, <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">h.push_front(<span class="built_in">std</span>::pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(h.front().first - <span class="number">2</span>, h.front().second));</span><br><span class="line"><span class="keyword">if</span> (h.front().first &lt;= <span class="number">0</span>) h.front().first = <span class="number">70</span>;</span><br><span class="line">SetPosition(h.front().first, h.front().second);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"■"</span>;</span><br><span class="line"><span class="keyword">if</span> (!IsCollised(h, f))</span><br><span class="line">&#123;</span><br><span class="line">SetPosition(h.back().first, h.back().second);</span><br><span class="line">h.pop_back();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> GenerateFood(h, f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveRight</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp;h, <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">h.push_front(<span class="built_in">std</span>::pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(h.front().first + <span class="number">2</span>, h.front().second));</span><br><span class="line"><span class="keyword">if</span> (h.front().first &gt;= <span class="number">70</span>) h.front().first = <span class="number">0</span>;</span><br><span class="line">SetPosition(h.front().first, h.front().second);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"■"</span>;</span><br><span class="line"><span class="keyword">if</span> (!IsCollised(h, f))</span><br><span class="line">&#123;</span><br><span class="line">SetPosition(h.back().first, h.back().second);</span><br><span class="line">h.pop_back();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> GenerateFood(h, f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;h, <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Sleep(<span class="number">200</span>);</span><br><span class="line"><span class="keyword">if</span> (GetAsyncKeyState(VK_UP) &amp;&amp; status != D)</span><br><span class="line">status = U;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_DOWN) &amp;&amp; status != U)</span><br><span class="line">status = D;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_LEFT) &amp;&amp; status != R)</span><br><span class="line">status = L;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_RIGHT) &amp;&amp; status != L)</span><br><span class="line">status = R;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status == U)</span><br><span class="line">MoveUp(h, f);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status == D)</span><br><span class="line">MoveDown(h, f);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status == L)</span><br><span class="line">MoveLeft(h, f);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (status == R)</span><br><span class="line">MoveRight(h, f);</span><br><span class="line"><span class="keyword">if</span> (IsCollisSelf(h))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; snake;</span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; food;</span><br><span class="line">Init(snake, food);</span><br><span class="line">Game(snake, food);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2018-08-26-pm-6点左右"><a href="#2018-08-26-pm-6点左右" class="headerlink" title="2018-08-26 pm.6点左右"></a>2018-08-26 pm.6点左右</h5><p>目前游戏效果：</p><p><img src="/img/snake_2.gif" alt="图3"></p><ul><li>2018-08-28 pm.6点左右</li></ul><p>修改了一下代码，将判断穿越四周的‘==’ 改为 ‘&gt;=’ 或 ‘&lt;=’。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; U, D, L, R &#125; Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Snake</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> body[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    Snake*pre_node, *next_node;</span><br><span class="line">    Snake() : body(<span class="string">"■"</span>), pre_node(<span class="literal">nullptr</span>), next_node(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    Snake(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1) : body(<span class="string">"■"</span>), x(x1), y(y1), pre_node(<span class="literal">nullptr</span>), next_node(<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; SnakeBody;</span><br><span class="line">SnakeBody*head = <span class="literal">nullptr</span>;</span><br><span class="line">SnakeBody*tail = <span class="literal">nullptr</span>;</span><br><span class="line">SnakeBody*food = <span class="literal">nullptr</span>;</span><br><span class="line">Status status = U;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetPosition</span><span class="params">(<span class="keyword">short</span> x, <span class="keyword">short</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE winHandle;</span><br><span class="line">    COORD pos = &#123; x, y &#125;;</span><br><span class="line">    winHandle = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    SetConsoleCursorPosition(winHandle, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsCollised</span><span class="params">(SnakeBody*h, SnakeBody*f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!f)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> h-&gt;x == f-&gt;x &amp;&amp; h-&gt;y == f-&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsCollisSelf</span><span class="params">(SnakeBody*h, SnakeBody*t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SnakeBody*self = t;</span><br><span class="line">    <span class="keyword">while</span> (self-&gt;pre_node != h)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsCollised(h, self))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        self = self-&gt;pre_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenerateFood</span><span class="params">(SnakeBody*t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> x = rand() % <span class="number">67</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> y = rand() % <span class="number">26</span> + <span class="number">1</span>;</span><br><span class="line">    food = <span class="keyword">new</span> Snake(x &amp; <span class="number">1</span> ? x + <span class="number">1</span> : x, y);</span><br><span class="line">    SnakeBody*self = t;</span><br><span class="line">    <span class="keyword">while</span> (self)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsCollised(self, food))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> food;</span><br><span class="line">            food = <span class="literal">nullptr</span>;</span><br><span class="line">            GenerateFood(t);</span><br><span class="line">        &#125;</span><br><span class="line">        self = self-&gt;pre_node;</span><br><span class="line">    &#125;</span><br><span class="line">    SetPosition(food-&gt;x, food-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, food-&gt;body);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="keyword">new</span> Snake(<span class="number">24</span>, <span class="number">8</span>);</span><br><span class="line">    SnakeBody*s_body = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SnakeBody* cur_n = <span class="keyword">new</span> Snake(head-&gt;x, head-&gt;y + i);</span><br><span class="line">        cur_n-&gt;pre_node = s_body;</span><br><span class="line">        s_body-&gt;next_node = cur_n;</span><br><span class="line">        s_body = cur_n;</span><br><span class="line">    &#125;</span><br><span class="line">    tail = s_body;</span><br><span class="line">    s_body = head;</span><br><span class="line">    <span class="keyword">while</span> (s_body)</span><br><span class="line">    &#123;</span><br><span class="line">        SetPosition(s_body-&gt;x, s_body-&gt;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, s_body-&gt;body);</span><br><span class="line">        s_body = s_body-&gt;next_node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveUp</span><span class="params">(SnakeBody*&amp;h, SnakeBody*&amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SnakeBody*n = <span class="keyword">new</span> Snake(h-&gt;x, h-&gt;y - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n-&gt;y == <span class="number">0</span>) n-&gt;y = <span class="number">28</span>;</span><br><span class="line">    SetPosition(n-&gt;x, n-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, n-&gt;body);</span><br><span class="line">    n-&gt;next_node = h;</span><br><span class="line">    h-&gt;pre_node = n;</span><br><span class="line">    h = n;</span><br><span class="line">    <span class="keyword">if</span> (!IsCollised(h, food))</span><br><span class="line">    &#123;</span><br><span class="line">        SetPosition(t-&gt;x, t-&gt;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        t = t-&gt;pre_node;</span><br><span class="line">        <span class="keyword">delete</span> t-&gt;next_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> food;</span><br><span class="line">        food = <span class="literal">nullptr</span>;</span><br><span class="line">        GenerateFood(tail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveDown</span><span class="params">(SnakeBody*&amp;h, SnakeBody*&amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SnakeBody*n = <span class="keyword">new</span> Snake(h-&gt;x, h-&gt;y + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n-&gt;y == <span class="number">28</span>) n-&gt;y = <span class="number">0</span>;</span><br><span class="line">    SetPosition(n-&gt;x, n-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, n-&gt;body);</span><br><span class="line">    n-&gt;next_node = h;</span><br><span class="line">    h-&gt;pre_node = n;</span><br><span class="line">    h = n;</span><br><span class="line">    <span class="keyword">if</span> (!IsCollised(h, food))</span><br><span class="line">    &#123;</span><br><span class="line">        SetPosition(t-&gt;x, t-&gt;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        t = t-&gt;pre_node;</span><br><span class="line">        <span class="keyword">delete</span> t-&gt;next_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> food;</span><br><span class="line">        food = <span class="literal">nullptr</span>;</span><br><span class="line">        GenerateFood(tail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveLeft</span><span class="params">(SnakeBody*&amp;h, SnakeBody*&amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SnakeBody*n = <span class="keyword">new</span> Snake(h-&gt;x - <span class="number">2</span>, h-&gt;y);</span><br><span class="line">    <span class="keyword">if</span> (n-&gt;x == <span class="number">0</span>) n-&gt;x = <span class="number">68</span>;</span><br><span class="line">    SetPosition(n-&gt;x, n-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, n-&gt;body);</span><br><span class="line">    n-&gt;next_node = h;</span><br><span class="line">    h-&gt;pre_node = n;</span><br><span class="line">    h = n;</span><br><span class="line">    <span class="keyword">if</span> (!IsCollised(h, food))</span><br><span class="line">    &#123;</span><br><span class="line">        SetPosition(t-&gt;x, t-&gt;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        t = t-&gt;pre_node;</span><br><span class="line">        <span class="keyword">delete</span> t-&gt;next_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> food;</span><br><span class="line">        food = <span class="literal">nullptr</span>;</span><br><span class="line">        GenerateFood(tail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveRight</span><span class="params">(SnakeBody*&amp;h, SnakeBody*&amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SnakeBody*n = <span class="keyword">new</span> Snake(h-&gt;x + <span class="number">2</span>, h-&gt;y);</span><br><span class="line">    <span class="keyword">if</span> (n-&gt;x == <span class="number">68</span>) n-&gt;x = <span class="number">0</span>;</span><br><span class="line">    SetPosition(n-&gt;x, n-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, n-&gt;body);</span><br><span class="line">    n-&gt;next_node = h;</span><br><span class="line">    h-&gt;pre_node = n;</span><br><span class="line">    h = n;</span><br><span class="line">    <span class="keyword">if</span> (!IsCollised(h, food))</span><br><span class="line">    &#123;</span><br><span class="line">        SetPosition(t-&gt;x, t-&gt;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        t = t-&gt;pre_node;</span><br><span class="line">        <span class="keyword">delete</span> t-&gt;next_node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> food;</span><br><span class="line">        food = <span class="literal">nullptr</span>;</span><br><span class="line">        GenerateFood(tail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GenerateFood(tail);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Sleep(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">if</span> (GetAsyncKeyState(VK_UP) &amp;&amp; status != D)</span><br><span class="line">            status = U;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_DOWN) &amp;&amp; status != U)</span><br><span class="line">            status = D;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_LEFT) &amp;&amp; status != R)</span><br><span class="line">            status = L;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_RIGHT) &amp;&amp; status != L)</span><br><span class="line">            status = R;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (status == U)</span><br><span class="line">            MoveUp(head, tail);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (status == D)</span><br><span class="line">            MoveDown(head, tail);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (status == L)</span><br><span class="line">            MoveLeft(head, tail);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (status == R)</span><br><span class="line">            MoveRight(head, tail);</span><br><span class="line">        <span class="keyword">if</span> (IsCollisSelf(head, tail))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteSnake</span><span class="params">(SnakeBody*&amp;h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h)</span><br><span class="line">    &#123;</span><br><span class="line">        DeleteSnake(h-&gt;next_node);</span><br><span class="line">        <span class="keyword">delete</span> h;</span><br><span class="line">        h = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Init();</span><br><span class="line">    Game();</span><br><span class="line">    DeleteSnake(head);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2018-08-24-pm-8点左右"><a href="#2018-08-24-pm-8点左右" class="headerlink" title="2018-08-24 pm.8点左右"></a>2018-08-24 pm.8点左右</h5><p>解决了前面提到的bug。</p><p>效果如下：</p><p><img src="/img/snake_1.gif" alt="图2"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; U, D, L, R &#125; Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Snake</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> body[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    Snake*pre_node, *next_node;</span><br><span class="line">    Snake() : body(<span class="string">"■"</span>), pre_node(<span class="literal">nullptr</span>), next_node(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    Snake(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1) : body(<span class="string">"■"</span>), x(x1), y(y1), pre_node(<span class="literal">nullptr</span>), next_node(<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; SnakeBody;</span><br><span class="line">SnakeBody*head = <span class="literal">nullptr</span>;</span><br><span class="line">SnakeBody*tail = <span class="literal">nullptr</span>;</span><br><span class="line">Status status = U;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetPosition</span><span class="params">(<span class="keyword">short</span> x, <span class="keyword">short</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE winHandle;</span><br><span class="line">    COORD pos = &#123;x, y&#125;;</span><br><span class="line">    winHandle = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    SetConsoleCursorPosition(winHandle, pos);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="keyword">new</span> Snake(<span class="number">24</span>, <span class="number">8</span>);</span><br><span class="line">    SnakeBody*s_body = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        SnakeBody* cur_n = <span class="keyword">new</span> Snake(head-&gt;x, head-&gt;y + i);</span><br><span class="line">        cur_n-&gt;pre_node = s_body;</span><br><span class="line">        s_body-&gt;next_node = cur_n;</span><br><span class="line">        s_body = cur_n;</span><br><span class="line">    &#125;</span><br><span class="line">    tail = s_body;</span><br><span class="line">    s_body = head;</span><br><span class="line">    <span class="keyword">while</span> (s_body)</span><br><span class="line">    &#123;</span><br><span class="line">        SetPosition(s_body-&gt;x, s_body-&gt;y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, s_body-&gt;body);</span><br><span class="line">        s_body = s_body-&gt;next_node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveUp</span><span class="params">(SnakeBody*&amp;h, SnakeBody*&amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SnakeBody*n = <span class="keyword">new</span> Snake(h-&gt;x, h-&gt;y - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n-&gt;y == <span class="number">0</span>) n-&gt;y = <span class="number">28</span>;</span><br><span class="line">    SetPosition(n-&gt;x, n-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, n-&gt;body);</span><br><span class="line">    n-&gt;next_node = h;</span><br><span class="line">    h-&gt;pre_node = n;</span><br><span class="line">    h = n;</span><br><span class="line">    SetPosition(t-&gt;x, t-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">    t = t-&gt;pre_node;</span><br><span class="line">    <span class="keyword">delete</span> t-&gt;next_node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveDown</span><span class="params">(SnakeBody*&amp;h, SnakeBody*&amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SnakeBody*n = <span class="keyword">new</span> Snake(h-&gt;x, h-&gt;y + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (n-&gt;y == <span class="number">28</span>) n-&gt;y = <span class="number">0</span>;</span><br><span class="line">    SetPosition(n-&gt;x, n-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, n-&gt;body);</span><br><span class="line">    n-&gt;next_node = h;</span><br><span class="line">    h-&gt;pre_node = n;</span><br><span class="line">    h = n;</span><br><span class="line">    SetPosition(t-&gt;x, t-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">    n = t;</span><br><span class="line">    t = t-&gt;pre_node;</span><br><span class="line">    <span class="keyword">delete</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveLeft</span><span class="params">(SnakeBody*&amp;h, SnakeBody*&amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SnakeBody*n = <span class="keyword">new</span> Snake(h-&gt;x - <span class="number">2</span>, h-&gt;y);</span><br><span class="line">    <span class="keyword">if</span> (n-&gt;x == <span class="number">0</span>) n-&gt;x = <span class="number">68</span>;</span><br><span class="line">    SetPosition(n-&gt;x, n-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, n-&gt;body);</span><br><span class="line">    n-&gt;next_node = h;</span><br><span class="line">    h-&gt;pre_node = n;</span><br><span class="line">    h = n;</span><br><span class="line">    SetPosition(t-&gt;x, t-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">    n = t;</span><br><span class="line">    t = t-&gt;pre_node;</span><br><span class="line">    <span class="keyword">delete</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveRight</span><span class="params">(SnakeBody*&amp;h, SnakeBody*&amp;t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SnakeBody*n = <span class="keyword">new</span> Snake(h-&gt;x + <span class="number">2</span>, h-&gt;y);</span><br><span class="line">    <span class="keyword">if</span> (n-&gt;x == <span class="number">68</span>) n-&gt;x = <span class="number">0</span>;</span><br><span class="line">    SetPosition(n-&gt;x, n-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, n-&gt;body);</span><br><span class="line">    n-&gt;next_node = h;</span><br><span class="line">    h-&gt;pre_node = n;</span><br><span class="line">    h = n;</span><br><span class="line">    SetPosition(t-&gt;x, t-&gt;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">    n = t;</span><br><span class="line">    t = t-&gt;pre_node;</span><br><span class="line">    <span class="keyword">delete</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Game</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Sleep(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">if</span> (GetAsyncKeyState(VK_UP) &amp;&amp; status != D)</span><br><span class="line">            status = U;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_DOWN) &amp;&amp; status != U)</span><br><span class="line">            status = D;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_LEFT) &amp;&amp; status != R)</span><br><span class="line">            status = L;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (GetAsyncKeyState(VK_RIGHT) &amp;&amp; status != L)</span><br><span class="line">            status = R;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (status == U)</span><br><span class="line">            MoveUp(head, tail);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (status == D)</span><br><span class="line">            MoveDown(head, tail);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (status == L)</span><br><span class="line">            MoveLeft(head, tail);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (status == R)</span><br><span class="line">            MoveRight(head, tail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteSnake</span><span class="params">(SnakeBody*h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h)</span><br><span class="line">    &#123;</span><br><span class="line">        DeleteSnake(h-&gt;next_node);</span><br><span class="line">        <span class="keyword">delete</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Init();</span><br><span class="line">    Game();</span><br><span class="line">    DeleteSnake(head);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2018-08-24-pm-7点半左右"><a href="#2018-08-24-pm-7点半左右" class="headerlink" title="2018-08-24 pm.7点半左右"></a>2018-08-24 pm.7点半左右</h5><p><del>目前代码有个迷のbug。。。</del></p><p>如下图所示：</p><p><img src="/img/snake.gif" alt="图1"></p>]]></content>
      
      
        <tags>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>拓扑排序</title>
      <link href="/2018/08/24/topological-sort/"/>
      <url>/2018/08/24/topological-sort/</url>
      <content type="html"><![CDATA[<h3 id="拓扑排序简介"><a href="#拓扑排序简介" class="headerlink" title="拓扑排序简介"></a>拓扑排序简介</h3><p>生活中许多实际应用都需要使用有向无环图来指明事件的优先次序。比如我们早上起床穿衣洗漱的次序等。<br>借用《CLRS》中举的例子，我制作了一张相同的图来描述这个概念：</p><p><img src="/img/topologic.png" alt="图1"></p><p>上图描述了，一个教授每天早上起床穿衣所发生的事件的次序图。教授必须先穿上某些衣物，才能再穿其他衣服（比如先穿上袜子才能再穿鞋子）。有些服饰则无先后次序，可以按任意顺序穿上。</p><p>如果我们按照教授每件衣物穿好时的时间排序，然后得到逆序，我们就可以看到教授的穿戴顺序，这样一个顺序就是拓扑排序。所以，拓扑排序的概念很简单。</p><p>但需要注意的是这样的事情必须发生在有向无环图中，假如有环，我们可以想象，教授这一些列动作是不可能完成的。。。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>如上面所说，我们的目的就是记录每个物件穿戴完成的时间，也就是在一个有向无环图中记录遍历过的每一个顶点v的离开时间，这只需要额外的一个 $ O(V) $ 空间消耗。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f</span></span><br><span class="line"><span class="keyword">int</span> visied[INF], graph[INF][INF];</span><br><span class="line"><span class="keyword">int</span> d[INF], f[INF]; <span class="comment">// 访问前的时间，访问后的时间，记录整个任务过程的时间线</span></span><br><span class="line"><span class="keyword">int</span> V, t = <span class="number">0</span>; <span class="comment">// t表示时间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t += <span class="number">1</span>;</span><br><span class="line">    d[v] = t;</span><br><span class="line">    visied[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= V; i++)</span><br><span class="line">        <span class="keyword">if</span> (!visied[i] &amp;&amp; graph[v][i])</span><br><span class="line">            dfs(i);</span><br><span class="line">    t += <span class="number">1</span>;</span><br><span class="line">    f[v] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topological_sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// sort to array f</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> E, s, e;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;V, &amp;E);</span><br><span class="line">    <span class="built_in">memset</span>(visied, <span class="number">0</span>, <span class="keyword">sizeof</span>(visied));</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;s, &amp;e);</span><br><span class="line">        graph[s][e] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= V; i++)</span><br><span class="line">        <span class="keyword">if</span> (!visied[i])</span><br><span class="line">            dfs(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= V; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d: %d\n"</span>, i, f[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例如图：</p><p><img src="/img/topologic_1.png" alt="graph2"></p><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1: 10</span><br><span class="line">2: 12</span><br><span class="line">3: 9</span><br><span class="line">4: 4</span><br><span class="line">5: 8</span><br><span class="line">6: 16</span><br><span class="line">7: 15</span><br><span class="line">8: 7</span><br></pre></td></tr></table></figure><p>按时间逆序排序，看看顶点访问顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 7 2 1 3 8 5 4</span><br></pre></td></tr></table></figure><p>结合前面的拓扑排序概念，可以证明这个排序是合理的。</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>这是用邻接矩阵表示法实现的，所以排序时间复杂度为 $ O(V lg V) $，如果节点并不多可以使用一些空间换时间的排序手段降低排序时间。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1.CRLS</p>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>抛物线（待更新）</title>
      <link href="/2018/08/21/parabola/"/>
      <url>/2018/08/21/parabola/</url>
      <content type="html"><![CDATA[<h3 id="如何画抛物线"><a href="#如何画抛物线" class="headerlink" title="如何画抛物线"></a>如何画抛物线</h3><p>该篇中您将看到：</p><ul><li>在控制台画简单的抛物线</li><li>在窗口画布中画出复杂的抛物线</li></ul><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h5 id="抛物线公式画抛物线"><a href="#抛物线公式画抛物线" class="headerlink" title="抛物线公式画抛物线"></a>抛物线公式画抛物线</h5><p>这里用的抛物线公式：$ y = px^2 $</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parabola</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> i = <span class="number">0.</span>; i &lt; x; i += <span class="number">0.5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        y = square(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> j = <span class="number">0.</span>; j &lt; y/a; j += <span class="number">1.</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> j = <span class="number">0.</span>; j &lt; b*i; j += <span class="number">1.</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    parabola(<span class="number">6.</span>, <span class="number">2.</span>, <span class="number">10.</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用平抛运动轨迹画抛物线"><a href="#利用平抛运动轨迹画抛物线" class="headerlink" title="利用平抛运动轨迹画抛物线"></a>利用平抛运动轨迹画抛物线</h5><p>平抛运动坐标计算公式：$ x = v_0 t, y = \frac{g t^2}{2} $</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 适当调整λ系数，让曲线变密集，系数分母越大曲线趋向于直线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Horizontal_projectile_motion_track</span><span class="params">(<span class="keyword">double</span> t, <span class="keyword">double</span> g, <span class="keyword">double</span> v, <span class="keyword">double</span> lambda)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> i = <span class="number">0.</span>; i &lt; t; i += <span class="number">1.</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = v*i, y = g*square(i)/(<span class="number">2.</span>*lambda);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> j = <span class="number">0.</span>; j &lt; y; j += <span class="number">1.</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> j = <span class="number">0.</span>; j &lt; x; j += <span class="number">1.</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Horizontal_projectile_motion_track(<span class="number">15.</span>, <span class="number">9.8</span>, <span class="number">6.</span>, <span class="number">1000.</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用斜抛运动轨迹画抛物线"><a href="#利用斜抛运动轨迹画抛物线" class="headerlink" title="利用斜抛运动轨迹画抛物线"></a>利用斜抛运动轨迹画抛物线</h5><p>斜抛运动坐标计算公式： $ x = v_0 t cosθ, y = v_0 t sinθ - \frac{g t^2}{2} $</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trajectory</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">Trajectory()</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">c = <span class="string">'o'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Trajectory(<span class="keyword">double</span> x, <span class="keyword">double</span> y) : x(x), y(y)</span><br><span class="line">&#123;</span><br><span class="line">c = <span class="string">'o'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = x, y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pos</span><span class="params">(<span class="keyword">short</span> x, <span class="keyword">short</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HANDLE winHandle;</span><br><span class="line">COORD pos = &#123; x, y &#125;;</span><br><span class="line">winHandle = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">SetConsoleCursorPosition(winHandle, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">movement</span><span class="params">(Trajectory &amp;s, <span class="keyword">double</span> v, <span class="keyword">double</span> theta, <span class="keyword">double</span> g, <span class="keyword">double</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> v_y = v * <span class="built_in">sin</span>(theta);</span><br><span class="line"><span class="keyword">double</span> v_x = v * <span class="built_in">cos</span>(theta);</span><br><span class="line"><span class="keyword">double</span> maxhigh = v_y * v_y / g - (v_y * v_y) / (<span class="number">2</span> * g);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> i = <span class="number">0</span>; i &lt;= t; i += <span class="number">0.1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pos(s.x, maxhigh - s.y);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.c;</span><br><span class="line">s.y = v_y * i - g * i*i / <span class="number">2</span>;</span><br><span class="line">s.x = v_x * i;</span><br><span class="line"><span class="comment">// cout &lt;&lt; s.x &lt;&lt; "," &lt;&lt; s.y &lt;&lt; endl;</span></span><br><span class="line">Sleep(t * <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Trajectory s;</span><br><span class="line"></span><br><span class="line">movement(s, <span class="number">18.</span>, <span class="number">3.14</span> / <span class="number">6.</span>, <span class="number">2.8</span>, <span class="number">8.</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>t = 0.1</p></blockquote><p><img src="/img/parabola2.png" alt="图2"></p><blockquote><p>t = 0.5</p></blockquote><p><img src="/img/parabola3.png" alt="图3"></p><h5 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h5><p>贝塞尔曲线二次方程： $ B(t) = (1 - t)^2 P_0 + 2 (1 - t) P_1 + t^2 P_2, \quad 0 \leq t \leq 1 $</p>]]></content>
      
      <categories>
          
          <category> mathematical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Curve </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kosaraju&#39;s algorithm</title>
      <link href="/2018/08/17/kosaraju-s-algorithm/"/>
      <url>/2018/08/17/kosaraju-s-algorithm/</url>
      <content type="html"><![CDATA[<h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><p>该算法可以用来求解一个有向图的强连通分量。</p><h3 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h3><p>什么是强连通分量？</p><p>先说说强连通图：在有向图G中，如果任意 u,v 两顶点间连通，则称 (u,v) 强连通，则图G的一个强连通图，强连通图的极大强连通子图（强连通分量）就是其本身。</p><p>根据上面的说法，如果向图G中添加x个额外节点，使得有向图G不再是强连通图，则存在强连通分量。</p><p>下面考虑下图</p><p><img src="/img/graph_0.png" alt="图1"></p><p>（不知道怎么用graphviz把节点位置弄得更好看一点，将就着看吧）</p><p>手工字符版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;--&gt; 2 --&gt; 3</span><br><span class="line">        ↖    |</span><br><span class="line">          \  ↓</span><br><span class="line">             4</span><br></pre></td></tr></table></figure><p>该图的强连通分量个数为：1，因为任意两顶点都能相互到达。</p><p>再举例：</p><p><img src="/img/graph_1.png" alt="图2"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;--&gt; 2 --&gt; 3</span><br><span class="line">             |</span><br><span class="line">             ↓</span><br><span class="line">             4</span><br></pre></td></tr></table></figure><p>该图的强连通分量个数为：3，图中(1,2)、(3)、(4)都是强连通分量。</p><p>明白了强连通分量后，再来看算法。</p><p>以<img src="/img/graph_0.png" alt="图1">为例，我们得到它的邻接矩阵：</p><p><img src="/img/graph_3.png" alt="图3"></p><p>它的逆图及邻接矩阵：</p><p><img src="/img/graph_2.png" alt="图4"></p><p><img src="/img/graph_4.png" alt="图5"></p><p>算法首先对原图进行DFS遍历，然后将所有顶点加入到栈中，然后再将栈中的顶点倒出，从倒出的顶点对逆图进行遍历，如果任意两顶点相连通，则DFS2只调用一次就可以遍历逆图中所有顶点。如果出现不相互连通的顶点，则对逆图的遍历就会在中途中止，并通过栈中倒出的顶点来遍历完所有顶点。</p><p>现在来考虑核心算法部分的最坏情况的时间复杂度。</p><p>最坏情况时，显然所有顶点都是孤立的，算法开始时调用<code>memset()</code>，耗费 $ O(V) $，接下来调用<code>DFS1()</code>，无论原图是否为强连通图，<code>DFS1()</code>都将耗费 $ O(V^2) $，然后再次调用<code>memset()</code>，耗费 $ O(V) $，最后<code>while()</code>循环在最坏情况下将对每个顶点调用一次<code>DFS2()</code>，耗费 $ O(V^2) $。所以算法的时间总消耗为 $ O(V + V^2 + V + V^2) = O(V^2) $，这是使用邻接矩阵表示图时的时间复杂度。</p><p>使用邻接链表表示图时的时间复杂度为 $ O(V + E) $ 的线性时间。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">511</span>][<span class="number">511</span>];</span><br><span class="line"><span class="keyword">int</span> nmap[<span class="number">511</span>][<span class="number">511</span>];</span><br><span class="line"><span class="keyword">int</span> visited[<span class="number">501</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">visited[v] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line"><span class="keyword">if</span> (!visited[i] &amp;&amp; <span class="built_in">map</span>[v][i])</span><br><span class="line">DFS1(i);</span><br><span class="line">S.push(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">visited[v] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line"><span class="keyword">if</span> (!visited[i] &amp;&amp; nmap[v][i])</span><br><span class="line">DFS2(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kosaraju</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line"><span class="keyword">if</span> (!visited[i]) DFS1(i);</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line"><span class="keyword">while</span> (!S.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = S.top();</span><br><span class="line">S.pop();</span><br><span class="line"><span class="comment">// printf("|%d|", v);</span></span><br><span class="line"><span class="keyword">if</span> (!visited[v])</span><br><span class="line">&#123;</span><br><span class="line">t++;</span><br><span class="line">DFS2(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> M, s, e;</span><br><span class="line">scanf_s(<span class="string">"%d %d"</span>, &amp;N, &amp;M); <span class="comment">// 顶点及边个数</span></span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line"><span class="built_in">memset</span>(nmap, <span class="number">0</span>, <span class="keyword">sizeof</span>(nmap));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">&#123;</span><br><span class="line">scanf_s(<span class="string">"%d %d"</span>, &amp;s, &amp;e);</span><br><span class="line"><span class="built_in">map</span>[s][e] = <span class="number">1</span>;</span><br><span class="line">nmap[e][s] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n%d\n"</span>, kosaraju());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1.<a href="https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm" target="_blank" rel="noopener">Kosaraju’s algorithm - wikipedia</a></p>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>牛顿法(Newton&#39;s method)</title>
      <link href="/2018/08/04/newton-s-method/"/>
      <url>/2018/08/04/newton-s-method/</url>
      <content type="html"><![CDATA[<h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><p>感觉是老生常谈的算法了（其实咱就是来水一下&gt; &lt;）。但还是稍微说一下这个算法：对于形如 $ y = f(x) = 0 $ 这样的方程，初中的时候大部分的方程我们都可以使用求根公式解决，但实际上有许多方程我们很难求出它的根，于是只能用数值分析方法来逼近根值。基本原理:设 $ y=f(x) $ 在 $ x \in [a,b] $  上连续，如果有 $ f(a)*f(b) &lt; 0 $ ，则 $ f(x), x \in (a, b) $ 一定过零点（记不得叫啥定理了，好像叫费马引理。至于为什么，画个图就很容易明白了。），那么 $ f(x) $ 在点 $ x_0, (a &lt; x_0 &lt; b)$ 处的切线方程也过零点，根据 $ f(x) $ 曲线的类型：递增、递减、凸或凹，我们会发现起点的选择对于切线随着点向根方向移动时的效率也是不同的。</p><p>比如：若 $ x \in [a, b], f(a) &lt; 0, f(b) &gt; 0, f’’(x) &lt; 0 $ 时，起点应从a点开始迭代效率会更高，即考察 $ f(a) $ 与 $ f’’(x) $ 是否同号，如果同号，则a点为起点，否则b点为起点。</p><p>总之，根据 $ y = f(x) $ 在 $ x_0 $ 处求出切线方程有：</p><script type="math/tex; mode=display">f(x) - f(x_0) = f'(x_0)(x - x_0)</script><p>由于 $ f(x) = 0 $，所以有：</p><script type="math/tex; mode=display">x_1 = x_0 - \frac{f(x_0)}{f'(x_0)}</script><p>再在点 $ (x_1, f(x_1)) $ 作切线，可得根得近似值 $ x_2 $.如此反复进行，一般的，在点(x_{n-1}, f(x_{n-1}))作切线，最终可得到迭代方程：</p><script type="math/tex; mode=display">x_{n+1} = x_n - \frac{f(x_n)}{f'(x_n)}</script><p>算法原理参考：高等数学。</p><p>想要再详细了解的同学可以看看：<a href="https://en.wikipedia.org/wiki/Newton%27s_method" target="_blank" rel="noopener">Newton’s method</a></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>这里我使用函数指针方式来保证接口使用的便利性，虽然可变长参数还没做处理，这一点有空再完善吧。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">double</span><span class="params">(*equaton)</span><span class="params">(<span class="keyword">double</span> x, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func1</span><span class="params">(<span class="keyword">double</span> x, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> square(x)*x + square(x) - <span class="number">1.</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func2</span><span class="params">(<span class="keyword">double</span> x, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span> * square(x) + <span class="number">2</span> * square(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">newton_method</span><span class="params">(equaton func, equaton der_func, <span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">bool</span> isbump, <span class="keyword">double</span> λ)</span> <span class="comment">// isbump： 凹 is true; 凸 is false</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (func(a)*func(b) &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> x, pre_x;</span><br><span class="line"><span class="keyword">if</span> (func(a) &gt; <span class="number">0</span> &amp;&amp; isbump)</span><br><span class="line">x = a;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">x = b;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">pre_x = x;</span><br><span class="line">x -= func(x) / der_func(x);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">abs</span>(func(x)) &gt; λ &amp;&amp; <span class="built_in">fabs</span>(pre_x - x) &gt; λ);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"方程的根为："</span> &lt;&lt; newton_method(func1, func2, <span class="number">0.</span>, <span class="number">1.</span>, <span class="literal">true</span>, <span class="number">1e-6</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p>$ f(x) = x^3 + x^2 - 1 $</p><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方程的根为：0.754878</span><br></pre></td></tr></table></figure><p>更新：增加了两个函数，一个是 $ f(x) $ 的二阶导函数，一个是判断原函数凹凸。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">double</span><span class="params">(*equaton)</span><span class="params">(<span class="keyword">double</span> x, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func1</span><span class="params">(<span class="keyword">double</span> x, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cos</span>(x) - square(x)*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func2</span><span class="params">(<span class="keyword">double</span> x, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="built_in">sin</span>(x) - <span class="number">3</span> * square(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func3</span><span class="params">(<span class="keyword">double</span> x, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="built_in">cos</span>(x) - <span class="number">6</span> * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isbump</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">double</span> i = a; i &lt;= b; i += <span class="number">1e-2</span>)</span><br><span class="line"><span class="keyword">if</span> (func3(i) &lt; <span class="number">0.</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">newton_method</span><span class="params">(equaton func, equaton der_func, <span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">bool</span> isc, <span class="keyword">double</span> λ)</span> <span class="comment">// isc： 凹 is true; 凸 is false</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (func(a)*func(b) &gt;= <span class="number">0.</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> x, pre_x;</span><br><span class="line"><span class="keyword">if</span> (func(a) &gt; <span class="number">0</span> &amp;&amp; isc)</span><br><span class="line">x = a;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">x = b;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">pre_x = x;</span><br><span class="line">x -= func(x) / der_func(x);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">abs</span>(func(x)) &gt; λ &amp;&amp; <span class="built_in">fabs</span>(pre_x - x) &gt; λ);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"方程的根为："</span> &lt;&lt; newton_method(func1, func2, <span class="number">0.</span>, <span class="number">1.</span>, isbump(<span class="number">0.</span>, <span class="number">1.</span>), <span class="number">1e-6</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p>$ f(x) = cos(x) - x^3 $</p><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方程的根为：0.865474</span><br></pre></td></tr></table></figure><p><img src="img/cosx-x^3.png" alt="图1"></p><p>关于牛顿法开方（或任意次方）算法，强烈推荐看看这个回答：<a href="https://www.guokr.com/question/461510/" target="_blank" rel="noopener">https://www.guokr.com/question/461510/</a></p><p>简单提一下需要注意得地方：求 $ \sqrt{2} $ 时，考虑有 $ x^2 - a = 0 $，即 $ x = \pm \sqrt{a} $，于是 $ x $ 就是迭代公式中的 $ x_i $，$ a = 2 $ 就是我们要求的。回答中给出了求任意次方时的公式，直接套用即可。</p><p>开方代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> x, pre_x;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">pre_x = <span class="number">9999</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fabs</span>(pre_x - x) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre_x = x;</span><br><span class="line">x = (x + (<span class="number">2</span> / x)) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>牛顿法求 $ x^n $ 算法实现（代码有误）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">newton_method_power</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0.</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">1.</span> || b == <span class="number">0.</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">1.</span>)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">fabs</span>(b) &gt; <span class="number">1.</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.</span>; <span class="comment">// 当指数|b| &gt; 1 且为整数时,使用快速幂算法；为浮点数时，可以使用微分近似法或泰勒公式求解</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">b = <span class="number">1.</span>/b;</span><br><span class="line"><span class="keyword">double</span> x, pre_x;</span><br><span class="line">x = <span class="number">1.</span>;</span><br><span class="line">pre_x = <span class="number">9999.</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">fabs</span>(pre_x - x) &gt; <span class="number">0.</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre_x = x;</span><br><span class="line">x = ((b - <span class="number">1.</span>)*x / b) + (a / (b*newton_method_power(x, b - <span class="number">1.</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; newton_method_power(<span class="number">8.</span>, <span class="number">1.</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>微分近似公式：</p><script type="math/tex; mode=display">f(x + \Delta x) \approx f(x) + f'(x) \cdot \Delta x</script><p>例如：</p><p>1.求 $ 2^{1.4} $</p><p>由 $ f(x) = a^x $，$ f(x + \Delta x) = a^{x + \Delta x} \approx a^{x} + a^{x} ln(a) \cdot \Delta x $<br>有 $ 2^{1 + 0.4} \approx 2 + 2ln(2) \cdot 0.4 \approx 2.554518… $<br>而原表达式 $ 2^{1.4} = 2.63902… $</p><p>2.求 $ 2^{9} $</p><p>利用公式有 $ 2^{10 - 1} = (2^{10})^{(1 - \frac{1}{10})} \approx 2^{10} + 2^{10} ln(2^{10}) \cdot 0.1 \approx 709.783… $<br>$ 2^9 = 512 $</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1.<a href="https://en.wikipedia.org/wiki/Newton%27s_method" target="_blank" rel="noopener">Newton’s method - wikipedia</a><br>2.<a href="https://www.guokr.com/question/461510/" target="_blank" rel="noopener">果壳网</a></p>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
          <category> mathematical </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>汉明距离(hamming distance)</title>
      <link href="/2018/08/04/hamming-distance/"/>
      <url>/2018/08/04/hamming-distance/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>看<code>knn</code>算法时无意间发现这个算法，但是维基上有错误的示例和<code>python</code>代码。。。因为汉明距离并不是求相同长度字符串（或相同长度的整数）之间的字符（或数位）差异个数。</p><p>正确的详见：<a href="https://en.wikipedia.org/wiki/Talk:Hamming_distance" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Talk:Hamming_distance</a></p><p>然而，我发现百度百科和一些博客都是参考的<a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank" rel="noopener">汉明距离 - 维基百科</a>，所以都错了 = =。。。</p><p>认真分析正确代码后，我认为汉明距离指的是将两个字符串或两个整数编码为一组二进制数，然后计算两二进制bit之间的差异个数。</p><p>维基上有人也发现这个问题并给了一个正确的<code>python</code>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s1 = &apos;karolin&apos;</span><br><span class="line">s2 = &apos;kerstin&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def hamming_distance(s1, s2):</span><br><span class="line">    b1, b2 = bytearray(s1, encoding=&apos;utf8&apos;), bytearray(s2, encoding=&apos;utf8&apos;)</span><br><span class="line">    diff = 0</span><br><span class="line">    for i in range(len(b1)):</span><br><span class="line">        if b1[i] != b2[i]:</span><br><span class="line">            diff += bin(b1[i] ^ b2[i]).count(&quot;1&quot;)</span><br><span class="line">    return diff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(hamming_distance(s1, s2))</span><br></pre></td></tr></table></figure><p>C/C++：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hamming_distance</span><span class="params">(ull x, ull y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> dist = <span class="number">0</span>;</span><br><span class="line">ull <span class="keyword">or</span> = x ^ y;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">or</span>)</span><br><span class="line">&#123;</span><br><span class="line">dist++; <span class="keyword">or</span> &amp;= <span class="keyword">or</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ull x, y;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y)</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"最小汉明距离为："</span> &lt;&lt; hamming_distance(x, y) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以C代码为例，比如两个整数：1, 2，他们的二进制分别为 001, 010 ，从 001 → 010 最少需要2步替换，也就是最小汉明距离为2；又比如两整数：12, 34，他们的二进制分别为 001100, 100010，001100 → 100010 的最小汉明距离为4。</p><p>运行示例：</p><p><img src="/img/1150865.png" alt="run"></p><p>注：第三个可以自己动手验证一下~</p><p>然后维基上还有一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int hamming_distance(unsigned x, unsigned y)</span><br><span class="line">&#123;</span><br><span class="line">    return __builtin_popcount(x ^ y);</span><br><span class="line">&#125;</span><br><span class="line">//if your compiler supports 64-bit integers</span><br><span class="line">int hamming_distance(unsigned long long x, unsigned long long y)</span><br><span class="line">&#123;</span><br><span class="line">    return __builtin_popcountll(x ^ y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像我的电脑上不行，没有<code>__builtin_popcountll()</code>函数。</p>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线段树（Segment tree）</title>
      <link href="/2018/08/01/segment-tree/"/>
      <url>/2018/08/01/segment-tree/</url>
      <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/darkchii/cosmos/blob/master/code/data_structures/src/tree/segment_tree/segment_Tree_rmq.adb" target="_blank" rel="noopener">github-consmos</a></p><p><a href="http://www.cnblogs.com/TenosDoIt/p/3453089.html" target="_blank" rel="noopener">博客园-TenosDoIt</a></p><h3 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h3><p>关于线段树详细释义请见：<a href="https://www.cnblogs.com/darkchii/p/9402760.html" target="_blank" rel="noopener">博客园-darkchii</a></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(i) ((i) &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(i) ((i) &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 10010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a, b) ((a) &lt; (b) ? (a) : (b))</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">int</span> l, r, val; &#125; SegTree[M];</span><br><span class="line"><span class="keyword">int</span> num[] = &#123; <span class="number">18</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">20</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        SegTree[k].val = num[l];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(l, m, LC(k));</span><br><span class="line">        build(m + <span class="number">1</span>, r, RC(k));</span><br><span class="line">        SegTree[k].val = min(SegTree[LC(k)].val, SegTree[RC(k)].val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k, <span class="keyword">int</span> pos, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; pos || r &lt; pos || r &lt; l)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        SegTree[k].val = v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= m)</span><br><span class="line">        update(l, m, LC(k), pos, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        update(m + <span class="number">1</span>, r, RC(k), pos, v);</span><br><span class="line">    SegTree[k].val = min(SegTree[LC(k)].val, SegTree[RC(k)].val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r || l &gt; y || r &lt; x)</span><br><span class="line">        <span class="keyword">return</span> M;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y)</span><br><span class="line">        <span class="keyword">return</span> SegTree[k].val;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> min(query(l, m, x, y, LC(k)), query(m + <span class="number">1</span>, r, x, y, RC(k)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len, x, y, k, v;</span><br><span class="line"> </span><br><span class="line">    len = (<span class="keyword">sizeof</span>(num) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>)) - <span class="number">1</span>;</span><br><span class="line">    build(<span class="number">0</span>, len, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * len; i++)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; SegTree[i].val &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"查询[x,y]区间的最小值："</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; query(<span class="number">0</span>, len, x, y, <span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"更新下标k位置上的值："</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; k &gt;&gt; v;</span><br><span class="line">    update(<span class="number">0</span>, len, <span class="number">1</span>, k, v);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * len; i++)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; SegTree[i].val &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树状数组（Fenwick tree）</title>
      <link href="/2018/08/01/fenwick-tree/"/>
      <url>/2018/08/01/fenwick-tree/</url>
      <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://en.wikipedia.org/wiki/Fenwick_tree" target="_blank" rel="noopener">fenwick tree</a></p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LSB(i) (i &amp; -i)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10001</span>;</span><br><span class="line"><span class="keyword">int</span> bit_tree[M];</span><br><span class="line"><span class="keyword">int</span> freq[M];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (index += <span class="number">1</span>; index &gt; <span class="number">0</span>; index -= LSB(index))</span><br><span class="line">        sum += bit_tree[index];</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> index, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (index += <span class="number">1</span>; index &lt;= n; index += LSB(index))</span><br><span class="line">        bit_tree[index] += val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> freq[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        bit_tree[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        update(n, i, freq[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; freq[i];</span><br><span class="line">    init(freq, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; getsum(i) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; bit_tree[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计划</title>
      <link href="/2018/07/29/planning-or-flag/"/>
      <url>/2018/07/29/planning-or-flag/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=603259&auto=1&height=66"></iframe><p>拟（立）一个学习计划（flag）。</p><h3 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h3><blockquote><p>注：其中删除线表示已完成。</p></blockquote><ul><li>算法（持续学习中…）<ul><li>A*算法</li><li>红黑树的删除维护部分</li><li>正则表达式</li><li>最坏时间复杂度O(n)的选择算法</li><li>数学类算法<ul><li>符号计算</li><li>复变函数</li></ul></li><li>图论<ul><li>最小生成树</li><li>最短路径</li><li>哈密顿回路</li><li>欧拉回路</li></ul></li><li>动态规划</li><li>图形学</li></ul></li><li>OJ<ul><li>codeforces</li><li>poj</li><li>hdu</li><li>洛谷</li></ul></li><li>编程语言<ul><li>深入C++各种细节</li><li>Haskell</li><li>Lisp</li><li>Python</li><li>MatLab</li><li>Mathematics</li><li>JavaScript</li><li>汇编语言（入门）</li></ul></li><li>想弄懂的<ul><li>函数式编程</li><li>图灵机</li><li>λ calculus</li><li>Process calculus</li></ul></li><li>书籍<ul><li>深入理解计算机操作系统(CSAPP)</li><li>计算机程序的构造与解释(SICP)</li><li>统计学习方法</li><li>游戏引擎架构</li><li>离散数学</li><li>高等代数</li><li>信号与系统</li><li>狼与香辛料</li></ul></li><li>C-libhttp项目<ul><li>简易Json解析库</li><li>图片/音频/视频等处理</li><li>http协议</li></ul></li><li>研究源码<ul><li>STL</li><li>boost</li><li>Linux内核</li><li>you-get（python package）</li></ul></li><li>技术方向<ul><li>机器学习</li><li>深度学习</li><li>编译原理</li><li>搜索引擎</li><li>网络安全</li></ul></li><li>github个人仓库<ul><li><del>重构以前写的抓取Pixiv的代码</del></li><li><del>整合/整理一些仓库代码</del></li></ul></li><li>人类语言<ul><li>英语</li><li>日语</li><li>国语</li></ul></li><li>自然科学<ul><li>数学<ul><li>高数</li><li>数分</li><li>线代</li><li>高代</li><li>抽象代数</li><li>概率论</li><li>复变函数</li><li>离散数学</li><li>数理逻辑（与计算机相关方向）<ul><li>集合论</li><li>证明论</li><li>范畴论</li><li>模型论</li><li>递归论</li></ul></li><li>实变函数</li><li>实分析与复分析</li></ul></li><li>物理</li><li>天文学</li></ul></li><li>弹道学</li><li>法医学</li><li>经济学</li><li>考古学</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>并查集</title>
      <link href="/2018/07/28/union-find/"/>
      <url>/2018/07/28/union-find/</url>
      <content type="html"><![CDATA[<h3 id="About-algorithm"><a href="#About-algorithm" class="headerlink" title="About algorithm"></a>About algorithm</h3><p><a href="https://en.wikipedia.org/wiki/Disjoint-set_data_structure" target="_blank" rel="noopener">Union-Find algorithm</a>(also called a Disjoint-set or Merge find algorithm) is a very useful data structure.</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>Recommend to see this document:<a href="https://www.cs.princeton.edu/~rs/AlgsDS07/01UnionFind.pdf" target="_blank" rel="noopener">Union-Find.pdf</a></p><h3 id="Algorithm-implementation"><a href="#Algorithm-implementation" class="headerlink" title="Algorithm implementation"></a>Algorithm implementation</h3><p>Below is an algorithm I implemented in C Programming language:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> id[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (id[r] != r)r = id[r];</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transplant</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="comment">// path compression</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = find(i);</span><br><span class="line"><span class="keyword">while</span> (i != r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = id[i];</span><br><span class="line">id[i] = r;</span><br><span class="line">i = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">issmooth</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r1 = find(p), r2 = find(q);</span><br><span class="line"><span class="keyword">if</span> (r1 != r2)</span><br><span class="line">id[r1] = r2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">"-&gt;"</span> &lt;&lt; id[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"></span><br><span class="line">join(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">join(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">join(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">join(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">join(<span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">join(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (issmooth(<span class="number">2</span>, <span class="number">7</span>))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"true"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"false"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">transplant(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">"-&gt;"</span> &lt;&lt; id[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1--2--4</span></span><br><span class="line"><span class="comment">| /</span></span><br><span class="line"><span class="comment">|/</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5--6--7</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>梯度下降算法</title>
      <link href="/2018/07/26/gradient-descent/"/>
      <url>/2018/07/26/gradient-descent/</url>
      <content type="html"><![CDATA[<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>代码更新了，为了解释为什么代码这样写，先来说说梯度下降法的迭代公式。</p><p>首先，暂时只考虑二元函数 $ f(x, y) $，因为在能可视化的三维图下研究梯度更好理解，但在文章中形式上我还是把它考虑写为 $ f(\vec x) $。</p><p>设函数为 $ f(\vec x) = ag(x_1) + b\phi{(x_2)} + c $</p><p>函数从某个起点 $ \vec{p}_{(1)} = (p_1, p_2) $ 处出发，通过求梯度进行方向搜索，找到某个步长范围内下降最快的方向的点，然后从初始点移动到找到的点。</p><p>迭代公式：</p><script type="math/tex; mode=display">\vec{p_{n + 1}} = \vec{p_{n}} + \lambda \dot (-\bigtriangledown f(\vec x))</script><p>这里 $ \lambda $ 是一个步长系数，我们可以自己控制它的增长，它的作用就在于有时候如果步长设置过大，可能就会跳过我们要走的方向，过小可能完全找不到方向，所以还有更好的自动计算方式：</p><p>我们的迭代公式求出来的是一个点，于是将 $ \vec{x{n}} + \bigtriangledown f(\vec x) \dot \lambda $ 代入原函数中，得到：</p><script type="math/tex; mode=display">\omega (\lambda)) = ag(p_1 + \lambda \dot (-\bigtriangledown f(\vec{p}_{(1)}))) + b\phi{(p_2 + \lambda \dot (-\bigtriangledown f(\vec{p}_{(1)})))}</script><p>令 $ \omega ‘(\lambda) =  0 $ ，整理得：</p><script type="math/tex; mode=display">a^2 g'(p_1) g'(p_1 - a\lambda g'(p_1)) + b^2 \phi '(p_2) \phi '(p_2 - b\lambda \phi '(p_2)) = 0</script><p>因为参数a,b和点(p_1, p2)都已知，所以可求出 $ \lambda $ 的值，这就是我代码中<code>ployeq()</code>函数的意义。</p><p>本来为了便利性，所以利用回调函数<code>gradient_eq</code>来方便自己定制方程的梯度公式，做了种种尝试后发现，不会符号计算还是不能便利的求<code>ployeq()</code>函数，因为λ是一个未知变量，不好代公式求出来。。。所以，想求方程，还是只有麻烦自己先手动推出计算公式啦~</p><h3 id="关于算法"><a href="#关于算法" class="headerlink" title="关于算法"></a>关于算法</h3><p><a href="https://en.wikipedia.org/wiki/Gradient_descent" target="_blank" rel="noopener">Gradient descent</a> 又叫最速下降法，是一种局部搜索算法，属于智能算法，类似的有爬山算法、模拟退火等。基本原理是优化理论中的无约束问题，利用梯度搜索函数变化最快的方向，然后不断迭代的方法。</p><p>好久之前学过这个算法，但当时没实际写过代码，仅仅推过公式，然后做了一道题。。。后来一直没用上，就忘了一些推导过程了。。。</p><p>今天有点晚，暂时就不详细推公式了，有空我将补上推导过程并给出梯度法的收敛条件，还会给出一些更好的优化算法(牛顿法、共轭梯度法等)及其他约束问题的优化算法，届时我们将会看到许多有趣的搜索算法，比如斐波那契法、黄金比例法(0.618法)等。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>由于咱太蒻稽…不会符号计算，不能写一个通用梯度下降算法模板。。。于是这里以问题</p><script type="math/tex; mode=display">min \ f(x) = 2x_1 ^2 + x_2 ^2,</script><p>起始点 $ x_0 = (1, 1)^T, \epsilon = \frac{1}{1000} $ 为例。</p><p>函数图：</p><p><img src="/img/funcgraph.png" alt="f(x) = 2x_1 ^2 + x_2 ^2"></p><p>算法实现：</p><h5 id="C-programming-language"><a href="#C-programming-language" class="headerlink" title="C programming language"></a>C programming language</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> square(x) x*x</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">double</span><span class="params">(*gradient_eq)</span><span class="params">(<span class="keyword">double</span>, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">partial_x</span><span class="params">(<span class="keyword">double</span> x, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>*(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">partial_y</span><span class="params">(<span class="keyword">double</span> x, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hypotenuse</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(square(a) + square(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ployeq</span><span class="params">(<span class="keyword">double</span> x_1, <span class="keyword">double</span> x_2, <span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -(<span class="number">2</span>*a*x_1 + b*x_2)/(<span class="number">2</span>*square(a) + square(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gradient_descent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">double</span> x_1,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">double</span> x_2,</span></span></span><br><span class="line"><span class="function"><span class="params">    gradient_eq grad_x,</span></span></span><br><span class="line"><span class="function"><span class="params">    gradient_eq grad_y,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">double</span> epsilon,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">unsigned</span> max_iters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a, b, lambda;</span><br><span class="line">    <span class="keyword">unsigned</span> iters = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"(%f, %f)\n"</span>, x_1, x_2);</span><br><span class="line">        a = grad_x(x_1), b = grad_y(x_2);</span><br><span class="line">        lambda = ployeq(x_1, x_2, a, b);</span><br><span class="line">        x_1 += a*lambda;</span><br><span class="line">        x_2 += b*lambda;</span><br><span class="line">        iters++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (hypotenuse(a, b) &gt; epsilon &amp;&amp; iters &lt; max_iters);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x_1 = <span class="number">1.</span>, x_2 = <span class="number">1.</span>;</span><br><span class="line">    gradient_descent(x_1, x_2, partial_x, partial_y, <span class="number">1e-3</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><p>$ \epsilon = 10^-3 $</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1.000000, 1.000000)</span><br><span class="line">(-0.111111, 0.444444)</span><br><span class="line">(0.074074, 0.074074)</span><br><span class="line">(-0.008230, 0.032922)</span><br><span class="line">(0.005487, 0.005487)</span><br><span class="line">(-0.000610, 0.002439)</span><br><span class="line">(0.000406, 0.000406)</span><br><span class="line">(-0.000045, 0.000181)</span><br></pre></td></tr></table></figure><p>$ \epsilon = 10^-6 $</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(1.000000, 1.000000)</span><br><span class="line">(-0.111111, 0.444444)</span><br><span class="line">(0.074074, 0.074074)</span><br><span class="line">(-0.008230, 0.032922)</span><br><span class="line">(0.005487, 0.005487)</span><br><span class="line">(-0.000610, 0.002439)</span><br><span class="line">(0.000406, 0.000406)</span><br><span class="line">(-0.000045, 0.000181)</span><br><span class="line">(0.000030, 0.000030)</span><br><span class="line">(-0.000003, 0.000013)</span><br><span class="line">(0.000002, 0.000002)</span><br><span class="line">(-0.000000, 0.000001)</span><br><span class="line">(0.000000, 0.000000)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">问题最优解：(0, 0)</span><br></pre></td></tr></table></figure><h5 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">square = <span class="keyword">lambda</span> x: x ** <span class="number">2</span></span><br><span class="line">side = <span class="keyword">lambda</span> a, b: (a ** <span class="number">2</span> + b ** <span class="number">2</span>) ** (<span class="number">1</span> / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d</span><span class="params">(x_1, x_2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-4</span> * x_1, <span class="number">-2</span> * x_2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(x_1, x_2, a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> -(<span class="number">2</span> * a * x_1 + b * x_2) / (<span class="number">2</span> * square(a) + square(b))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(x_1, x_2, epsilon, max_iters)</span>:</span></span><br><span class="line">    iters = <span class="number">0</span></span><br><span class="line">    a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (side(a, b) &gt; epsilon) &amp; (iters &lt; max_iters):</span><br><span class="line">        print(<span class="string">'%d (%.6f, %.6f)'</span> % (iters + <span class="number">1</span>, x_1, x_2))</span><br><span class="line">        a, b = d(x_1, x_2)</span><br><span class="line">        gamma = evaluate(x_1, x_2, a, b)</span><br><span class="line">        (x_1, x_2) = (x_1 + a * gamma, x_2 + b * gamma)</span><br><span class="line">        iters += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    gradient_descent(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0.001</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 (1.000000, 1.000000)</span><br><span class="line">2 (-0.111111, 0.444444)</span><br><span class="line">3 (0.074074, 0.074074)</span><br><span class="line">4 (-0.008230, 0.032922)</span><br><span class="line">5 (0.005487, 0.005487)</span><br><span class="line">6 (-0.000610, 0.002439)</span><br><span class="line">7 (0.000406, 0.000406)</span><br><span class="line">8 (-0.000045, 0.000181)</span><br></pre></td></tr></table></figure><h5 id="matlab"><a href="#matlab" class="headerlink" title="matlab"></a>matlab</h5><p>matlab版的有点问题。。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">clc;clear;</span><br><span class="line">e = <span class="number">1e-3</span>;</span><br><span class="line">x0 = [<span class="number">1</span> <span class="number">1</span>];</span><br><span class="line">max_iters = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">gradient_descent_algorithm(e, x0, max_iters);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gradient_descent_algorithm</span><span class="params">(epsilon, x0, max_iters)</span></span></span><br><span class="line">f = @(p) <span class="number">4</span> * p(<span class="number">1</span>) + <span class="number">2</span> * p(<span class="number">2</span>);</span><br><span class="line">[x,y] = <span class="built_in">meshgrid</span>(<span class="number">-2</span>:<span class="number">0.1</span>:<span class="number">2</span>);</span><br><span class="line">z = <span class="number">2</span> * x.^<span class="number">2</span> + y.^<span class="number">2</span>;</span><br><span class="line">figure</span><br><span class="line">surfc(x,y,z);</span><br><span class="line">xlabel(<span class="string">'x'</span>);</span><br><span class="line">ylabel(<span class="string">'y'</span>);</span><br><span class="line">zlabel(<span class="string">'z'</span>);</span><br><span class="line">[zx,zy] = gradient(z);</span><br><span class="line">d = -x0;</span><br><span class="line">iters = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">sqrt</span>(d * d') &gt; epsilon &amp;&amp; iters &lt; max_iters</span><br><span class="line">    inat = <span class="built_in">find</span>(x == x0(<span class="number">1</span>) &amp; y == x0(<span class="number">2</span>));</span><br><span class="line">    d = -[zx(inat) zy(inat)];</span><br><span class="line">    <span class="built_in">disp</span>(d);</span><br><span class="line">    syms c;</span><br><span class="line">    l = f(x0 + c*d) == <span class="number">0</span>;</span><br><span class="line">    lambda = solve(l, c);</span><br><span class="line">    x0 = x0 + lambda*d;</span><br><span class="line">    iters = iters + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% function draw_search()</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% end</span></span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>1.<a href="https://baike.baidu.com/item/%E6%9C%80%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/8459488" target="_blank" rel="noopener">《最优化理论与算法 第二版》・陈宝林</a><br>2.<a href="https://en.wikipedia.org/wiki/Gradient_descent" target="_blank" rel="noopener">Gradient descent - wikipedia</a></p>]]></content>
      
      <categories>
          
          <category> algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Math </tag>
            
            <tag> MatLab </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>轻量级Json解析器</title>
      <link href="/2018/07/21/json-parser/"/>
      <url>/2018/07/21/json-parser/</url>
      <content type="html"><![CDATA[<h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><p>该项目更新日志历史按最新时间排序。</p><h3 id="Update-2018-10-12"><a href="#Update-2018-10-12" class="headerlink" title="Update 2018-10-12"></a>Update 2018-10-12</h3><p><strong>此次更新的主要内容</strong></p><ol><li>修复了<code>TextChecker()</code>、<code>Erase()</code>、<code>ToString()</code>的bug;</li><li>增加了<code>ToHttpRequestHeader()</code>功能，用于将json文本解析为http协议请求头部格式；</li><li><code>Text</code>类中增加了<code>RemovePair()</code>功能，与<code>Journey</code>类中的<code>Erase()</code>功能相同，都是用于移除一对<code>key-value</code>。</li></ol><h3 id="Update-2018-10-09"><a href="#Update-2018-10-09" class="headerlink" title="Update 2018-10-09"></a>Update 2018-10-09</h3><p><strong>此次更新的主要内容</strong></p><ol><li><p>增加了<code>TextChecker()</code>api，其作用是检测json文本是否合法。用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Text t;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>*s = <span class="string">"&#123;\"hello\":\"world\",\"\":&#123;\"112\":\"few\",\"er\":[1,2,3]&#125;&#125;"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (t.TextChecker(s) ? <span class="string">"true"</span> : <span class="string">"false"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li><li><p>改变了一些<code>api</code>的名称，比如之前的<code>JsonFormatPrint</code>改为了<code>Output</code>、<code>WriteText</code>改为了<code>WriteToText</code>、<code>Tojson</code>改为了<code>ToString</code>，两个类中获取对象名称分别改为了<code>GetValueIsObject</code>、<code>GetPair</code>等。</p></li><li>增加了生成器<code>Journey</code>类，将基础类型值数据结构从<code>Value类</code>中拿了出来，并做了许多赋值运算符<code>=</code>与中括符<code>[]</code>的重载。使得使用更方便。用法见：<a href="https://github.com/darkchii/C-libhttp/blob/master/exam_json_1.cpp" target="_blank" rel="noopener">生成器用例</a></li></ol><p>接下来打算添加迭代器。</p><p>源码见：<a href="https://github.com/darkchii/C-libhttp/blob/master/libjson.hpp" target="_blank" rel="noopener">libjson.hpp</a></p><h3 id="Update-2018-10-07"><a href="#Update-2018-10-07" class="headerlink" title="Update 2018-10-07"></a>Update 2018-10-07</h3><h3 id="pm-12-23"><a href="#pm-12-23" class="headerlink" title="pm 12:23"></a>pm 12:23</h3><p><strong>此次更新的主要内容</strong></p><ol><li>增加了对解析好的文本的可操作性（增删改查等），示例见：<a href="https://github.com/darkchii/C-libhttp/blob/master/exam_json.cpp" target="_blank" rel="noopener">example</a></li><li>完善了之前一些没注意到的问题。</li></ol><h3 id="Update-2018-10-05"><a href="#Update-2018-10-05" class="headerlink" title="Update 2018-10-05"></a>Update 2018-10-05</h3><h3 id="pm-02-52"><a href="#pm-02-52" class="headerlink" title="pm 02:52"></a>pm 02:52</h3><p><strong>此次更新的主要内容</strong></p><ol><li>完善了之前一些没注意到的问题。</li></ol><h3 id="Update-2018-10-05-1"><a href="#Update-2018-10-05-1" class="headerlink" title="Update 2018-10-05"></a>Update 2018-10-05</h3><h3 id="pm-07-44"><a href="#pm-07-44" class="headerlink" title="pm 07:44"></a>pm 07:44</h3><p><strong>此次更新的主要内容</strong></p><ol><li>重新设计了数据结构，让数据使用变得更安全；</li><li><p>修复了字符串转浮点型算法的bug，目前是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">double str2dou(std::string s)</span><br><span class="line">&#123;</span><br><span class="line">double num = 0, point_back = 0, sign = 1;</span><br><span class="line">size_t i = 0, pos = 0;</span><br><span class="line">if (s[i] == &apos;-&apos;) i++, sign *= -1;</span><br><span class="line">while (s[i] != &apos;.&apos;) num = num * 10 + (s[i++] - &apos;0&apos;);</span><br><span class="line">pos = i++;</span><br><span class="line">while (s[i]) point_back = point_back * 10 + (s[i++] - &apos;0&apos;);</span><br><span class="line">num += point_back / std::pow(10, i - pos - 1);</span><br><span class="line">return num * sign;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更换了解析方式，之前的解析的json格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;string&quot;: &quot;hello&quot;,</span><br><span class="line">&quot;double&quot;: &quot;-123.43&quot;,</span><br><span class="line">&quot;int&quot;: &quot;10&quot;,</span><br><span class="line">&quot;bool&quot;: &quot;true&quot;,</span><br><span class="line">&quot;null&quot;: &quot;null&quot;,</span><br><span class="line">&quot;array&quot;: &quot;[&quot;2&quot;, &quot;3&quot;, &quot;4&quot;]&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>现在的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;string&quot;: &quot;hello&quot;,</span><br><span class="line">&quot;double&quot;: -123.43,</span><br><span class="line">&quot;int&quot;: 10,</span><br><span class="line">&quot;bool&quot;: true,</span><br><span class="line">&quot;null&quot;: null,</span><br><span class="line">&quot;array&quot;: [2, 3, 4]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>去掉一些多余的变量；</li><li>解析器的使用：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libjson.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Text t;</span><br><span class="line"><span class="function">fstream <span class="title">text</span><span class="params">(<span class="string">"json.txt"</span>, fstream::in | fstream::out | fstream::app)</span></span>;</span><br><span class="line"><span class="built_in">string</span> line, str;</span><br><span class="line"><span class="keyword">while</span> (getline(text, line))</span><br><span class="line">str += line;</span><br><span class="line">text.close();</span><br><span class="line">t.Parse(str);</span><br><span class="line">t.JsonFormatPrint();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>output:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;Latin_Modern&quot; : &quot;fn_lm&quot;,</span><br><span class="line">        &quot;Verdana&quot; : &quot;fn_jvn&quot;,</span><br><span class="line">        &quot;time&quot; : -123.23,</span><br><span class="line">        &quot;flag&quot; : true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>决定将解析器与生成器分离开，这样更易于使用和维护。（目前基本上完成了解析器部分，生成器正在进行中）</li></ol><h3 id="Update-2018-09-28"><a href="#Update-2018-09-28" class="headerlink" title="Update 2018-09-28"></a>Update 2018-09-28</h3><h3 id="pm-07-55"><a href="#pm-07-55" class="headerlink" title="pm 07:55"></a>pm 07:55</h3><p><strong>此次更新的主要内容</strong></p><ol><li>利用其他方式完善了 <code>add()</code>、<code>setvalue()</code>，还有 <code>operator[]</code>，解决了不同类型的传值的增改功能（虽然比较方法比较笨拙）。</li><li>完善了不同类型转换为 <code>string</code> 的算法，这些都是是辅助算法，应考虑单独放在一个头文件中调用。</li></ol><p>需要注意的地方：</p><ol><li><p><code>add</code>、<code>setvalue</code>函数只能传入两个字符串，不管 <code>value</code> 是什么类型都使用字符串进行传入。<br>用例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">r.add(<span class="string">"string"</span>, <span class="string">"yes"</span>); <span class="comment">// `value`为字符串类型</span></span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">"string"</span>, <span class="string">"no"</span>); <span class="comment">// 同上</span></span><br><span class="line"></span><br><span class="line">r.add(<span class="string">"array"</span>, <span class="string">"[\"one\", \"two\", \"three\", \"four\", \"five\"]"</span>); <span class="comment">// `value`为字符串数组类型</span></span><br><span class="line">r.setvalue(<span class="string">"array"</span>, <span class="string">"[\"Json\", \"Test\", \"Fuck\"]"</span>); <span class="comment">// 同上</span></span><br><span class="line"></span><br><span class="line">r.add(<span class="string">"double"</span>, <span class="string">"324.23"</span>); <span class="comment">// `value`为浮点类型</span></span><br><span class="line">r.setvalue(...); <span class="comment">// 同上</span></span><br><span class="line"></span><br><span class="line">r.add(<span class="string">"bool"</span>, <span class="string">"true"</span>); <span class="comment">// `value`为布尔类型</span></span><br><span class="line">r.setvalue(...); <span class="comment">// 同上</span></span><br><span class="line"></span><br><span class="line">r.add(<span class="string">"root"</span>, <span class="string">"&#123;\"parent\":\"children\"&#125;"</span>)<span class="comment">// `value`为Json对象类型</span></span><br><span class="line">r.setvalue(..); <span class="comment">// 同上</span></span><br></pre></td></tr></table></figure></li><li><p>通过 <code>[]</code>，获取的 <code>value</code> 不是原地址，所以不能进行赋值或修改。也暂不能获取对象类型。<code>getvalue()</code> 暂且保留原样。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> st size_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> index(c) (c - <span class="meta-string">'A'</span>)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; BOOL, INTEGER, FLOAT, STRING, ARRAY, OBJECT &#125; Type;</span><br><span class="line"><span class="function">st <span class="title">weight</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st i = <span class="number">0</span>, x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i]) x += index(s[i])*i, i += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x + i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bits</span><span class="params">(<span class="keyword">char</span> s[], st &amp;i, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> ;</span><br><span class="line">    bits(s, i, x/<span class="number">10</span>);</span><br><span class="line">    s[i++] = x%<span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bits</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, st &amp;i, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> ;</span><br><span class="line">    bits(s, i, x/<span class="number">10</span>);</span><br><span class="line">    s[i++] = x%<span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">str2bool</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> var;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; s[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; s[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; s[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; s[<span class="number">4</span>] == <span class="string">'\0'</span>) var = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> var = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> var;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">bool2con_ch_arr</span><span class="params">(<span class="keyword">bool</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v) <span class="keyword">return</span> <span class="string">"true"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"false"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">con_char2int</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll num = <span class="number">0</span>, sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (*s == <span class="string">'-'</span>) s++, sign *= <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (*s) num = num * <span class="number">10</span> + (*s - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">return</span> num*sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">str2int</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> con_char2int(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">int2str</span><span class="params">(ll num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s; st i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span>) s += <span class="string">"-"</span>, i++;</span><br><span class="line">    bits(s, i, num);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">int2con_ch_arr</span><span class="params">(ll num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> int2str(num).c_str();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">str2float</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s, st p, st r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> num = <span class="number">0</span>, propoint = <span class="number">0</span>, sign = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (*s == <span class="string">'-'</span>) s++, sign *= <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (*s != <span class="string">'.'</span>) num = num * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">while</span> (*s) propoint = propoint * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">num += propoint / <span class="built_in">std</span>::<span class="built_in">pow</span>(<span class="number">10</span>, r - p);</span><br><span class="line"><span class="keyword">return</span> num*sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">str2dou</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span> <span class="comment">// 与 str2float() 功能一样</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num = <span class="number">0</span>, propoint = <span class="number">0</span>, sign = <span class="number">1</span>;</span><br><span class="line">    st i = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">'-'</span>) i++, sign *= <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (s[i] != <span class="string">'.'</span>) num = num * <span class="number">10</span> + (s[i] - <span class="string">'0'</span>), pos = i++;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">while</span> (s[i]) propoint = propoint * <span class="number">10</span> + (s[i] - <span class="string">'0'</span>);</span><br><span class="line">num += propoint / <span class="built_in">std</span>::<span class="built_in">pow</span>(<span class="number">10</span>, i - pos);</span><br><span class="line"><span class="keyword">return</span> num*sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">float2ch_arr</span><span class="params">(<span class="keyword">double</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>*s = <span class="keyword">new</span> <span class="keyword">char</span>; st i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span>) s[i++] = <span class="string">'-'</span>, num *= <span class="number">-1</span>;</span><br><span class="line">    ll x = (ll)num;</span><br><span class="line">    <span class="keyword">double</span> y = num - x;</span><br><span class="line">    bits(s, i, x);</span><br><span class="line">    s[i++] = <span class="string">'.'</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        y *= <span class="number">10</span>;</span><br><span class="line">        s[i++] = <span class="keyword">int</span>(y + <span class="number">0.1</span>)%<span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="keyword">int</span>(<span class="built_in">ceil</span>(y)) != <span class="keyword">int</span>(y + <span class="number">0.1</span>));</span><br><span class="line">    s[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">float2con_ch_arr</span><span class="params">(<span class="keyword">double</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">const</span> <span class="keyword">char</span>*)float2ch_arr(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">float2str</span><span class="params">(<span class="keyword">double</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string s(float2con_ch_arr(num));</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">str2arr</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; arr_str, <span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str; st i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(*s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">','</span>:</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    str[i] = <span class="string">'\0'</span>;</span><br><span class="line">                    arr_str.push_back(str);</span><br><span class="line">                    i = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">' '</span>: <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> : str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">arr2con_ch_arr</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; arr_str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>*s = <span class="keyword">new</span> <span class="keyword">char</span>; st k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; arr_str.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; arr_str[i].size(); j++)</span><br><span class="line">            s[k++] = arr_str[i][j];</span><br><span class="line">        <span class="keyword">if</span> (i != arr_str.size() - <span class="number">1</span>) s[k++] = <span class="string">','</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s[k] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">const</span> <span class="keyword">char</span>*)s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">bool</span> b_v;</span><br><span class="line">ll i_v;</span><br><span class="line"><span class="keyword">double</span> d_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; arr_v;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> key;</span><br><span class="line">st keys;</span><br><span class="line"><span class="keyword">bool</span> isvalue;</span><br><span class="line">Type type;</span><br><span class="line">ll table[N];</span><br><span class="line">BaseNode *children[N], *parent;</span><br><span class="line"></span><br><span class="line">BaseNode()</span><br><span class="line">&#123;</span><br><span class="line">keys = <span class="number">0</span>, isvalue = <span class="literal">false</span>, type = OBJECT, parent = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) table[i] = <span class="number">-1</span>, children[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">BaseNode(BaseNode*p, <span class="keyword">const</span> <span class="keyword">char</span> *k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">sk</span><span class="params">(k)</span></span>;</span><br><span class="line">key = sk, keys = <span class="number">0</span>, isvalue = <span class="literal">false</span>, parent = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) table[i] = <span class="number">-1</span>, children[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">~BaseNode() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonTree</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">BaseNode *root;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pstr;</span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(BaseNode*r, <span class="keyword">int</span> format)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'&#123;'</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line">BaseNode*node = r-&gt;children[i];</span><br><span class="line"><span class="keyword">if</span> (node)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format; j++)</span><br><span class="line">                        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span>  &lt;&lt; node-&gt;key &lt;&lt; <span class="string">"\" : "</span>;</span><br><span class="line"><span class="keyword">switch</span> (node-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> BOOL:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (node-&gt;b_v ? <span class="string">"true"</span> : <span class="string">"false"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INTEGER:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;i_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FLOAT:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;d_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STRING:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;s_v &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ARRAY:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'['</span>;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; node-&gt;arr_v.size(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;arr_v[j] &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="keyword">if</span> (j != node-&gt;arr_v.size() - <span class="number">1</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">']'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OBJECT:</span><br><span class="line">print(r-&gt;children[i], format + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">","</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format - <span class="number">1</span>; j++)</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'&#125;'</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format - <span class="number">1</span>; j++)</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BaseNode* <span class="title">findkey</span><span class="params">(BaseNode*r, <span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &amp;&amp; r-&gt;table[weight(s)] != <span class="number">-1</span>) <span class="keyword">return</span> r-&gt;children[r-&gt;table[weight(s)]];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory</span><span class="params">(BaseNode*&amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">destory(r-&gt;children[i]);</span><br><span class="line"><span class="keyword">delete</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">JsonTree() &#123; root = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">JsonTree(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s);</span><br><span class="line">&#125;</span><br><span class="line">JsonTree(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line">~JsonTree()</span><br><span class="line">&#123;</span><br><span class="line">destory(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    parse(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[N]; st i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> arr_sw = <span class="literal">false</span>, obj_sw = <span class="literal">false</span>, str_sw = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!root) root = <span class="keyword">new</span> BaseNode();</span><br><span class="line">BaseNode *nd = root;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#123;'</span>: <span class="keyword">if</span> (obj_sw) &#123; nd = nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]; nd-&gt;type = OBJECT; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#125;'</span>: nd-&gt;isvalue = <span class="literal">false</span>; nd = nd-&gt;parent; obj_sw = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'"'</span>: <span class="keyword">if</span> (str_sw) str_sw = <span class="literal">false</span>; <span class="keyword">else</span> str_sw = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">bool</span> b = <span class="literal">false</span>; <span class="keyword">double</span> dounum = <span class="number">0</span>;</span><br><span class="line">                    ll intnum = <span class="number">0</span>; st f = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">                    str[i] = <span class="string">'\0'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!arr_sw)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i &lt; <span class="number">11</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((str[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'\0'</span>) ||</span><br><span class="line">                                (str[<span class="number">0</span>] == <span class="string">'f'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'a'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'l'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'s'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">5</span>] == <span class="string">'\0'</span>))</span><br><span class="line">                                f = <span class="number">3</span>, b = str2bool(str);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">                                    <span class="keyword">if</span> (str[j] == <span class="string">'.'</span> || str[<span class="number">0</span>] == <span class="string">'-'</span> || (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>)) f = <span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">else</span> &#123; f = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">                                <span class="keyword">if</span> (f)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">                                        <span class="keyword">if</span> (str[j] != <span class="string">'.'</span> || (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>)) f = <span class="number">2</span>;</span><br><span class="line">                                        <span class="keyword">else</span>  &#123; f = <span class="number">1</span>, pos = j; <span class="keyword">break</span>; &#125;</span><br><span class="line">                                    <span class="keyword">if</span> (f == <span class="number">2</span>) intnum = str2int(str);</span><br><span class="line">                                    <span class="keyword">else</span> dounum = str2float(str, pos, i - <span class="number">1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> f = <span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">if</span> (nd-&gt;isvalue)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (nd-&gt;children[nd-&gt;keys - <span class="number">1</span>])</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ps</span><span class="params">(str)</span></span>;</span><br><span class="line">                            <span class="keyword">switch</span> (f)</span><br><span class="line">                            &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = STRING;</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;s_v = ps;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = FLOAT;</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;d_v = dounum;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = INTEGER;</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;i_v = intnum;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = BOOL;</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;b_v = b;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = ARRAY;</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;arr_v.push_back(ps);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (nd-&gt;table[weight(str)] == <span class="number">-1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            BaseNode *n = <span class="keyword">new</span> BaseNode(nd, str);</span><br><span class="line">                            nd-&gt;children[nd-&gt;keys] = n;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    i = <span class="number">0</span>, obj_sw = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">':'</span>: <span class="keyword">if</span> (nd-&gt;table[weight(str)] == <span class="number">-1</span>) nd-&gt;table[weight(str)] = nd-&gt;keys++; nd-&gt;isvalue = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">','</span>: <span class="keyword">if</span> (!arr_sw) &#123; nd-&gt;isvalue = <span class="literal">false</span>; <span class="keyword">if</span> (str_sw) str[i++] = *s; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">' '</span>: <span class="keyword">if</span> (!arr_sw) <span class="keyword">if</span> (str_sw) str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'['</span>: arr_sw = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">']'</span>: arr_sw = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>: <span class="keyword">if</span> (str_sw) str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\n'</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:  str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">parse2url</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parse(s);</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; root-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line">    BaseNode*node = root-&gt;children[i];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = node-&gt;key;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; str.size(); j++)</span><br><span class="line">pstr += str[j];</span><br><span class="line">pstr += <span class="string">"="</span>;</span><br><span class="line">str.clear();</span><br><span class="line"><span class="keyword">switch</span>(node-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">case</span> BOOL: <span class="keyword">if</span> (node-&gt;b_v) str = <span class="string">"true"</span>; <span class="keyword">else</span> str = <span class="string">"false"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> INTEGER: str = int2str(node-&gt;i_v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FLOAT: str = float2str(node-&gt;d_v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STRING: str = node-&gt;s_v;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"String parse error!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; str.size(); j++)</span><br><span class="line">pstr += str[j];</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>)</span><br><span class="line">pstr += <span class="string">"&amp;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pstr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">getvalue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BaseNode*node = findkey(root, key);</span><br><span class="line">    <span class="keyword">if</span> (node)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            switch(node-&gt;type)</span></span><br><span class="line"><span class="comment">//            &#123;</span></span><br><span class="line"><span class="comment">//            case BOOL: return node-&gt;b_v;</span></span><br><span class="line"><span class="comment">//            case INTEGER: return node-&gt;i_v;</span></span><br><span class="line"><span class="comment">//            case FLOAT: return node-&gt;d_v;</span></span><br><span class="line"><span class="comment">//            case STRING: return node-&gt;s_v;</span></span><br><span class="line"><span class="comment">//            case ARRAY: return node-&gt;arr_v;</span></span><br><span class="line"><span class="comment">//            default: return node-&gt;children[node-&gt;table[weight(key)]];</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">return</span> node-&gt;d_v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">operator</span>[](<span class="keyword">const</span> <span class="keyword">char</span>*key)</span><br><span class="line">&#123;</span><br><span class="line">    BaseNode*node = findkey(root, key);</span><br><span class="line">    <span class="keyword">if</span> (node)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span>(node-&gt;type)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> BOOL: <span class="keyword">return</span> bool2con_ch_arr(node-&gt;b_v);</span><br><span class="line">            <span class="keyword">case</span> INTEGER: <span class="keyword">return</span> int2con_ch_arr(node-&gt;i_v);</span><br><span class="line">            <span class="keyword">case</span> FLOAT: <span class="keyword">return</span> float2con_ch_arr(node-&gt;d_v);</span><br><span class="line">            <span class="keyword">case</span> STRING: <span class="keyword">return</span> node-&gt;s_v.c_str();</span><br><span class="line">            <span class="keyword">case</span> ARRAY: <span class="keyword">return</span> arr2con_ch_arr(node-&gt;arr_v);</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            <span class="comment">// default: return node-&gt;children[node-&gt;table[weight(key)]];</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span>&amp; <span class="title">operator</span>=(<span class="title">T</span> <span class="title">v</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setvalue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*key, <span class="keyword">const</span> <span class="keyword">char</span>*value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        BaseNode*node = findkey(root, key);</span><br><span class="line">        <span class="keyword">if</span> (node)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">string</span> document, k(key), v(value);</span><br><span class="line">            document += <span class="string">"&#123;\""</span>, document += k, document += <span class="string">"\":"</span>;</span><br><span class="line">            document += <span class="string">"\""</span> , document += v, document += <span class="string">"\"&#125;"</span>;</span><br><span class="line">            parse(document.c_str());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Not found the key!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*key, <span class="keyword">const</span> <span class="keyword">char</span>*value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BaseNode*node = findkey(root, key);</span><br><span class="line">        <span class="keyword">if</span> (!node)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">string</span> document, k(key), v(value);</span><br><span class="line">            document += <span class="string">"&#123;\""</span>, document += k, document += <span class="string">"\":"</span>;</span><br><span class="line">            document += <span class="string">"\""</span> , document += v, document += <span class="string">"\"&#125;"</span>;</span><br><span class="line">            parse(document.c_str());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"The key was existed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BaseNode*node = findkey(root, key);</span><br><span class="line">        <span class="keyword">if</span> (node)</span><br><span class="line">        &#123;</span><br><span class="line">            BaseNode*p = node-&gt;parent;</span><br><span class="line">            p-&gt;keys--;</span><br><span class="line">            p-&gt;table[weight(node-&gt;key.c_str())] = <span class="number">-1</span>;</span><br><span class="line">            destory(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Not found the key!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visual</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">print(root, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JsonTree r;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function">fstream <span class="title">context</span><span class="params">(<span class="string">"json.txt"</span>, <span class="built_in">std</span>::fstream::in | <span class="built_in">std</span>::fstream::out | <span class="built_in">std</span>::fstream::app)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> line, str;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::getline(context, line))</span><br><span class="line">        str += line;</span><br><span class="line">    context.close();</span><br><span class="line"></span><br><span class="line">    r.parse(str);</span><br><span class="line"></span><br><span class="line">    r.add(<span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[<span class="string">"hello"</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    r.visual();</span><br><span class="line"></span><br><span class="line">    r.setvalue(<span class="string">"hello"</span>, <span class="string">"[\"Json\", \"Test\", \"Fuck\"]"</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[<span class="string">"hello"</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[<span class="string">"time"</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    r.visual();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">world</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"Latin_Modern"</span> : <span class="string">"fn_lm"</span>,</span><br><span class="line">        <span class="string">"Verdana"</span> : <span class="string">"fn_jvn"</span>,</span><br><span class="line">        <span class="string">"Object"</span> : &#123;</span><br><span class="line">                <span class="string">"Color"</span> : [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>, <span class="string">"white"</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">"time"</span> : -123.23,</span><br><span class="line">        <span class="string">"flag"</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"hello"</span> : <span class="string">"world"</span></span><br><span class="line">&#125;</span><br><span class="line">Json,Test,Fuck</span><br><span class="line">-123.230000000(</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"Latin_Modern"</span> : <span class="string">"fn_lm"</span>,</span><br><span class="line">        <span class="string">"Verdana"</span> : <span class="string">"fn_jvn"</span>,</span><br><span class="line">        <span class="string">"Object"</span> : &#123;</span><br><span class="line">                <span class="string">"Color"</span> : [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>, <span class="string">"white"</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">"time"</span> : -123.23,</span><br><span class="line">        <span class="string">"flag"</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"hello"</span> : [<span class="string">"Json"</span>, <span class="string">"Test"</span>, <span class="string">"Fuck"</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"Latin_Modern"</span> : <span class="string">"fn_lm"</span>,</span><br><span class="line">        <span class="string">"Verdana"</span> : <span class="string">"fn_jvn"</span>,</span><br><span class="line">        <span class="string">"Object"</span> : &#123;</span><br><span class="line">                <span class="string">"Color"</span> : [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>, <span class="string">"white"</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">"time"</span> : -123.23,</span><br><span class="line">        <span class="string">"flag"</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"hello"</span> : [<span class="string">"Json"</span>, <span class="string">"Test"</span>, <span class="string">"Fuck"</span>],</span><br><span class="line">        <span class="string">"root"</span> : &#123;</span><br><span class="line">                <span class="string">"parent"</span> : <span class="string">"children"</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="am-04-00-左右"><a href="#am-04-00-左右" class="headerlink" title="am 04:00 左右"></a>am 04:00 左右</h3><p><strong>此次更新的主要内容</strong></p><ol><li>修改了字符串加权函数名 <code>has()</code> 为 <code>weight()</code>，这样更合适。</li><li>前面代码中还有一个明显的安全隐患，那就是 <code>weight()</code> 函数的设计，因为考虑到一些字符的<code>ascii</code>码比字符<code>A</code>小，会出现负数，这时会出现数组越界问题。但我考虑暂不做更改，因为我默认所有的 <code>key</code> 都不会出现那些奇怪的字符。</li><li>完善了一些不合理的地方。</li></ol><h5 id="个人遇到的一些技术难点"><a href="#个人遇到的一些技术难点" class="headerlink" title="个人遇到的一些技术难点"></a>个人遇到的一些技术难点</h5><p>为了做出更好的<code>Json解析器</code>查了许多资料，但我有许多问题得不到解答。在<code>C++</code>中，不能对传参相同，返回类型不同的函数进行重载，模板也不能自动对返回类型进行推断（除非使用 C++11 auto 以及 C++14 编译器），这样我很难完成下面这样的功能：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">container n;</span><br><span class="line">n[<span class="string">"one"</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n[<span class="string">"one"</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p><p>即赋值和索引功能。不能自动推断返回值类型，模板就没意义了。。。也许是我的数据结构没设计好？</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> st size_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> index(c) (c - <span class="meta-string">'A'</span>)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; BOOL, INTEGER, FLOAT, STRING, ARRAY, OBJECT &#125; Type;</span><br><span class="line"><span class="function">st <span class="title">weight</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st i = <span class="number">0</span>, x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (s[i]) x += index(s[i])*i, i += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x + i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">str2float</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, st p, st r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> num = <span class="number">0</span>, propoint = <span class="number">0</span>, sign = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (*s == <span class="string">'-'</span>) s++, sign *= <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (*s != <span class="string">'.'</span>) num = num * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">while</span> (*s) propoint = propoint * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">num += propoint / <span class="built_in">std</span>::<span class="built_in">pow</span>(<span class="number">10</span>, r - p);</span><br><span class="line"><span class="keyword">return</span> num * sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bits</span><span class="params">(<span class="keyword">char</span> s[], st &amp;i, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) <span class="keyword">return</span>;</span><br><span class="line">bits(s, i, x / <span class="number">10</span>);</span><br><span class="line">s[i++] = x % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bits</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, st &amp;i, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) <span class="keyword">return</span>;</span><br><span class="line">bits(s, i, x / <span class="number">10</span>);</span><br><span class="line">s[i++] = x % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">float2str</span><span class="params">(<span class="keyword">double</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll x = (ll)num; st i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> y = num - x;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">bits(s, i, x);</span><br><span class="line">s[i++] = <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">y *= <span class="number">10</span>;</span><br><span class="line">s[i++] = <span class="keyword">int</span>(y + <span class="number">0.1</span>) % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="keyword">int</span>(<span class="built_in">ceil</span>(y)) != <span class="keyword">int</span>(y + <span class="number">0.1</span>));</span><br><span class="line">s[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">float2ch_arr</span><span class="params">(<span class="keyword">double</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll x = (ll)num; st i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> y = num - x;</span><br><span class="line"><span class="keyword">char</span>* s = <span class="keyword">new</span> <span class="keyword">char</span>[N &gt;&gt; <span class="number">1</span>];</span><br><span class="line">bits(s, i, x);</span><br><span class="line">s[i++] = <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">y *= <span class="number">10</span>;</span><br><span class="line">s[i++] = <span class="keyword">int</span>(y + <span class="number">0.1</span>) % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="keyword">int</span>(<span class="built_in">ceil</span>(y)) != <span class="keyword">int</span>(y + <span class="number">0.1</span>));</span><br><span class="line">s[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">con_char2int</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll num = <span class="number">0</span>, sign = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (*s == <span class="string">'-'</span>) s++, sign *= <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (*s) num = num * <span class="number">10</span> + (*s - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">return</span> num * sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">str2int</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> con_char2int(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">int2str</span><span class="params">(ll num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s; st i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">0</span>) s += <span class="string">"-"</span>, i++;</span><br><span class="line">bits(s, i, num);</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">str2bool</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> var;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; s[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; s[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; s[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; s[<span class="number">4</span>] == <span class="string">'\0'</span>) var = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> var = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> var;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">bool</span> b_v;</span><br><span class="line">ll i_v;</span><br><span class="line"><span class="keyword">double</span> d_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; arr_v;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> key;</span><br><span class="line">st keys;</span><br><span class="line"><span class="keyword">bool</span> isvalue;</span><br><span class="line">Type type;</span><br><span class="line">ll table[N];</span><br><span class="line">BaseNode *children[N], *parent;</span><br><span class="line"></span><br><span class="line">BaseNode()</span><br><span class="line">&#123;</span><br><span class="line">keys = <span class="number">0</span>, isvalue = <span class="literal">false</span>, type = OBJECT, parent = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) table[i] = <span class="number">-1</span>, children[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">BaseNode(BaseNode*p, <span class="keyword">const</span> <span class="keyword">char</span> *k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">sk</span><span class="params">(k)</span></span>;</span><br><span class="line">key = sk, keys = <span class="number">0</span>, isvalue = <span class="literal">false</span>, parent = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) table[i] = <span class="number">-1</span>, children[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">~BaseNode() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonTree</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">BaseNode *root;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pstr;</span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(BaseNode*r, <span class="keyword">int</span> format)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'&#123;'</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line">BaseNode*node = r-&gt;children[i];</span><br><span class="line"><span class="keyword">if</span> (node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format; j++)</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;key &lt;&lt; <span class="string">"\" : "</span>;</span><br><span class="line"><span class="keyword">switch</span> (node-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> BOOL:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (node-&gt;b_v ? <span class="string">"true"</span> : <span class="string">"false"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INTEGER:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;i_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FLOAT:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;d_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STRING:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;s_v &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ARRAY:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'['</span>;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; node-&gt;arr_v.size(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;arr_v[j] &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="keyword">if</span> (j != node-&gt;arr_v.size() - <span class="number">1</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">']'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OBJECT:</span><br><span class="line">print(r-&gt;children[i], format + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">","</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format - <span class="number">1</span>; j++)</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'&#125;'</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format - <span class="number">1</span>; j++)</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BaseNode* <span class="title">findkey</span><span class="params">(BaseNode*r, <span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r) <span class="keyword">return</span> r-&gt;children[r-&gt;table[weight(s)]];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory</span><span class="params">(BaseNode*&amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">destory(r-&gt;children[i]);</span><br><span class="line"><span class="keyword">delete</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">JsonTree() &#123; root = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">JsonTree(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s);</span><br><span class="line">&#125;</span><br><span class="line">JsonTree(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line">~JsonTree()</span><br><span class="line">&#123;</span><br><span class="line">destory(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parse(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[N]; st i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> arr_sw = <span class="literal">false</span>, obj_sw = <span class="literal">false</span>, str_sw = <span class="literal">false</span>;</span><br><span class="line">root = <span class="keyword">new</span> BaseNode();</span><br><span class="line">BaseNode *nd = root;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#123;'</span>: <span class="keyword">if</span> (obj_sw) &#123; nd = nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]; nd-&gt;type = OBJECT; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#125;'</span>: nd = nd-&gt;parent; obj_sw = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'"'</span>: <span class="keyword">if</span> (str_sw) str_sw = <span class="literal">false</span>; <span class="keyword">else</span> str_sw = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> b = <span class="literal">false</span>; <span class="keyword">double</span> dounum = <span class="number">0</span>;</span><br><span class="line">ll intnum = <span class="number">0</span>; st f = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">str[i] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">if</span> (!arr_sw)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">11</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((str[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'\0'</span>) ||</span><br><span class="line">(str[<span class="number">0</span>] == <span class="string">'f'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'a'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'l'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'s'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">5</span>] == <span class="string">'\0'</span>))</span><br><span class="line">f = <span class="number">3</span>, b = str2bool(str);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line"><span class="keyword">if</span> (str[j] == <span class="string">'.'</span> || str[<span class="number">0</span>] == <span class="string">'-'</span> || (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>)) f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123; f = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line"><span class="keyword">if</span> (str[j] != <span class="string">'.'</span> || (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>)) f = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> &#123; f = <span class="number">1</span>, pos = j; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (f == <span class="number">2</span>) intnum = str2int(str);</span><br><span class="line"><span class="keyword">else</span> dounum = str2float(str, pos, i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> f = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (nd-&gt;isvalue)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nd-&gt;children[nd-&gt;keys - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ps</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="keyword">switch</span> (f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = STRING;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;s_v = ps;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = FLOAT;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;d_v = dounum;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = INTEGER;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;i_v = intnum;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = BOOL;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;b_v = b;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = ARRAY;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;arr_v.push_back(ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nd-&gt;table[weight(str)] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">BaseNode *n = <span class="keyword">new</span> BaseNode(nd, str);</span><br><span class="line">nd-&gt;children[nd-&gt;keys] = n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>, obj_sw = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">':'</span>: <span class="keyword">if</span> (str_sw) str[i++] = *s; <span class="keyword">else</span> &#123; <span class="keyword">if</span> (nd-&gt;table[weight(str)] == <span class="number">-1</span>) nd-&gt;table[weight(str)] = nd-&gt;keys++; nd-&gt;isvalue = <span class="literal">true</span>; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">','</span>: <span class="keyword">if</span> (str_sw) str[i++] = *s; <span class="keyword">else</span> &#123; <span class="keyword">if</span> (!arr_sw) nd-&gt;isvalue = <span class="literal">false</span>; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">' '</span>: <span class="keyword">if</span> (str_sw) str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'['</span>: arr_sw = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">']'</span>: arr_sw = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>: <span class="keyword">if</span> (str_sw) str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\n'</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:  str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">parse2url</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parse(s);</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; root-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line">BaseNode*node = root-&gt;children[i];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = node-&gt;key;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; str.size(); j++)</span><br><span class="line">pstr += str[j];</span><br><span class="line">pstr += <span class="string">"="</span>;</span><br><span class="line">str.clear();</span><br><span class="line"><span class="keyword">switch</span> (node-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> BOOL: <span class="keyword">if</span> (node-&gt;b_v) str = <span class="string">"true"</span>; <span class="keyword">else</span> str = <span class="string">"false"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INTEGER: str = int2str(node-&gt;i_v);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FLOAT: str = float2str(node-&gt;d_v);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STRING: str = node-&gt;s_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"String parse error!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; str.size(); j++)</span><br><span class="line">pstr += str[j];</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>)</span><br><span class="line">pstr += <span class="string">"&amp;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pstr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">getvalue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BaseNode*node = findkey(root, key);</span><br><span class="line"><span class="keyword">if</span> (node)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*switch(node-&gt;type)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">        case BOOL: return node-&gt;b_v;</span></span><br><span class="line"><span class="comment">        case INTEGER: return node-&gt;i_v;</span></span><br><span class="line"><span class="comment">        case FLOAT: return node-&gt;d_v;</span></span><br><span class="line"><span class="comment">        case STRING: return node-&gt;s_v;</span></span><br><span class="line"><span class="comment">        case ARRAY: return node-&gt;arr_v;</span></span><br><span class="line"><span class="comment">        default: return node-&gt;children[node-&gt;table[weight(key)]];</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"><span class="keyword">return</span> node-&gt;s_v.c_str();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">operator</span>[](<span class="keyword">const</span> <span class="keyword">char</span>*key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> getvalue(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span>&amp; <span class="title">operator</span>=(<span class="title">T</span> <span class="title">v</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">setvalue</span>(<span class="title">const</span> <span class="title">char</span>*<span class="title">key</span>, <span class="title">T</span> <span class="title">value</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BaseNode*node = findkey(root, key);</span><br><span class="line"><span class="keyword">if</span> (node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (node-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> BOOL: node-&gt;b_v = value; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INTEGER: node-&gt;i_v = value; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FLOAT: node-&gt;d_v = value; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STRING: node-&gt;s_v = value; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ARRAY: node-&gt;arr_v = value; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">/* // 如果是直接在原本的value中进行添加，则不用清除，否则就清除所有子节点</span></span><br><span class="line"><span class="comment">            for (st i = 0; i &lt; node-&gt;keys; i++)</span></span><br><span class="line"><span class="comment">                destory(node-&gt;children[i]);</span></span><br><span class="line"><span class="comment">            node-&gt;keys = 0;*/</span></span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; value.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">node-&gt;table[weight(value[i]-&gt;key)] = node-&gt;keys;</span><br><span class="line">value[i]-&gt;parent = node;</span><br><span class="line">node-&gt;children[node-&gt;keys++] = value[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Not found the key!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">void</span> <span class="title">add</span>(<span class="title">const</span> <span class="title">char</span>*<span class="title">key</span>, <span class="title">T</span> <span class="title">value</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">BaseNode*node = findkey(root, key);</span><br><span class="line"><span class="keyword">if</span> (!node)</span><br><span class="line">&#123;</span><br><span class="line">BaseNode*n = <span class="keyword">new</span> BaseNode(root, key);</span><br><span class="line"><span class="keyword">switch</span> (n-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> BOOL: n-&gt;b_v = value; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INTEGER: n-&gt;i_v = value; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FLOAT: n-&gt;d_v = value; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STRING: n-&gt;s_v = value; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ARRAY: n-&gt;arr_v = value; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">n-&gt;type = OBJECT;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; value.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">n-&gt;table[weight(value[i]-&gt;key)] = n-&gt;keys;</span><br><span class="line">value[i]-&gt;parent = n;</span><br><span class="line">n-&gt;children[n-&gt;keys++] = value[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;table[weight(key)] = root-&gt;keys++;</span><br><span class="line">root-&gt;children[root-&gt;keys - <span class="number">1</span>] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"The key was existed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BaseNode*node = findkey(root, key);</span><br><span class="line"><span class="keyword">if</span> (node)</span><br><span class="line">&#123;</span><br><span class="line">BaseNode*p = node-&gt;parent;</span><br><span class="line">p-&gt;keys--;</span><br><span class="line">p-&gt;table[weight(node-&gt;key.c_str())] = <span class="number">-1</span>;</span><br><span class="line">destory(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Not found the key!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visual</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">print(root, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">JsonTree r;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">fstream <span class="title">context</span><span class="params">(<span class="string">"json.txt"</span>, <span class="built_in">std</span>::fstream::in | <span class="built_in">std</span>::fstream::out | <span class="built_in">std</span>::fstream::app)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> line, str;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">std</span>::getline(context, line))</span><br><span class="line">str += line;</span><br><span class="line">context.close();</span><br><span class="line">r.parse(str);</span><br><span class="line">r.visual();</span><br><span class="line"><span class="comment">// std::cout &lt;&lt; r.getvalue("time") &lt;&lt; std::endl;</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[<span class="string">"Verdana"</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// r.setvalue("time", 154.2);</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r.getvalue(<span class="string">"Latin_Modern"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Update-2018-09-27"><a href="#Update-2018-09-27" class="headerlink" title="Update 2018-09-27"></a>Update 2018-09-27</h3><h5 id="am-05-03"><a href="#am-05-03" class="headerlink" title="am 05:03"></a>am 05:03</h5><p><strong>此次更新的主要内容</strong></p><ol><li>增加了通过<code>key</code>获取/设置对应的<code>value</code>的api:<code>getvalue()</code>、<code>setvalue()</code>；</li><li>增加了通过<code>key</code>删除<code>key-value</code>的api；</li><li>增加了函数<code>weight()</code>，它的作用是在<code>json</code>树内建一个<code>weighth-table</code>，使得能够通过传入关键字<code>key</code>，在 $ O(n) $（为关键字<code>key</code>字符串的长度）时间复杂度定位到<code>key</code>。详细<code>防止映射冲突</code>算法是通过将字符串每一位字符 <code>c</code> 减去 <code>ascii</code> 码 <code>A</code>的值乘以该字符所处的字符串中的位置，然后将每一位求和，最后再加上字符串长度。设字符串为 $ s $，长度为 $ l $，则用数学公式表示为：<script type="math/tex; mode=display">weight(s) = l + \sum_{i = 0}^{l} (s[i] - 'A')*i</script></li><li>重载了<code>[]</code>符，使其能够通过字符串<code>key</code>来获取或设置<code>value</code>值。但并不完善。只能对一种类型的<code>value</code>进行操作；</li><li>增加了许多内置转换函数：<code>bits()</code>、<code>float2str()</code>、<code>float2ch_arr()</code>、<code>int2str()</code>、<code>con_char2int</code>；</li><li>修复了<code>str2float()</code>与<code>str2int()</code>为负数时的bug。</li><li>完善了之前一些没注意到地方的。</li></ol><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> st size_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> index(c) (c - <span class="meta-string">'A'</span>)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; BOOL, INTEGER, FLOAT, STRING, ARRAY, OBJECT &#125; Type;</span><br><span class="line"><span class="function">st <span class="title">weight</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st i = <span class="number">0</span>, x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i]) x += index(s[i])*i, i += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x + i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">str2float</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, st p, st r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> num = <span class="number">0</span>, propoint = <span class="number">0</span>, sign = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (*s == <span class="string">'-'</span>) s++, sign *= <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (*s != <span class="string">'.'</span>) num = num * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">while</span> (*s) propoint = propoint * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">num += propoint / <span class="built_in">std</span>::<span class="built_in">pow</span>(<span class="number">10</span>, r - p);</span><br><span class="line"><span class="keyword">return</span> num*sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bits</span><span class="params">(<span class="keyword">char</span> s[], st &amp;i, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> ;</span><br><span class="line">    bits(s, i, x/<span class="number">10</span>);</span><br><span class="line">    s[i++] = x%<span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bits</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, st &amp;i, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> ;</span><br><span class="line">    bits(s, i, x/<span class="number">10</span>);</span><br><span class="line">    s[i++] = x%<span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">float2str</span><span class="params">(<span class="keyword">double</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x = (ll)num; st i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> y = num - x;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">    bits(s, i, x);</span><br><span class="line">    s[i++] = <span class="string">'.'</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        y *= <span class="number">10</span>;</span><br><span class="line">        s[i++] = <span class="keyword">int</span>(y + <span class="number">0.1</span>)%<span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="keyword">int</span>(<span class="built_in">ceil</span>(y)) != <span class="keyword">int</span>(y + <span class="number">0.1</span>));</span><br><span class="line">    s[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">float2ch_arr</span><span class="params">(<span class="keyword">double</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x = (ll)num; st i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> y = num - x;</span><br><span class="line">    <span class="keyword">char</span>* s = <span class="keyword">new</span> <span class="keyword">char</span>[N &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    bits(s, i, x);</span><br><span class="line">    s[i++] = <span class="string">'.'</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        y *= <span class="number">10</span>;</span><br><span class="line">        s[i++] = <span class="keyword">int</span>(y + <span class="number">0.1</span>)%<span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="keyword">int</span>(<span class="built_in">ceil</span>(y)) != <span class="keyword">int</span>(y + <span class="number">0.1</span>));</span><br><span class="line">    s[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">con_char2int</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll num = <span class="number">0</span>, sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (*s == <span class="string">'-'</span>) s++, sign *= <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (*s) num = num * <span class="number">10</span> + (*s - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">return</span> num*sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">str2int</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> con_char2int(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">int2str</span><span class="params">(ll num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s; st i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span>) s += <span class="string">"-"</span>, i++;</span><br><span class="line">    bits(s, i, num);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">str2bool</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> var;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; s[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; s[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; s[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; s[<span class="number">4</span>] == <span class="string">'\0'</span>) var = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> var = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> var;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">bool</span> b_v;</span><br><span class="line">ll i_v;</span><br><span class="line"><span class="keyword">double</span> d_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; arr_v;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> key;</span><br><span class="line">st keys;</span><br><span class="line"><span class="keyword">bool</span> isvalue;</span><br><span class="line">Type type;</span><br><span class="line">ll table[N];</span><br><span class="line">BaseNode *children[N], *parent;</span><br><span class="line"></span><br><span class="line">BaseNode()</span><br><span class="line">&#123;</span><br><span class="line">keys = <span class="number">0</span>, isvalue = <span class="literal">false</span>, type = OBJECT, parent = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) table[i] = <span class="number">-1</span>, children[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">BaseNode(BaseNode*p, <span class="keyword">const</span> <span class="keyword">char</span> *k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">sk</span><span class="params">(k)</span></span>;</span><br><span class="line">key = sk, keys = <span class="number">0</span>, isvalue = <span class="literal">false</span>, parent = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) table[i] = <span class="number">-1</span>, children[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">~BaseNode() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonTree</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">BaseNode *root;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pstr;</span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(BaseNode*r, <span class="keyword">int</span> format)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'&#123;'</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line">BaseNode*node = r-&gt;children[i];</span><br><span class="line"><span class="keyword">if</span> (node)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format; j++)</span><br><span class="line">                        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span>  &lt;&lt; node-&gt;key &lt;&lt; <span class="string">"\" : "</span>;</span><br><span class="line"><span class="keyword">switch</span> (node-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> BOOL:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (node-&gt;b_v ? <span class="string">"true"</span> : <span class="string">"false"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INTEGER:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;i_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FLOAT:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;d_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STRING:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;s_v &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ARRAY:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'['</span>;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; node-&gt;arr_v.size(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;arr_v[j] &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="keyword">if</span> (j != node-&gt;arr_v.size() - <span class="number">1</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">']'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OBJECT:</span><br><span class="line">print(r-&gt;children[i], format + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">","</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format - <span class="number">1</span>; j++)</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'&#125;'</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format - <span class="number">1</span>; j++)</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BaseNode* <span class="title">findkey</span><span class="params">(BaseNode*r, <span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r) <span class="keyword">return</span> r-&gt;children[r-&gt;table[weight(s)]];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory</span><span class="params">(BaseNode*&amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">destory(r-&gt;children[i]);</span><br><span class="line"><span class="keyword">delete</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">JsonTree() &#123; root = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">JsonTree(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s);</span><br><span class="line">&#125;</span><br><span class="line">JsonTree(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line">~JsonTree()</span><br><span class="line">&#123;</span><br><span class="line">destory(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    parse(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[N]; st i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> arr_sw = <span class="literal">false</span>, obj_sw = <span class="literal">false</span>, str_sw = <span class="literal">false</span>;</span><br><span class="line">root = <span class="keyword">new</span> BaseNode();</span><br><span class="line">BaseNode *nd = root;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#123;'</span>: <span class="keyword">if</span> (obj_sw) &#123; nd = nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]; nd-&gt;type = OBJECT; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#125;'</span>: nd = nd-&gt;parent; obj_sw = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'"'</span>: <span class="keyword">if</span> (str_sw) str_sw = <span class="literal">false</span>; <span class="keyword">else</span> str_sw = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">bool</span> b = <span class="literal">false</span>; <span class="keyword">double</span> dounum = <span class="number">0</span>;</span><br><span class="line">                    ll intnum = <span class="number">0</span>; st f = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">                    str[i] = <span class="string">'\0'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!arr_sw)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (i &lt; <span class="number">11</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((str[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'\0'</span>) ||</span><br><span class="line">                                (str[<span class="number">0</span>] == <span class="string">'f'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'a'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'l'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'s'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">5</span>] == <span class="string">'\0'</span>))</span><br><span class="line">                                f = <span class="number">3</span>, b = str2bool(str);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">                                    <span class="keyword">if</span> (str[j] == <span class="string">'.'</span> || str[<span class="number">0</span>] == <span class="string">'-'</span> || (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>)) f = <span class="number">1</span>;</span><br><span class="line">                                    <span class="keyword">else</span> &#123; f = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">                                <span class="keyword">if</span> (f)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">                                        <span class="keyword">if</span> (str[j] != <span class="string">'.'</span> || (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>)) f = <span class="number">2</span>;</span><br><span class="line">                                        <span class="keyword">else</span>  &#123; f = <span class="number">1</span>, pos = j; <span class="keyword">break</span>; &#125;</span><br><span class="line">                                    <span class="keyword">if</span> (f == <span class="number">2</span>) intnum = str2int(str);</span><br><span class="line">                                    <span class="keyword">else</span> dounum = str2float(str, pos, i - <span class="number">1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> f = <span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">if</span> (nd-&gt;isvalue)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (nd-&gt;children[nd-&gt;keys - <span class="number">1</span>])</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ps</span><span class="params">(str)</span></span>;</span><br><span class="line">                            <span class="keyword">switch</span> (f)</span><br><span class="line">                            &#123;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = STRING;</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;s_v = ps;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = FLOAT;</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;d_v = dounum;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = INTEGER;</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;i_v = intnum;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = BOOL;</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;b_v = b;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = ARRAY;</span><br><span class="line">                                nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;arr_v.push_back(ps);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (nd-&gt;table[weight(str)] == <span class="number">-1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            BaseNode *n = <span class="keyword">new</span> BaseNode(nd, str);</span><br><span class="line">                            nd-&gt;children[nd-&gt;keys] = n;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    i = <span class="number">0</span>, obj_sw = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">':'</span>: <span class="keyword">if</span> (str_sw) str[i++] = *s; <span class="keyword">else</span> &#123; <span class="keyword">if</span> (nd-&gt;table[weight(str)] == <span class="number">-1</span>) nd-&gt;table[weight(str)] = nd-&gt;keys++; nd-&gt;isvalue = <span class="literal">true</span>; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">','</span>: <span class="keyword">if</span> (str_sw) str[i++] = *s; <span class="keyword">else</span> &#123; <span class="keyword">if</span> (!arr_sw) nd-&gt;isvalue = <span class="literal">false</span>; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">' '</span>: <span class="keyword">if</span> (str_sw) str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'['</span>: arr_sw = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">']'</span>: arr_sw = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>: <span class="keyword">if</span> (str_sw) str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\n'</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:  str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">parse2url</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parse(s);</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; root-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line">    BaseNode*node = root-&gt;children[i];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = node-&gt;key;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; str.size(); j++)</span><br><span class="line">pstr += str[j];</span><br><span class="line">pstr += <span class="string">"="</span>;</span><br><span class="line">str.clear();</span><br><span class="line"><span class="keyword">switch</span>(node-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">case</span> BOOL: <span class="keyword">if</span> (node-&gt;b_v) str = <span class="string">"true"</span>; <span class="keyword">else</span> str = <span class="string">"false"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> INTEGER: str = int2str(node-&gt;i_v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FLOAT: str = float2str(node-&gt;d_v);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STRING: str = node-&gt;s_v;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"String parse error!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; str.size(); j++)</span><br><span class="line">pstr += str[j];</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>)</span><br><span class="line">pstr += <span class="string">"&amp;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pstr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">getvalue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BaseNode*node = findkey(root, key);</span><br><span class="line">    <span class="keyword">if</span> (node)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            switch(node-&gt;type)</span></span><br><span class="line"><span class="comment">//            &#123;</span></span><br><span class="line"><span class="comment">//            case BOOL: return node-&gt;b_v;</span></span><br><span class="line"><span class="comment">//            case INTEGER: return node-&gt;i_v;</span></span><br><span class="line"><span class="comment">//            case FLOAT: return node-&gt;d_v;</span></span><br><span class="line"><span class="comment">//            case STRING: return node-&gt;s_v;</span></span><br><span class="line"><span class="comment">//            case ARRAY: return node-&gt;arr_v;</span></span><br><span class="line"><span class="comment">//            default: return node-&gt;children[node-&gt;table[weight(key)]];</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">return</span> node-&gt;d_v;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">operator</span>[](<span class="keyword">const</span> <span class="keyword">char</span>*key)</span><br><span class="line">&#123;</span><br><span class="line">    BaseNode*node = findkey(root, key);</span><br><span class="line">    <span class="keyword">if</span> (node)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            switch(node-&gt;type)</span></span><br><span class="line"><span class="comment">//            &#123;</span></span><br><span class="line"><span class="comment">//            case BOOL: return node-&gt;b_v;</span></span><br><span class="line"><span class="comment">//            case INTEGER: return node-&gt;i_v;</span></span><br><span class="line"><span class="comment">//            case FLOAT: return node-&gt;d_v;</span></span><br><span class="line"><span class="comment">//            case STRING: return node-&gt;s_v;</span></span><br><span class="line"><span class="comment">//            case ARRAY: return node-&gt;arr_v;</span></span><br><span class="line"><span class="comment">//            default: return node-&gt;children[node-&gt;table[weight(key)]];</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">return</span> node-&gt;s_v.c_str();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span>&amp; <span class="title">operator</span>=(<span class="title">T</span> <span class="title">v</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">setvalue</span>(<span class="title">const</span> <span class="title">char</span>*<span class="title">key</span>, <span class="title">T</span> <span class="title">value</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        BaseNode*node = findkey(root, key);</span><br><span class="line">        <span class="keyword">if</span> (node)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span>(node-&gt;type)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> BOOL: node-&gt;b_v = value; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> INTEGER: node-&gt;i_v = value; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FLOAT: node-&gt;d_v = value; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STRING: node-&gt;s_v = value; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ARRAY: node-&gt;arr_v = value; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="comment">// 如果是直接在原本的value中进行添加，则不用清除，否则就清除所有子节点</span></span><br><span class="line">    <span class="comment">//            for (st i = 0; i &lt; node-&gt;keys; i++)</span></span><br><span class="line">    <span class="comment">//                destory(node-&gt;children[i]);</span></span><br><span class="line">    <span class="comment">//            node-&gt;keys = 0;</span></span><br><span class="line">                <span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; value.size(); i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    node-&gt;table[weight(value[i]-&gt;key)] = node-&gt;keys;</span><br><span class="line">                    value[i]-&gt;parent = node;</span><br><span class="line">                    node-&gt;children[node-&gt;keys++] = value[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Not found the key!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">add</span>(<span class="title">const</span> <span class="title">char</span>*<span class="title">key</span>, <span class="title">T</span> <span class="title">value</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        BaseNode*node = findkey(root, key);</span><br><span class="line">        <span class="keyword">if</span> (!node)</span><br><span class="line">        &#123;</span><br><span class="line">            BaseNode*n = <span class="keyword">new</span> BaseNode(root, key);</span><br><span class="line">            <span class="keyword">switch</span>(n-&gt;type)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> BOOL: n-&gt;b_v = value; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> INTEGER: n-&gt;i_v = value; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FLOAT: n-&gt;d_v = value; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STRING: n-&gt;s_v = value; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ARRAY: n-&gt;arr_v = value; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                n-&gt;type = OBJECT;</span><br><span class="line">                <span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; value.size(); i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    n-&gt;table[weight(value[i]-&gt;key)] = n-&gt;keys;</span><br><span class="line">                    value[i]-&gt;parent = n;</span><br><span class="line">                    n-&gt;children[n-&gt;keys++] = value[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            root-&gt;table[weight(key)] = root-&gt;keys++;</span><br><span class="line">            root-&gt;children[root-&gt;keys - <span class="number">1</span>] = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"The key was existed!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BaseNode*node = findkey(root, key);</span><br><span class="line">        <span class="keyword">if</span> (node)</span><br><span class="line">        &#123;</span><br><span class="line">            BaseNode*p = node-&gt;parent;</span><br><span class="line">            p-&gt;keys--;</span><br><span class="line">            p-&gt;table[weight(node-&gt;key.c_str())] = <span class="number">-1</span>;</span><br><span class="line">            destory(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"Not found the key!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visual</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">print(root, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">JsonTree r;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function">fstream <span class="title">context</span><span class="params">(<span class="string">"json.txt"</span>, <span class="built_in">std</span>::fstream::in | <span class="built_in">std</span>::fstream::out | <span class="built_in">std</span>::fstream::app)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> line, str;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">std</span>::getline(context, line))</span><br><span class="line">        str += line;</span><br><span class="line">    context.close();</span><br><span class="line">r.parse(str);</span><br><span class="line">r.visual();</span><br><span class="line"><span class="comment">// r.setvalue("time", 156.35);</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r.getvalue(<span class="string">"time"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[<span class="string">"Verdana"</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="example"><a href="#example" class="headerlink" title="example"></a>example</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"Latin_Modern"</span> : <span class="string">"fn_lm"</span>,</span><br><span class="line">        <span class="attr">"Verdana"</span> : <span class="string">"fn_jvn"</span>,</span><br><span class="line">        <span class="attr">"Object"</span> : &#123;</span><br><span class="line">                <span class="attr">"Color"</span> : [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>, <span class="string">"white"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"time"</span> : <span class="string">"-123.23"</span>,</span><br><span class="line">        <span class="attr">"flag"</span> : <span class="string">"true"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">"Latin_Modern"</span> : <span class="string">"fn_lm"</span>,</span><br><span class="line">        <span class="string">"Verdana"</span> : <span class="string">"fn_jvn"</span>,</span><br><span class="line">        <span class="string">"Object"</span> : &#123;</span><br><span class="line">                <span class="string">"Color"</span> : [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>, <span class="string">"white"</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">"time"</span> : -123.23,</span><br><span class="line">        <span class="string">"flag"</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">-123.23 // r.getvalue(<span class="string">"time"</span>)</span><br><span class="line">fn_jvn  // r[<span class="string">"Verdana"</span>]</span><br></pre></td></tr></table></figure><h3 id="Update-2018-09-26"><a href="#Update-2018-09-26" class="headerlink" title="Update 2018-09-26"></a>Update 2018-09-26</h3><h5 id="PS-pm-15-21"><a href="#PS-pm-15-21" class="headerlink" title="PS pm 15:21"></a>PS pm 15:21</h5><p><strong>此次更新所作的主要工作：</strong></p><ol><li>将 <code>obj_sw</code> 完全设定为对象开关，如果遇到字符 <code>{</code> 便进入到更深的一层；</li><li>在数据结构中添加了 <code>isvalue</code> ，正如其名，用来判断正在解析的是否为 <code>value</code>；</li><li>完善了按 <code>Json</code> 格式化输出。</li></ol><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> st size_t</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; BOOL, INTEGER, FLOAT, STRING, ARRAY, OBJECT &#125; Type;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">str2float</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, st p, st r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> num = <span class="number">0</span>, propoint = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*s != <span class="string">'.'</span>) num = num * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">while</span> (*s) propoint = propoint * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">num += propoint / <span class="built_in">std</span>::<span class="built_in">pow</span>(<span class="number">10</span>, r - p);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">st <span class="title">str2int</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">num = num * <span class="number">10</span> + (*s - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">str2bool</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> var;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; s[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; s[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; s[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; s[<span class="number">4</span>] == <span class="string">'\0'</span>) var = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> var = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> var;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">bool</span> b_v;</span><br><span class="line">st i_v;</span><br><span class="line"><span class="keyword">double</span> d_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; arr_v;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> key;</span><br><span class="line">st keys;</span><br><span class="line"><span class="keyword">bool</span> isvalue;</span><br><span class="line">Type type;</span><br><span class="line">BaseNode *children[N], *parent;</span><br><span class="line"></span><br><span class="line">BaseNode()</span><br><span class="line">&#123;</span><br><span class="line">keys = <span class="number">0</span>, isvalue = <span class="literal">false</span>, type = OBJECT, parent = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) children[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">BaseNode(BaseNode*p, <span class="keyword">const</span> <span class="keyword">char</span> *k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">sk</span><span class="params">(k)</span></span>;</span><br><span class="line">key = sk, keys = <span class="number">0</span>, isvalue = <span class="literal">false</span>, parent = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) children[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">~BaseNode() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonTree</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">BaseNode *root;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pstr;</span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(BaseNode*r, <span class="keyword">int</span> format)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'&#123;'</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line">BaseNode*node = r-&gt;children[i];</span><br><span class="line"><span class="keyword">if</span> (node)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format; j++)</span><br><span class="line">                        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span>  &lt;&lt; node-&gt;key &lt;&lt; <span class="string">"\" : "</span>;</span><br><span class="line"><span class="keyword">switch</span> (node-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> BOOL:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (node-&gt;b_v ? <span class="string">"true"</span> : <span class="string">"false"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INTEGER:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;i_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FLOAT:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;d_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STRING:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;s_v &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ARRAY:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'['</span>;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; node-&gt;arr_v.size(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;arr_v[j] &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="keyword">if</span> (j != node-&gt;arr_v.size() - <span class="number">1</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">']'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OBJECT:</span><br><span class="line">print(r-&gt;children[i], format + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">","</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format - <span class="number">1</span>; j++)</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'&#125;'</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; format - <span class="number">1</span>; j++)</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory</span><span class="params">(BaseNode*&amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">destory(r-&gt;children[i]);</span><br><span class="line"><span class="keyword">delete</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">JsonTree() &#123; root = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">JsonTree(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s);</span><br><span class="line">&#125;</span><br><span class="line">JsonTree(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line">~JsonTree()</span><br><span class="line">&#123;</span><br><span class="line">destory(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[N]; <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> arr_sw = <span class="literal">false</span>, obj_sw = <span class="literal">false</span>;</span><br><span class="line">root = <span class="keyword">new</span> BaseNode();</span><br><span class="line">BaseNode *nd = root;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#123;'</span>: <span class="keyword">if</span> (obj_sw) &#123; nd = nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]; nd-&gt;type = OBJECT; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#125;'</span>: nd = nd-&gt;parent; obj_sw = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'"'</span>:   <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> b = <span class="literal">false</span>; <span class="keyword">double</span> dounum = <span class="number">0</span>;</span><br><span class="line">st intnum = <span class="number">0</span>, f = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">str[i] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">if</span> (!arr_sw)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">11</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((str[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'\0'</span>) ||</span><br><span class="line">(str[<span class="number">0</span>] == <span class="string">'f'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'a'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'l'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'s'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">5</span>] == <span class="string">'\0'</span>))</span><br><span class="line">f = <span class="number">3</span>, b = str2bool(str);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">                                <span class="keyword">if</span> (str[j] == <span class="string">'.'</span> || (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>)) f = <span class="number">1</span>;</span><br><span class="line">                                <span class="keyword">else</span> &#123; f = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">                            <span class="keyword">if</span> (f)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">                                    <span class="keyword">if</span> (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>) f = <span class="number">2</span>;</span><br><span class="line">                                    <span class="keyword">else</span> &#123; f = <span class="number">1</span>, pos = j; <span class="keyword">break</span>; &#125;</span><br><span class="line">                                <span class="keyword">if</span> (f == <span class="number">2</span>) intnum = str2int(str);</span><br><span class="line">                                <span class="keyword">else</span> dounum = str2float(str, pos, i - <span class="number">1</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> f = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (nd-&gt;isvalue)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ps</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="keyword">switch</span> (f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = STRING;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;s_v = ps;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = FLOAT;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;d_v = dounum;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = INTEGER;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;i_v = intnum;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = BOOL;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;b_v = b;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = ARRAY;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;arr_v.push_back(ps);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">BaseNode *n = <span class="keyword">new</span> BaseNode(nd, str);</span><br><span class="line">nd-&gt;children[nd-&gt;keys] = n;</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>, obj_sw = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">':'</span>: nd-&gt;keys += <span class="number">1</span>; nd-&gt;isvalue = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">','</span>: <span class="keyword">if</span> (!arr_sw) nd-&gt;isvalue = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">' '</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'['</span>: arr_sw = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">']'</span>: arr_sw = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\n'</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:  str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">parse2url</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parse(s);</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; root-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = root-&gt;children[i]-&gt;key;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : str)</span><br><span class="line">pstr += p;</span><br><span class="line">pstr += <span class="string">"="</span>;</span><br><span class="line">str = root-&gt;children[i]-&gt;s_v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : str)</span><br><span class="line">pstr += p;</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>)</span><br><span class="line">pstr += <span class="string">"&amp;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pstr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visual</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">print(root, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">"&#123;\"Latin_Modern\":\"fn_lm\", \"Verdana\":\"fn_jvn\", \"Object\": &#123;\"Color\": [\"red\", \"blue\", \"green\", \"white\"]&#125;, \"time\" : \"123.23\", \"flag\": \"true\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">JsonTree r;</span><br><span class="line"></span><br><span class="line">r.parse(str);</span><br><span class="line">r.visual();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">"Latin_Modern"</span> : <span class="string">"fn_lm"</span>,</span><br><span class="line">        <span class="string">"Verdana"</span> : <span class="string">"fn_jvn"</span>,</span><br><span class="line">        <span class="string">"Object"</span> : &#123;</span><br><span class="line">                <span class="string">"Color"</span> : [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>, <span class="string">"white"</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">"time"</span> : 123.23,</span><br><span class="line">        <span class="string">"flag"</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="PS-am-3点左右"><a href="#PS-am-3点左右" class="headerlink" title="PS am 3点左右"></a>PS am 3点左右</h5><p><strong>此次更新所作的主要工作：</strong></p><ol><li>对数组类型做了解析判断；</li><li>重命名了变量 <code>k</code> 为 <code>obj_sw</code>，它的主要作用是判断当前数据 <del>是 <code>key</code> 还是 <code>value</code>或者是</del> 新的对象的入口。</li><li>添加了按 Json 格式输出的函数；</li><li>完善了一些之前的问题。</li></ol><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> st size_t</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; BOOL, INTEGER, FLOAT, STRING, ARRAY, OBJECT &#125; Type;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">str2float</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, st p, st r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> num = <span class="number">0</span>, propoint = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*s != <span class="string">'.'</span>) num = num * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">while</span> (*s) propoint = propoint * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">num += propoint / <span class="built_in">std</span>::<span class="built_in">pow</span>(<span class="number">10</span>, r - p);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">st <span class="title">str2int</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">num = num * <span class="number">10</span> + (*s - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">str2bool</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> var;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; s[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; s[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; s[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; s[<span class="number">4</span>] == <span class="string">'\0'</span>) var = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> var = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> var;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">bool</span> b_v;</span><br><span class="line">st i_v;</span><br><span class="line"><span class="keyword">double</span> d_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; arr_v;</span><br><span class="line">BaseNode *children[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> key;</span><br><span class="line">st keys;</span><br><span class="line">Type type;</span><br><span class="line"></span><br><span class="line">BaseNode()</span><br><span class="line">&#123;</span><br><span class="line">keys = <span class="number">0</span>, type = OBJECT;</span><br><span class="line">&#125;</span><br><span class="line">BaseNode(<span class="keyword">const</span> <span class="keyword">char</span> *k, st n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">sk</span><span class="params">(k)</span></span>;</span><br><span class="line">key = sk, keys = n;</span><br><span class="line">&#125;</span><br><span class="line">~BaseNode() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonTree</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">BaseNode *root;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pstr;</span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(BaseNode*r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'&#123;'</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line">BaseNode*node = r-&gt;children[i];</span><br><span class="line"><span class="keyword">if</span> (node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\t'</span> &lt;&lt; <span class="string">"\""</span>  &lt;&lt; node-&gt;key &lt;&lt; <span class="string">"\" : "</span>;</span><br><span class="line"><span class="keyword">switch</span> (node-&gt;type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> BOOL:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (node-&gt;b_v ? <span class="string">"true"</span> : <span class="string">"false"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INTEGER:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;i_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> FLOAT:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; node-&gt;d_v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> STRING:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;s_v &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> ARRAY:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'['</span>;</span><br><span class="line"><span class="keyword">for</span> (st j = <span class="number">0</span>; j &lt; node-&gt;arr_v.size(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\""</span> &lt;&lt; node-&gt;arr_v[j] &lt;&lt; <span class="string">"\""</span>;</span><br><span class="line"><span class="keyword">if</span> (j != node-&gt;arr_v.size() - <span class="number">1</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">']'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> OBJECT:</span><br><span class="line">print(r-&gt;children[i]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">","</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'&#125;'</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory</span><span class="params">(BaseNode*&amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">destory(r-&gt;children[i]);</span><br><span class="line"><span class="keyword">delete</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">JsonTree() &#123; root = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">JsonTree(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s);</span><br><span class="line">&#125;</span><br><span class="line">JsonTree(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line">~JsonTree()</span><br><span class="line">&#123;</span><br><span class="line">destory(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[N]; <span class="keyword">bool</span> arr_sw = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, obj_sw = <span class="number">0</span>;</span><br><span class="line">root = <span class="keyword">new</span> BaseNode();</span><br><span class="line">BaseNode *nd = root;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#123;'</span>: <span class="keyword">if</span> (obj_sw &gt; <span class="number">0</span>) &#123; nd = nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]; nd-&gt;type = OBJECT; obj_sw = <span class="number">0</span>; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#125;'</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'"'</span>:   <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> b; <span class="keyword">double</span> dounum = <span class="number">0</span>; </span><br><span class="line">st intnum = <span class="number">0</span>, f = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">str[i] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">if</span> (!arr_sw)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">11</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line"><span class="keyword">if</span> (str[j] == <span class="string">'.'</span> || (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>)) f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123; f = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line"><span class="keyword">if</span> (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>) f = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> &#123; f = <span class="number">1</span>, pos = j; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (f == <span class="number">2</span>) intnum = str2int(str);</span><br><span class="line"><span class="keyword">else</span> dounum = str2float(str, pos, i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((str[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'\0'</span>) ||</span><br><span class="line">(str[<span class="number">0</span>] == <span class="string">'f'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'a'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'l'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'s'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">5</span>] == <span class="string">'\0'</span>))</span><br><span class="line">f = <span class="number">3</span>, b = str2bool(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> f = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (obj_sw &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ps</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="keyword">switch</span> (f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;s_v = ps;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = STRING;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = FLOAT;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;d_v = dounum;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = INTEGER;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;i_v = intnum;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = BOOL;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;b_v = b;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = ARRAY;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;arr_v.push_back(ps);</span><br><span class="line">obj_sw -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">BaseNode *n = <span class="keyword">new</span> BaseNode(str, <span class="number">0</span>);</span><br><span class="line">nd-&gt;children[nd-&gt;keys] = n;</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>, obj_sw += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">':'</span>: nd-&gt;keys += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">','</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">' '</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'['</span>: arr_sw = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">']'</span>: arr_sw = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\n'</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:  str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">parse2url</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parse(s);</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; root-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = root-&gt;children[i]-&gt;key;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : str)</span><br><span class="line">pstr += p;</span><br><span class="line">pstr += <span class="string">"="</span>;</span><br><span class="line">str = root-&gt;children[i]-&gt;s_v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : str)</span><br><span class="line">pstr += p;</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>)</span><br><span class="line">pstr += <span class="string">"&amp;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pstr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visual</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">print(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">"&#123;\"Latin_Modern\":\"fn_lm\", \"Verdana\":\"fn_jvn\", \"Color\":[\"red\",\"blue\",\"green\",\"white\"]&#125;"</span>;</span><br><span class="line">JsonTree r;</span><br><span class="line"></span><br><span class="line">r.parse(str);</span><br><span class="line">r.visual();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">"Latin_Modern"</span> : <span class="string">"fn_lm"</span>,</span><br><span class="line">        <span class="string">"Verdana"</span> : <span class="string">"fn_jvn"</span>,</span><br><span class="line">        <span class="string">"Color"</span> : [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>, <span class="string">"white"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Update-2018-9-25"><a href="#Update-2018-9-25" class="headerlink" title="Update 2018-9-25"></a>Update 2018-9-25</h3><p>改用了部分<code>C++</code>的特点来编写该<code>Json 解析器</code>，目前只是一个十分简易的解析器，还有许多需要完善的地方。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> st size_t</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; BOOL, INTEGER, FLOAT, STRING, ARRAY, OBJECT &#125; Type;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">str2float</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, st p, st r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> num = <span class="number">0</span>, propoint = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*s != <span class="string">'.'</span>) num = num * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">s++;</span><br><span class="line"><span class="keyword">while</span> (*s) propoint = propoint * <span class="number">10</span> + (*s++ - <span class="string">'0'</span>);</span><br><span class="line">num += propoint / <span class="built_in">std</span>::<span class="built_in">pow</span>(<span class="number">10</span>, r - p);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">str2int</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (*s) num = num * <span class="number">10</span> + (*s - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">str2bool</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> var;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; s[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; s[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; s[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; s[<span class="number">4</span>] == <span class="string">'\0'</span>) var = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> var = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> var;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">bool</span> b_v;</span><br><span class="line"><span class="keyword">int</span> i_v;</span><br><span class="line"><span class="keyword">double</span> d_v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s_v;</span><br><span class="line">BaseNode *children[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> key;</span><br><span class="line">st keys;</span><br><span class="line">Type type;</span><br><span class="line"></span><br><span class="line">BaseNode()</span><br><span class="line">&#123;</span><br><span class="line">keys = <span class="number">0</span>, type = OBJECT;</span><br><span class="line">&#125;</span><br><span class="line">BaseNode(<span class="keyword">const</span> <span class="keyword">char</span> *k, st n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">sk</span><span class="params">(k)</span></span>;</span><br><span class="line">key = sk, keys = n;</span><br><span class="line">&#125;</span><br><span class="line">~BaseNode() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonTree</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">BaseNode *root;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> pstr;</span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory</span><span class="params">(BaseNode*&amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; r-&gt;keys; i++)</span><br><span class="line">destory(r-&gt;children[i]);</span><br><span class="line"><span class="keyword">delete</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">JsonTree() &#123; root = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">JsonTree(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s);</span><br><span class="line">&#125;</span><br><span class="line">JsonTree(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">nullptr</span>;</span><br><span class="line">parse(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line">~JsonTree()</span><br><span class="line">&#123;</span><br><span class="line">destory(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[N]; <span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">root = <span class="keyword">new</span> BaseNode();</span><br><span class="line">BaseNode *nd = root;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#123;'</span>: <span class="keyword">if</span> (k &gt; <span class="number">0</span>) &#123; nd = nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]; nd-&gt;type = OBJECT; k = <span class="number">0</span>; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#125;'</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'"'</span>:   <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> b; <span class="keyword">double</span> dounum = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> intnum = <span class="number">0</span>, f = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">str[i] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line"><span class="keyword">if</span> (str[j] == <span class="string">'.'</span> || (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>)) f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123; f = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line"><span class="keyword">if</span> (str[j] &gt;= <span class="string">'0'</span> &amp;&amp; str[j] &lt;= <span class="string">'9'</span>) f = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> &#123; f = <span class="number">1</span>, pos = j; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (f == <span class="number">2</span>) intnum = str2int(str);</span><br><span class="line"><span class="keyword">else</span> dounum = str2float(str, pos, i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((str[<span class="number">0</span>] == <span class="string">'t'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'r'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'u'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'\0'</span>) ||</span><br><span class="line">(str[<span class="number">0</span>] == <span class="string">'f'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="string">'a'</span> &amp;&amp; str[<span class="number">2</span>] == <span class="string">'l'</span> &amp;&amp; str[<span class="number">3</span>] == <span class="string">'s'</span> &amp;&amp; str[<span class="number">4</span>] == <span class="string">'e'</span> &amp;&amp; str[<span class="number">5</span>] == <span class="string">'\0'</span>))</span><br><span class="line">f = <span class="number">3</span>, b = str2bool(str);</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ps</span><span class="params">(str)</span></span>;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;s_v = ps;</span><br><span class="line"><span class="keyword">switch</span> (f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = STRING;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = FLOAT;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;d_v = dounum;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = INTEGER;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;i_v = intnum;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = BOOL;</span><br><span class="line">nd-&gt;children[nd-&gt;keys - <span class="number">1</span>]-&gt;b_v = b;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">BaseNode *n = <span class="keyword">new</span> BaseNode(str, <span class="number">0</span>);</span><br><span class="line">nd-&gt;children[nd-&gt;keys] = n;</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">0</span>, k += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">':'</span>: nd-&gt;keys += <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">','</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">' '</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\n'</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:  str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">parse2url</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">parse(s);</span><br><span class="line"><span class="keyword">for</span> (st i = <span class="number">0</span>; i &lt; root-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = root-&gt;children[i]-&gt;key;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : str)</span><br><span class="line">pstr += p;</span><br><span class="line">pstr += <span class="string">"="</span>;</span><br><span class="line">str = root-&gt;children[i]-&gt;s_v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : str)</span><br><span class="line">pstr += p;</span><br><span class="line"><span class="keyword">if</span> (i != root-&gt;keys - <span class="number">1</span>)</span><br><span class="line">pstr += <span class="string">"&amp;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pstr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">"&#123;\"Latin_Modern\":\"fn_lm\", \"Verdana\":\"fn_jvn\", \"time\":\"723.34\"&#125;"</span>; <span class="comment">// "&#123;\"Latin_Modern\":\"fn_lm\",\"Verdana\":\"fn_jvn\", \"Color\":[\"red\",\"blue\",\"green\"]&#125;"</span></span><br><span class="line">JsonTree r;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s = r.parse2url(str);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"https://darkchii.cn/s/"</span> &lt;&lt; s &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output-vs2017 最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://darkchii.cn/s/Latin_Modern=fn_lm&amp;Verdana=fn_jvn&amp;time=723.34</span><br><span class="line"></span><br><span class="line">C:\Users\adimin\<span class="built_in">source</span>\repos\JsonParseMachine\Debug\JsonParseMachine.exe (process 18988) exited with code 0.</span><br><span class="line">To automatically close the console when debugging stops, <span class="built_in">enable</span> Tools-&gt;Options-&gt;Debugging-&gt;Automatically close the conso</span><br><span class="line">le when debugging stops.</span><br><span class="line">Press any key to close this window . . .</span><br></pre></td></tr></table></figure><p>output-g++ 6.3.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://darkchii.cn/s/Latin_Modern=fn_lm&amp;Verdana=fn_jvn&amp;time=723.34</span><br><span class="line"></span><br><span class="line">Process returned 0 (0x0)   execution time : 0.243 s</span><br><span class="line">Press any key to <span class="built_in">continue</span>.</span><br></pre></td></tr></table></figure><h3 id="未完成版"><a href="#未完成版" class="headerlink" title="未完成版"></a>未完成版</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 10010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll size_t</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; BOOLEAN, INTEGER, FLOAT, STRING, ARRAY, OBJECT &#125; Type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">obj</span> &#123;</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="keyword">bool</span> b_v;</span><br><span class="line"><span class="keyword">int</span> i_v;</span><br><span class="line"><span class="keyword">double</span> d_v;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *s_v;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">obj</span> *<span class="title">children</span>[<span class="title">SIZE</span>];</span></span><br><span class="line">&#125; value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *key;</span><br><span class="line">ll keys;</span><br><span class="line">Type type;</span><br><span class="line">&#125; JsonTrees;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JsonObj</span> &#123;</span></span><br><span class="line">JsonTrees *root;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialized</span><span class="params">(struct JsonObj **prt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*prt = (struct JsonObj *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct JsonObj));</span><br><span class="line">(*prt)-&gt;root = (JsonTrees *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(JsonTrees));</span><br><span class="line"><span class="built_in">memset</span>((*prt)-&gt;root-&gt;value.children, <span class="number">0</span>, <span class="keyword">sizeof</span>((*prt)-&gt;root-&gt;value.children));</span><br><span class="line">(*prt)-&gt;root-&gt;type = OBJECT;</span><br><span class="line">(*prt)-&gt;root-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">(*prt)-&gt;root-&gt;keys = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">JsonTrees *<span class="title">parse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JsonObj</span> *<span class="title">prt</span>;</span></span><br><span class="line">JsonTrees *r, *nd;</span><br><span class="line"><span class="keyword">char</span> str[SIZE];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(str, <span class="number">0</span>, <span class="keyword">sizeof</span>(str));</span><br><span class="line">initialized(&amp;prt);</span><br><span class="line">nd = r = prt-&gt;root;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#123;'</span>: <span class="keyword">if</span> (k &gt; <span class="number">0</span>) &#123; nd = nd-&gt;value.children[nd-&gt;keys - <span class="number">1</span>]; nd-&gt;type = OBJECT; k = <span class="number">0</span>; &#125; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'&#125;'</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'"'</span>: <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">str[i] = <span class="string">'\0'</span>; i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">nd-&gt;value.children[nd-&gt;keys - <span class="number">1</span>]-&gt;type = STRING;</span><br><span class="line">nd-&gt;value.children[nd-&gt;keys - <span class="number">1</span>]-&gt;value.s_v = str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">JsonTrees *n = (JsonTrees *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(JsonTrees));</span><br><span class="line"><span class="built_in">memset</span>(n-&gt;value.children, <span class="number">0</span>, <span class="keyword">sizeof</span>(n-&gt;value.children));</span><br><span class="line">n-&gt;keys = <span class="number">0</span>;</span><br><span class="line">n-&gt;key = str;</span><br><span class="line">nd-&gt;value.children[nd-&gt;keys] = n;</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">':'</span>: nd-&gt;keys++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">','</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">' '</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'\n'</span>: <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:  str[i++] = *s; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parse2url</span><span class="params">(JsonTrees *pt, <span class="keyword">char</span> *url_endings)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pt-&gt;keys; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *ps = pt-&gt;value.children[i]-&gt;key;</span><br><span class="line"><span class="keyword">while</span> (*ps)</span><br><span class="line">url_endings[j++] = *ps++;</span><br><span class="line">url_endings[j++] = <span class="string">'='</span>;</span><br><span class="line">ps = pt-&gt;value.children[i]-&gt;value.s_v;</span><br><span class="line"><span class="keyword">while</span> (*ps)</span><br><span class="line">url_endings[j++] = *ps++;</span><br><span class="line">url_endings[j++] = <span class="string">'&amp;'</span>;</span><br><span class="line">&#125;</span><br><span class="line">url_endings[j - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory</span><span class="params">(struct JsonObj **prt, JsonTrees **pt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (*pt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (*pt)-&gt;keys; i++)</span><br><span class="line">destory(prt, &amp;(*pt)-&gt;value.children[i]);</span><br><span class="line"><span class="built_in">free</span>(*pt);</span><br><span class="line"><span class="keyword">if</span> (*prt)</span><br><span class="line"><span class="built_in">free</span>(*prt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">"&#123;\"Latin_Modern\":\"fn_lm\",\"Verdana\":\"fn_jvn\"&#125;"</span>; <span class="comment">// "&#123;\"Latin_Modern\":\"fn_lm\",\"Verdana\":\"fn_jvn\", \"Color\":[red,blue,green]&#125;"</span></span><br><span class="line"><span class="keyword">char</span> url_eds[SIZE];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(url_eds, <span class="number">0</span>, <span class="keyword">sizeof</span>(url_eds));</span><br><span class="line">JsonTrees *r = parse(str);</span><br><span class="line">parse2url(r, url_eds);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"https://darkchii.cn/s/"</span>);</span><br><span class="line"><span class="built_in">puts</span>(url_eds);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码有个迷のbug，貌似每一个<code>children</code>的地址都被最后一个节点覆盖了，所以不管<code>key</code>or<code>value</code>都是最后一个字符串<code>fn_jvn</code>，但我没找到原因。</p><p>这颗树类似这样的建立方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span> &#123;</span></span><br><span class="line">    T *next[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></span><br><span class="line">    T* root;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">T*<span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P *pt = (P*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(P));</span><br><span class="line">    pt-&gt;root = (T*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(T));</span><br><span class="line">    T *next_n;</span><br><span class="line">    next_n = pt-&gt;root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        T *n = (T*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(T));</span><br><span class="line">        <span class="built_in">memset</span>(n-&gt;next, <span class="number">0</span>, <span class="keyword">sizeof</span>(n-&gt;next));</span><br><span class="line">        n-&gt;v = i;</span><br><span class="line">        next_n-&gt;next[i] = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pt-&gt;root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T*head = init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, head-&gt;next[i]-&gt;v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写没有任何问题。</p>]]></content>
      
      <categories>
          
          <category> 词法分析树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>日记/周记/月记/年记（不定时更新...）</title>
      <link href="/2018/07/15/write-something/"/>
      <url>/2018/07/15/write-something/</url>
      <content type="html"><![CDATA[<h1 id="自带BGM"><a href="#自带BGM" class="headerlink" title="自带BGM"></a>自带BGM</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28738498&auto=1&height=66"></iframe><h3 id="2018-07-30"><a href="#2018-07-30" class="headerlink" title="2018-07-30"></a>2018-07-30</h3><p>发现自己真的是一个很糟糕的人。。。</p><h3 id="2018-08-01"><a href="#2018-08-01" class="headerlink" title="2018-08-01"></a>2018-08-01</h3><p>今天看了一部番叫《超能力女儿》，不说其他无意义的，我想每个看过的人都会有自己的想法。自己的那点一己之见还不如拿来刷题233，但还是要点赞的是，真的挺好看的~</p><p>还有前几天看的《混沌武士》也不错，是因为打斗动作很流畅补的，看完发现这部番除了打斗外也不错！</p><h3 id="2018-08-11"><a href="#2018-08-11" class="headerlink" title="2018-08-11"></a>2018-08-11</h3><p>学习日语</p><p>以前学过一点五十音，但没多久中断了，这次打算从零开始持续学习~首先是把电脑系统加上了日本输入法，然后再把五十音、浊音/半浊音、拨音、促音、拗音、长音记熟。</p><h3 id="2018-08-17"><a href="#2018-08-17" class="headerlink" title="2018-08-17"></a>2018-08-17</h3><p>下面是在网上找到的一段日语，我试着独立标注一下罗马音（google 翻译，但对一些实在不通顺的地方做了修改）。</p><p>问题：水はなんで腐るの？<br>问题描述：水ってH2Oですよね。つまり無機物。だからどう考えても腐りようがないと思うんです。何で腐るんですか？</p><p>罗马音：mizuwa nande kusa runo?<br>原句子： 水は  なんで  腐  るの？<br>翻译：水为什么会腐烂呢？</p><p>罗马音：mizutsute H2Odesu yone。tsu mari mukibutsu。<br>原句子：  水って   H2Oです よね。 つ  まり  無機物。<br>翻译：水是H2O吧。也就是无机物。</p><p>罗马音：dakara dou kangaete mo kusariyou ga  nai to omoun desu。<br>原句子：だから どう  考えて  も   腐りよう が  ない と 思うん です。<br>翻译：所以不管怎么去考虑，它也不会腐烂。</p><p>罗马音：nan de kusarun  desu ka?<br>原句子： 何  で  腐るん  です か？<br>翻译：那为什么会腐烂呢得斯嘎?</p><p>（p.s.学习一个星期了，加油~~</p><h3 id="2018-08-19"><a href="#2018-08-19" class="headerlink" title="2018-08-19"></a>2018-08-19</h3><p>今天早上睁眼看手机时看了一道算法题，然后脑洞了一个算法，类似hash表(我认为它是一个链式hash表)，通过数组下标映射到下标上的值，再通过該值作为下标来继续映射找到数组中重复的数据。但使用有几个前提：</p><p>1.数组中所有数据不能大于数组长度<br>2.重复的数据必须排列在数组最左端<br>3.必须要有与重复数据长度相等数据<br>4.以重复数据为下标的位置上的数不能是重复数据位置的下标大小(下标从0开始算)<br>5.所有数据重复出现次数不能大于2。</p><p>释义:<br>比如 5,3,5,4,2,3,6,7<br>该数组中3,5是重复数据，长度为2，所有数据的大小都小于8，2出现在数组中，5,3排在数组最前面，数组中第5个位置上的数不为0，第3个位置上的数不为1，所有数据重复次数不大于2。条件满足。所以一定能找到5,3的重复数据。<br>最后一个条件的原因是假如相同，就会导致死循环(比如:35456173,这里重复的是3,5 但第5个位置上是1，1正好是5的下标，所以会死循环)。<br>再比如，5,4,6,5,3,4,6,7<br>重复的有 5,4,6，这3个数只要满足前面5个条件，就一定能找到对应的另一重复数。</p><p>更多例子: 54534267、54524367、54523467、23543267、63546327 :)</p><p>不过使用条件非常刻苛刻wwww，所以没什么用。。或许可以用在海量数据满足上述5个条件中，查找到所有重复数据的下标位置。。然而时间复杂度可能为 $ O(nlgn) $ 。。。</p><h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mapping</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] == arr[n] &amp;&amp; i != n)</span><br><span class="line">        <span class="keyword">return</span> n; <span class="comment">// 下标</span></span><br><span class="line">    <span class="keyword">return</span> mapping(i, arr[arr[n]])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; mapping(<span class="number">0</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个七夕恶搞数列题，用手没推出通项公式(应该没有通项公式)，答案就是下一年单身的时长为365天😂…</p><p>原题：数列 $ {a_n} $ 满足: $ a_1 = \frac{1}{2} $， $ a_{n + 1} = a_n + \frac{a_n^2}{n} $，求 $ 100a_7 $。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">a</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span>; </span><br><span class="line">    <span class="keyword">return</span> a(n - <span class="number">1</span>) + a(n - <span class="number">1</span>)*a(n - <span class="number">1</span>)/(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">100</span>*a(<span class="number">7</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2018-08-30"><a href="#2018-08-30" class="headerlink" title="2018-08-30"></a>2018-08-30</h3><p>今日わね　たくさん　日本語　勉強しました。でも　あまり熟練でわありません　です。<br>えと…さっき　単語を　一つ　と　文を　一つも　習いました。<br>えと…その文わこの様なものです：“この薬は　日に　3回　飲んでください。”<br>えと…まずそれをやりましょう。<br>頑張ります!!</p><h3 id="2018-09-28"><a href="#2018-09-28" class="headerlink" title="2018-09-28"></a>2018-09-28</h3><p>命运石之门0完结了。。。好难过。</p><h3 id="2018-10-09"><a href="#2018-10-09" class="headerlink" title="2018-10-09"></a>2018-10-09</h3><p>最近发现国学的重要性了，因为发现自己想要对美好的事物表示赞叹时，却何其的词穷（比如上面这段日记）。。。该看点文学作品了。</p><h3 id="2018-10-18"><a href="#2018-10-18" class="headerlink" title="2018-10-18"></a>2018-10-18</h3><p>哦？今年的夏天，好像连夏日最后的一丝温暖都还未触摸到就被凉意惊醒了。记不清季节的我看了一下日历，才发现昨天是重阳节。</p><p>我到底在做什么？我自己也不知道，就这么随意任性的在家里宅了快3个月。时间就这么无情的流逝，无声的流逝让我感到可怕。啊，真希望时间能在我消沉、抑郁的时候停止，但这样或许我的时间将永远不在前进。</p><p>（p.s.最近也没怎么学日语。。。</p><h3 id="2018-10-22"><a href="#2018-10-22" class="headerlink" title="2018-10-22"></a>2018-10-22</h3><p>回想起来，还在上高中时，虽然只是中二时期，但也还是立下好多美好的愿望呢，比如，看完国学作品、看完夏目漱石的《吾辈わ猫である》、名人传记等等（敢想象我当时还是一个理科生吗，嘛，其实我一直没觉得自己是一个理科生，不过，也没觉得自己是文科生，而是对这个毫无概念），然而至今一个也没有完成。</p><p>今天去书店了，偶然看到了《我是猫》，回忆起那时在学校书本上看到的一段该作品的节选，当时就被文章名以及作者的叙事手法吸引住了，看完后虽然说不出太多感想，但觉得很喜欢，但又因为只是节选，然后决定以后有钱一定买书看完整的，说起来，当时的自己连上网也不太会，也没啥上网的环境，更不太懂找资源，emm，嘛，苦逼学生一个。不过，后来有一次去书店买书，结果也给忘记了。哎。emm，今天在书店里又拿起看了一会儿，嗯，果然不错，现在更作为一个养猫的人，我感觉能更有代入感了，说实话，我对我家猫也是又爱又恨。</p><p>时常在想什么时候自己也能写出如此吸引人的故事呢？</p><p>自己也想过当一个写手，虽然文笔很差，但总是没有自信去开始。</p><p>最早有这个想法的时候还是大一那会儿，听了一首特别具有神话气息的歌曲，看到评论区大家一起编写的有趣的故事，联想到不知是自己在何时听闻来的故事。只有淡淡的印象，那是一个凄美的神话爱情故事。相信大家在小时候也或多或少在一些地方了解到这样一些凄美的神话故事，虽然可能很短，虽然可能并不太理解，但却留下了淡淡的印象。长大后，才明白其中的美。现在每当听到这样的歌曲和看到这样凄美的神话故事时，不知为何内心都会有一种淡淡的疼痛。</p><p>我发现别人都很认真也很勤劳。他们每当看完一部作品后，都会很认真的为作品写一篇感想文，内容质量也都很不错，这一点让我觉得很惭愧。</p><p>于是决定改天把《我是猫》看完以后，动手写一篇感想。</p><p>多看书，多积累一些常识和知识作为素材。</p><p>这些素材其实都是作为写手的资本，嗯，如果想成为一个写手，我想，经验和丰富的知识是最重要的基础条件。</p><p>对经验也很重要，体会过，理解过，在那个时间、那个场所留下过自己强烈的存在，我个人认为这样才能称为经验。</p><p>嘛，经验这种东西也是可遇不可求的。</p><p>比如恋爱经验我可能这辈子也无缘了。</p><h3 id="2018-10-23"><a href="#2018-10-23" class="headerlink" title="2018-10-23"></a>2018-10-23</h3><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=487028428&auto=1&height=66"></iframe><p>早上6点多起床吃了早餐（虽然只是简单到没有其他佐料的面条）。</p><p>决定整理一下博客，准备了一些图片，打算筛选一下为主页中每篇文章的设置一张不一样的图。</p><p>弄了一小会儿，转头发现床上有一只萤火虫，虽然一开始被吓了一跳，以为是什么虫子呢。但仔细看发现是萤火虫，嗯，意外的感觉好开心，因为已经很久没见到萤火虫了。</p><p><img src="/img/20181023_075321.jpg" alt="1"></p><p><img src="/img/20181023_075426.jpg" alt="2"></p><p><img src="/img/20181023_080024.jpg" alt="3"></p><p><img src="/img/20181023_080034.jpg" alt="4"></p><p><img src="/img/20181023_080915.jpg" alt="5"></p><p><img src="/img/20181023_080935.jpg" alt="6"></p><p>嗯，感觉心情不错。</p><p>希望今天一天的心情能保持下去~</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/10/hello-world/"/>
      <url>/2018/07/10/hello-world/</url>
      <content type="html"><![CDATA[<h2 id="个人小站建立时间"><a href="#个人小站建立时间" class="headerlink" title="个人小站建立时间"></a>个人小站建立时间</h2><p>2018-07-06</p>]]></content>
      
      
    </entry>
    
  
  
</search>
